
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00001aae  00001b42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  008000ac  008000ac  00001b8e  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001043  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_10>
      2c:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <main>
      8a:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
#include "APP_Private.h"
#include "APP_Config.h"


void APP_init()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TEMP_init();
      9a:	0e 94 84 02 	call	0x508	; 0x508 <TEMP_init>
	GlobalInerruptEnable();
      9e:	0e 94 2f 08 	call	0x105e	; 0x105e <GlobalInerruptEnable>
	KPD_init();
      a2:	0e 94 91 05 	call	0xb22	; 0xb22 <KPD_init>
	LCD_vidInit();
      a6:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_vidInit>
	BTN_vidInit(BTN_1);
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	0e 94 58 06 	call	0xcb0	; 0xcb0 <BTN_vidInit>
	MOTOR_init(MOTOR_1);
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MOTOR_init>
	MOTOR_init(MOTOR_2);
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MOTOR_init>

}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <APP_Prog>:


void APP_Prog()
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2b 97       	sbiw	r28, 0x0b	; 11
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
	uint8_t state = Home;
      d6:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint16_t Actual_Temp = 0;
      d8:	1c 82       	std	Y+4, r1	; 0x04
      da:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8_t key =255;
      dc:	8f ef       	ldi	r24, 0xFF	; 255
      de:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t desired_temp=0;
      e0:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{

	switch (state)
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	28 2f       	mov	r18, r24
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	3b 87       	std	Y+11, r19	; 0x0b
      ea:	2a 87       	std	Y+10, r18	; 0x0a
      ec:	4a 85       	ldd	r20, Y+10	; 0x0a
      ee:	5b 85       	ldd	r21, Y+11	; 0x0b
      f0:	41 30       	cpi	r20, 0x01	; 1
      f2:	51 05       	cpc	r21, r1
      f4:	b1 f1       	breq	.+108    	; 0x162 <APP_Prog+0xa0>
      f6:	8a 85       	ldd	r24, Y+10	; 0x0a
      f8:	9b 85       	ldd	r25, Y+11	; 0x0b
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	91 05       	cpc	r25, r1
      fe:	09 f4       	brne	.+2      	; 0x102 <APP_Prog+0x40>
     100:	73 c0       	rjmp	.+230    	; 0x1e8 <APP_Prog+0x126>
     102:	2a 85       	ldd	r18, Y+10	; 0x0a
     104:	3b 85       	ldd	r19, Y+11	; 0x0b
     106:	21 15       	cp	r18, r1
     108:	31 05       	cpc	r19, r1
     10a:	59 f7       	brne	.-42     	; 0xe2 <APP_Prog+0x20>
		{
		case Home:
			LCD_vidClear();
     10c:	0e 94 5c 05 	call	0xab8	; 0xab8 <LCD_vidClear>
			LCD_vidSetPosition(0,0);
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteString("1-SET Temp");
     118:	80 e6       	ldi	r24, 0x60	; 96
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
			LCD_vidSetPosition(1,0);
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteString("2- RUN");
     128:	8b e6       	ldi	r24, 0x6B	; 107
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
			key =KPD_u8GetPressedKey();
     130:	0e 94 d4 05 	call	0xba8	; 0xba8 <KPD_u8GetPressedKey>
     134:	8d 83       	std	Y+5, r24	; 0x05
     136:	03 c0       	rjmp	.+6      	; 0x13e <APP_Prog+0x7c>
			while(key!=1 && key!=2)
			{
				key =KPD_u8GetPressedKey();
     138:	0e 94 d4 05 	call	0xba8	; 0xba8 <KPD_u8GetPressedKey>
     13c:	8d 83       	std	Y+5, r24	; 0x05
			LCD_vidSetPosition(0,0);
			LCD_vidWriteString("1-SET Temp");
			LCD_vidSetPosition(1,0);
			LCD_vidWriteString("2- RUN");
			key =KPD_u8GetPressedKey();
			while(key!=1 && key!=2)
     13e:	8d 81       	ldd	r24, Y+5	; 0x05
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	19 f0       	breq	.+6      	; 0x14a <APP_Prog+0x88>
     144:	8d 81       	ldd	r24, Y+5	; 0x05
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	b9 f7       	brne	.-18     	; 0x138 <APP_Prog+0x76>
			{
				key =KPD_u8GetPressedKey();
			}

			if(key ==1 )
     14a:	8d 81       	ldd	r24, Y+5	; 0x05
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	19 f4       	brne	.+6      	; 0x156 <APP_Prog+0x94>
			{
				state = SET;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	8a 83       	std	Y+2, r24	; 0x02
     154:	c6 cf       	rjmp	.-116    	; 0xe2 <APP_Prog+0x20>

			}
			else if (key ==2)
     156:	8d 81       	ldd	r24, Y+5	; 0x05
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	19 f6       	brne	.-122    	; 0xe2 <APP_Prog+0x20>
			{
				state = GET;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	8a 83       	std	Y+2, r24	; 0x02
     160:	c0 cf       	rjmp	.-128    	; 0xe2 <APP_Prog+0x20>
			}

			break;
		case SET:
			desired_temp=0;
     162:	19 82       	std	Y+1, r1	; 0x01
			key =255;
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	8d 83       	std	Y+5, r24	; 0x05
			LCD_vidClear();
     168:	0e 94 5c 05 	call	0xab8	; 0xab8 <LCD_vidClear>
			LCD_vidSetPosition(0,0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteString("Desired Temp:");
     174:	82 e7       	ldi	r24, 0x72	; 114
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
			key =KPD_u8GetPressedKey();
     17c:	0e 94 d4 05 	call	0xba8	; 0xba8 <KPD_u8GetPressedKey>
     180:	8d 83       	std	Y+5, r24	; 0x05
     182:	03 c0       	rjmp	.+6      	; 0x18a <APP_Prog+0xc8>
			while(key==255)
			{
				key =KPD_u8GetPressedKey();
     184:	0e 94 d4 05 	call	0xba8	; 0xba8 <KPD_u8GetPressedKey>
     188:	8d 83       	std	Y+5, r24	; 0x05
			key =255;
			LCD_vidClear();
			LCD_vidSetPosition(0,0);
			LCD_vidWriteString("Desired Temp:");
			key =KPD_u8GetPressedKey();
			while(key==255)
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	8f 3f       	cpi	r24, 0xFF	; 255
     18e:	d1 f3       	breq	.-12     	; 0x184 <APP_Prog+0xc2>
			{
				key =KPD_u8GetPressedKey();
			}
			LCD_vidSetPosition(1,5);
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	65 e0       	ldi	r22, 0x05	; 5
     194:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>

			while(1 )// Enter Button //////////////////////////// NOTED
		{

				if(BTN_u8IsPressed(BTN_1) ==1)
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <BTN_u8IsPressed>
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	09 f1       	breq	.+66     	; 0x1e4 <APP_Prog+0x122>
				{
					break;
				}
			key =KPD_u8GetPressedKey();
     1a2:	0e 94 d4 05 	call	0xba8	; 0xba8 <KPD_u8GetPressedKey>
     1a6:	8d 83       	std	Y+5, r24	; 0x05
			if(key != 255)
     1a8:	8d 81       	ldd	r24, Y+5	; 0x05
     1aa:	8f 3f       	cpi	r24, 0xFF	; 255
     1ac:	a9 f3       	breq	.-22     	; 0x198 <APP_Prog+0xd6>
			{

				desired_temp = desired_temp *10+key;
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9c 01       	movw	r18, r24
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	c9 01       	movw	r24, r18
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	82 0f       	add	r24, r18
     1c6:	93 1f       	adc	r25, r19
     1c8:	98 2f       	mov	r25, r24
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	89 0f       	add	r24, r25
     1ce:	89 83       	std	Y+1, r24	; 0x01
				LCD_vidWriteNumber(key);
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	88 2f       	mov	r24, r24
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	bc 01       	movw	r22, r24
     1dc:	cd 01       	movw	r24, r26
     1de:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>
     1e2:	da cf       	rjmp	.-76     	; 0x198 <APP_Prog+0xd6>
			}


		}
			state = Home;
     1e4:	1a 82       	std	Y+2, r1	; 0x02
     1e6:	7d cf       	rjmp	.-262    	; 0xe2 <APP_Prog+0x20>
			}
*/
			break;
		case GET:
		//	LCD_vidClear();
			LCD_vidSetPosition(0,0);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteString("Act. Temp:");
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
			LCD_vidSetPosition(0,11);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	6b e0       	ldi	r22, 0x0B	; 11
     1fc:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteString("  ");
     200:	8b e8       	ldi	r24, 0x8B	; 139
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>

			LCD_vidSetPosition(0,11);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	6b e0       	ldi	r22, 0x0B	; 11
     20c:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteNumber(Actual_Temp);
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	cc 01       	movw	r24, r24
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	bc 01       	movw	r22, r24
     21c:	cd 01       	movw	r24, r26
     21e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>
			LCD_vidSetPosition(1,0);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteString("Des. Temp:");
     22a:	8e e8       	ldi	r24, 0x8E	; 142
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
			LCD_vidSetPosition(1,11);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	6b e0       	ldi	r22, 0x0B	; 11
     236:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
			LCD_vidWriteNumber(desired_temp);
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	bc 01       	movw	r22, r24
     246:	cd 01       	movw	r24, r26
     248:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>


			Actual_Temp = TEMP_u8GetReading();// 0 = ADC channel   ** NEEDED
     24c:	0e 94 95 02 	call	0x52a	; 0x52a <TEMP_u8GetReading>
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
     258:	0b c0       	rjmp	.+22     	; 0x270 <APP_Prog+0x1ae>
			//LCD_vidWriteNumber(Actual_Temp);
			for(volatile uint32_t delay; delay<20000000;delay++);
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	9f 81       	ldd	r25, Y+7	; 0x07
     25e:	a8 85       	ldd	r26, Y+8	; 0x08
     260:	b9 85       	ldd	r27, Y+9	; 0x09
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	a1 1d       	adc	r26, r1
     266:	b1 1d       	adc	r27, r1
     268:	8e 83       	std	Y+6, r24	; 0x06
     26a:	9f 83       	std	Y+7, r25	; 0x07
     26c:	a8 87       	std	Y+8, r26	; 0x08
     26e:	b9 87       	std	Y+9, r27	; 0x09
     270:	8e 81       	ldd	r24, Y+6	; 0x06
     272:	9f 81       	ldd	r25, Y+7	; 0x07
     274:	a8 85       	ldd	r26, Y+8	; 0x08
     276:	b9 85       	ldd	r27, Y+9	; 0x09
     278:	80 30       	cpi	r24, 0x00	; 0
     27a:	3d e2       	ldi	r19, 0x2D	; 45
     27c:	93 07       	cpc	r25, r19
     27e:	31 e3       	ldi	r19, 0x31	; 49
     280:	a3 07       	cpc	r26, r19
     282:	31 e0       	ldi	r19, 0x01	; 1
     284:	b3 07       	cpc	r27, r19
     286:	48 f3       	brcs	.-46     	; 0x25a <APP_Prog+0x198>
			key =KPD_u8GetPressedKey();
     288:	0e 94 d4 05 	call	0xba8	; 0xba8 <KPD_u8GetPressedKey>
     28c:	8d 83       	std	Y+5, r24	; 0x05

			if(desired_temp>Actual_Temp)
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	28 2f       	mov	r18, r24
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	8b 81       	ldd	r24, Y+3	; 0x03
     296:	9c 81       	ldd	r25, Y+4	; 0x04
     298:	82 17       	cp	r24, r18
     29a:	93 07       	cpc	r25, r19
     29c:	90 f4       	brcc	.+36     	; 0x2c2 <APP_Prog+0x200>
					{
						MOTOR_off(MOTOR_1);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 5f 02 	call	0x4be	; 0x4be <MOTOR_off>
						LCD_vidSetPosition(0,14);
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	6e e0       	ldi	r22, 0x0E	; 14
     2a8:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
						LCD_vidWriteString("M");
     2ac:	89 e9       	ldi	r24, 0x99	; 153
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
						LCD_vidWriteNumber(0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>
     2c0:	79 c0       	rjmp	.+242    	; 0x3b4 <APP_Prog+0x2f2>
					}
					else if ((Actual_Temp -desired_temp)<4 &&(Actual_Temp -desired_temp)>0)
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	3c 81       	ldd	r19, Y+4	; 0x04
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	88 2f       	mov	r24, r24
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	a9 01       	movw	r20, r18
     2ce:	48 1b       	sub	r20, r24
     2d0:	59 0b       	sbc	r21, r25
     2d2:	ca 01       	movw	r24, r20
     2d4:	84 30       	cpi	r24, 0x04	; 4
     2d6:	91 05       	cpc	r25, r1
     2d8:	f0 f4       	brcc	.+60     	; 0x316 <APP_Prog+0x254>
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	28 2f       	mov	r18, r24
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	9c 81       	ldd	r25, Y+4	; 0x04
     2e4:	28 17       	cp	r18, r24
     2e6:	39 07       	cpc	r19, r25
     2e8:	b1 f0       	breq	.+44     	; 0x316 <APP_Prog+0x254>

					{
						MOTOR_speed(20);
     2ea:	84 e1       	ldi	r24, 0x14	; 20
     2ec:	0e 94 09 02 	call	0x412	; 0x412 <MOTOR_speed>
						MOTOR_direction(MOTOR_1,FWD);
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	0e 94 16 02 	call	0x42c	; 0x42c <MOTOR_direction>
						LCD_vidSetPosition(0,14);
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	6e e0       	ldi	r22, 0x0E	; 14
     2fc:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
						LCD_vidWriteString("M");
     300:	89 e9       	ldi	r24, 0x99	; 153
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
						LCD_vidWriteNumber(1);
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>
     314:	4f c0       	rjmp	.+158    	; 0x3b4 <APP_Prog+0x2f2>

					}
					else if ( ((Actual_Temp -desired_temp)<8 ) && ((Actual_Temp -desired_temp)>4))
     316:	2b 81       	ldd	r18, Y+3	; 0x03
     318:	3c 81       	ldd	r19, Y+4	; 0x04
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	88 2f       	mov	r24, r24
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	a9 01       	movw	r20, r18
     322:	48 1b       	sub	r20, r24
     324:	59 0b       	sbc	r21, r25
     326:	ca 01       	movw	r24, r20
     328:	88 30       	cpi	r24, 0x08	; 8
     32a:	91 05       	cpc	r25, r1
     32c:	10 f5       	brcc	.+68     	; 0x372 <APP_Prog+0x2b0>
     32e:	2b 81       	ldd	r18, Y+3	; 0x03
     330:	3c 81       	ldd	r19, Y+4	; 0x04
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	a9 01       	movw	r20, r18
     33a:	48 1b       	sub	r20, r24
     33c:	59 0b       	sbc	r21, r25
     33e:	ca 01       	movw	r24, r20
     340:	85 30       	cpi	r24, 0x05	; 5
     342:	91 05       	cpc	r25, r1
     344:	b0 f0       	brcs	.+44     	; 0x372 <APP_Prog+0x2b0>

					{
						MOTOR_direction(MOTOR_1,FWD);
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	0e 94 16 02 	call	0x42c	; 0x42c <MOTOR_direction>
						MOTOR_speed(60);
     34e:	8c e3       	ldi	r24, 0x3C	; 60
     350:	0e 94 09 02 	call	0x412	; 0x412 <MOTOR_speed>

						LCD_vidSetPosition(0,14);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	6e e0       	ldi	r22, 0x0E	; 14
     358:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
						LCD_vidWriteString("M");
     35c:	89 e9       	ldi	r24, 0x99	; 153
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
						LCD_vidWriteNumber(2);
     364:	62 e0       	ldi	r22, 0x02	; 2
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>
     370:	21 c0       	rjmp	.+66     	; 0x3b4 <APP_Prog+0x2f2>
					}
					else if ( (Actual_Temp -desired_temp) >8 )
     372:	2b 81       	ldd	r18, Y+3	; 0x03
     374:	3c 81       	ldd	r19, Y+4	; 0x04
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	a9 01       	movw	r20, r18
     37e:	48 1b       	sub	r20, r24
     380:	59 0b       	sbc	r21, r25
     382:	ca 01       	movw	r24, r20
     384:	89 30       	cpi	r24, 0x09	; 9
     386:	91 05       	cpc	r25, r1
     388:	a8 f0       	brcs	.+42     	; 0x3b4 <APP_Prog+0x2f2>

					{
						MOTOR_speed(90);
     38a:	8a e5       	ldi	r24, 0x5A	; 90
     38c:	0e 94 09 02 	call	0x412	; 0x412 <MOTOR_speed>
						MOTOR_direction(MOTOR_1,FWD);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	0e 94 16 02 	call	0x42c	; 0x42c <MOTOR_direction>
						LCD_vidSetPosition(0,14);
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	6e e0       	ldi	r22, 0x0E	; 14
     39c:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_vidSetPosition>
						LCD_vidWriteString("M");
     3a0:	89 e9       	ldi	r24, 0x99	; 153
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vidWriteString>
						LCD_vidWriteNumber(3);
     3a8:	63 e0       	ldi	r22, 0x03	; 3
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vidWriteNumber>

					}
			if(BTN_u8IsPressed(BTN_1))	// NEED MODIFICATION TO HOME
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <BTN_u8IsPressed>
     3ba:	88 23       	and	r24, r24
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <APP_Prog+0x2fe>
     3be:	91 ce       	rjmp	.-734    	; 0xe2 <APP_Prog+0x20>
			{
				state = Home;
     3c0:	1a 82       	std	Y+2, r1	; 0x02
     3c2:	8f ce       	rjmp	.-738    	; 0xe2 <APP_Prog+0x20>

000003c4 <MOTOR_init>:
#include "Motor.h"



void MOTOR_init(uint8_t numMotor)// numMotor (initialize Direction pins only (PWM initializes enable pins inside them))
{
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	0f 92       	push	r0
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	89 83       	std	Y+1, r24	; 0x01
	PWM_vidInit();
     3d0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <PWM_vidInit>
	if(MOTOR_1==numMotor)
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	88 23       	and	r24, r24
     3d8:	59 f4       	brne	.+22     	; 0x3f0 <MOTOR_init+0x2c>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1A,DIO_OUTPUT);
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1B,DIO_OUTPUT);
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	63 e0       	ldi	r22, 0x03	; 3
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
     3ee:	0d c0       	rjmp	.+26     	; 0x40a <MOTOR_init+0x46>
	}
	else if(MOTOR_2==numMotor)
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	51 f4       	brne	.+20     	; 0x40a <MOTOR_init+0x46>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2A,DIO_OUTPUT);
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	66 e0       	ldi	r22, 0x06	; 6
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2B,DIO_OUTPUT);
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	67 e0       	ldi	r22, 0x07	; 7
     404:	41 e0       	ldi	r20, 0x01	; 1
     406:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	}
}
     40a:	0f 90       	pop	r0
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	08 95       	ret

00000412 <MOTOR_speed>:

void MOTOR_speed(uint8_t dutyCycle)//  30/60/90 (Start PWM and initialize duty cycle)
{
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	89 83       	std	Y+1, r24	; 0x01
	PWM_SetDutyCycle(dutyCycle);
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	0e 94 22 08 	call	0x1044	; 0x1044 <PWM_SetDutyCycle>
}
     424:	0f 90       	pop	r0
     426:	cf 91       	pop	r28
     428:	df 91       	pop	r29
     42a:	08 95       	ret

0000042c <MOTOR_direction>:
void MOTOR_direction(uint8_t numMotor, uint8_t DIR)//  numMotor/(FWD,REV) (Set direction of specified motor) i.e (MOTOR_1, FWD) meaning motor 1, move forward
{
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	00 d0       	rcall	.+0      	; 0x432 <MOTOR_direction+0x6>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	6a 83       	std	Y+2, r22	; 0x02
	if(MOTOR_1==numMotor)
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	88 23       	and	r24, r24
     43e:	e1 f4       	brne	.+56     	; 0x478 <MOTOR_direction+0x4c>
	{
		if(FWD==DIR)
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	59 f4       	brne	.+22     	; 0x45c <MOTOR_direction+0x30>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_HIGH);
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	62 e0       	ldi	r22, 0x02	; 2
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	63 e0       	ldi	r22, 0x03	; 3
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
     45a:	2c c0       	rjmp	.+88     	; 0x4b4 <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	88 23       	and	r24, r24
     460:	49 f5       	brne	.+82     	; 0x4b4 <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	62 e0       	ldi	r22, 0x02	; 2
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_HIGH);
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	63 e0       	ldi	r22, 0x03	; 3
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
     476:	1e c0       	rjmp	.+60     	; 0x4b4 <MOTOR_direction+0x88>
		}
	}
	else if(MOTOR_2==numMotor)
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	d9 f4       	brne	.+54     	; 0x4b4 <MOTOR_direction+0x88>
	{
		if(FWD==DIR)
     47e:	8a 81       	ldd	r24, Y+2	; 0x02
     480:	81 30       	cpi	r24, 0x01	; 1
     482:	59 f4       	brne	.+22     	; 0x49a <MOTOR_direction+0x6e>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_HIGH);
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	66 e0       	ldi	r22, 0x06	; 6
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	67 e0       	ldi	r22, 0x07	; 7
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
     498:	0d c0       	rjmp	.+26     	; 0x4b4 <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	88 23       	and	r24, r24
     49e:	51 f4       	brne	.+20     	; 0x4b4 <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	66 e0       	ldi	r22, 0x06	; 6
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_HIGH);
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	67 e0       	ldi	r22, 0x07	; 7
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		}
	}
	
	
}
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	cf 91       	pop	r28
     4ba:	df 91       	pop	r29
     4bc:	08 95       	ret

000004be <MOTOR_off>:
void MOTOR_off(uint8_t numMotor)// stop specified motor (writes LOW on DIR data pins)
{
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	89 83       	std	Y+1, r24	; 0x01
	if(MOTOR_1==numMotor)
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	88 23       	and	r24, r24
     4ce:	59 f4       	brne	.+22     	; 0x4e6 <MOTOR_off+0x28>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	62 e0       	ldi	r22, 0x02	; 2
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	63 e0       	ldi	r22, 0x03	; 3
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
     4e4:	0d c0       	rjmp	.+26     	; 0x500 <MOTOR_off+0x42>
	}
	else if(MOTOR_2==numMotor)
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	51 f4       	brne	.+20     	; 0x500 <MOTOR_off+0x42>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	66 e0       	ldi	r22, 0x06	; 6
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	67 e0       	ldi	r22, 0x07	; 7
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	}
     500:	0f 90       	pop	r0
     502:	cf 91       	pop	r28
     504:	df 91       	pop	r29
     506:	08 95       	ret

00000508 <TEMP_init>:
#include "TEMP_private.h"
#include "TEMP_config.h"
#include "TEMP_interface.h"

void TEMP_init(void)
{
     508:	df 93       	push	r29
     50a:	cf 93       	push	r28
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	DIO_SETpinDir(DIO_PORTA,ADC_Channel,DIO_INPUT);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	ADC_init();
     520:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <ADC_init>
}
     524:	cf 91       	pop	r28
     526:	df 91       	pop	r29
     528:	08 95       	ret

0000052a <TEMP_u8GetReading>:

uint8_t TEMP_u8GetReading(void)
{
     52a:	df 93       	push	r29
     52c:	cf 93       	push	r28
     52e:	00 d0       	rcall	.+0      	; 0x530 <TEMP_u8GetReading+0x6>
     530:	00 d0       	rcall	.+0      	; 0x532 <TEMP_u8GetReading+0x8>
     532:	0f 92       	push	r0
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8TEMP;
	uint16_t local_u16MiliVolt;
	uint16_t local_u8ADC_Read;
	ADC_u8StartConversionSynch(ADC_Channel,&local_u8ADC_Read);
     538:	9e 01       	movw	r18, r28
     53a:	2c 5f       	subi	r18, 0xFC	; 252
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	b9 01       	movw	r22, r18
     542:	0e 94 b5 0b 	call	0x176a	; 0x176a <ADC_u8StartConversionSynch>
	local_u16MiliVolt=(uint16_t)(((uint32_t)local_u8ADC_Read*Vref)/TWO_P_RESOLUTION);
     546:	8c 81       	ldd	r24, Y+4	; 0x04
     548:	9d 81       	ldd	r25, Y+5	; 0x05
     54a:	cc 01       	movw	r24, r24
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	28 e8       	ldi	r18, 0x88	; 136
     552:	33 e1       	ldi	r19, 0x13	; 19
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsi3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	07 2e       	mov	r0, r23
     566:	7a e0       	ldi	r23, 0x0A	; 10
     568:	b6 95       	lsr	r27
     56a:	a7 95       	ror	r26
     56c:	97 95       	ror	r25
     56e:	87 95       	ror	r24
     570:	7a 95       	dec	r23
     572:	d1 f7       	brne	.-12     	; 0x568 <TEMP_u8GetReading+0x3e>
     574:	70 2d       	mov	r23, r0
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	89 83       	std	Y+1, r24	; 0x01
	local_u8TEMP=local_u16MiliVolt/10;
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	2a e0       	ldi	r18, 0x0A	; 10
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	b9 01       	movw	r22, r18
     584:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__udivmodhi4>
     588:	cb 01       	movw	r24, r22
     58a:	8b 83       	std	Y+3, r24	; 0x03
	return local_u8TEMP;
     58c:	8b 81       	ldd	r24, Y+3	; 0x03

}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <LCD_vidInit>:

// ********* FUNCTIONS IMPLMENTATION **********

// function to intialize the LCD with the configured pins
void LCD_vidInit(void)
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	if (LCD_Status == LCD_NOT_INITIALIZED)
     5a6:	80 91 ac 00 	lds	r24, 0x00AC
     5aa:	88 23       	and	r24, r24
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <LCD_vidInit+0x12>
     5ae:	3f c0       	rjmp	.+126    	; 0x62e <LCD_vidInit+0x90>
	{
		// setting the pins direction
		DIO_SETpinDir(LCD_Port, LCD_RS, DIO_OUTPUT);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_RW, DIO_OUTPUT);
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_E, DIO_OUTPUT);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	63 e0       	ldi	r22, 0x03	; 3
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D4, DIO_OUTPUT);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	64 e0       	ldi	r22, 0x04	; 4
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D5, DIO_OUTPUT);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	65 e0       	ldi	r22, 0x05	; 5
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D6, DIO_OUTPUT);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	66 e0       	ldi	r22, 0x06	; 6
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D7, DIO_OUTPUT);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	67 e0       	ldi	r22, 0x07	; 7
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
		delay(65000);
     5f6:	88 ee       	ldi	r24, 0xE8	; 232
     5f8:	9d ef       	ldi	r25, 0xFD	; 253
     5fa:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		LCD_Status = LCD_INITIALIZED;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 ac 00 	sts	0x00AC, r24

		LCD_vidWriteCommand(0b00101000);
     604:	88 e2       	ldi	r24, 0x28	; 40
     606:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_vidWriteCommand>
		delay(5000);
     60a:	88 e8       	ldi	r24, 0x88	; 136
     60c:	93 e1       	ldi	r25, 0x13	; 19
     60e:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		LCD_vidWriteCommand(0b00001100);
     612:	8c e0       	ldi	r24, 0x0C	; 12
     614:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_vidWriteCommand>
		delay(5000);
     618:	88 e8       	ldi	r24, 0x88	; 136
     61a:	93 e1       	ldi	r25, 0x13	; 19
     61c:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		LCD_vidWriteCommand(0b00000001);
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_vidWriteCommand>
		delay(5000);
     626:	88 e8       	ldi	r24, 0x88	; 136
     628:	93 e1       	ldi	r25, 0x13	; 19
     62a:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
	}
	else
	{
		// do nothing
	}
}
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <LCD_vidWriteCommand>:

// function to send a command to LCD
void LCD_vidWriteCommand(uint8_t command)
{
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	0f 92       	push	r0
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     640:	80 91 ac 00 	lds	r24, 0x00AC
     644:	88 23       	and	r24, r24
     646:	29 f4       	brne	.+10     	; 0x652 <LCD_vidWriteCommand+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_COMMAND_SID);
     648:	88 e7       	ldi	r24, 0x78	; 120
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     650:	81 c0       	rjmp	.+258    	; 0x754 <LCD_vidWriteCommand+0x120>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	62 e0       	ldi	r22, 0x02	; 2
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 4));
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	82 95       	swap	r24
     66a:	8f 70       	andi	r24, 0x0F	; 15
     66c:	98 2f       	mov	r25, r24
     66e:	91 70       	andi	r25, 0x01	; 1
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	64 e0       	ldi	r22, 0x04	; 4
     674:	49 2f       	mov	r20, r25
     676:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 5));
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	82 95       	swap	r24
     67e:	86 95       	lsr	r24
     680:	87 70       	andi	r24, 0x07	; 7
     682:	98 2f       	mov	r25, r24
     684:	91 70       	andi	r25, 0x01	; 1
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	65 e0       	ldi	r22, 0x05	; 5
     68a:	49 2f       	mov	r20, r25
     68c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 6));
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	82 95       	swap	r24
     694:	86 95       	lsr	r24
     696:	86 95       	lsr	r24
     698:	83 70       	andi	r24, 0x03	; 3
     69a:	98 2f       	mov	r25, r24
     69c:	91 70       	andi	r25, 0x01	; 1
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	66 e0       	ldi	r22, 0x06	; 6
     6a2:	49 2f       	mov	r20, r25
     6a4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 7));
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	98 2f       	mov	r25, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	99 27       	eor	r25, r25
     6b0:	99 1f       	adc	r25, r25
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	67 e0       	ldi	r22, 0x07	; 7
     6b6:	49 2f       	mov	r20, r25
     6b8:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		delay(5000);
     6c6:	88 e8       	ldi	r24, 0x88	; 136
     6c8:	93 e1       	ldi	r25, 0x13	; 19
     6ca:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 0));
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	98 2f       	mov	r25, r24
     6f0:	91 70       	andi	r25, 0x01	; 1
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	64 e0       	ldi	r22, 0x04	; 4
     6f6:	49 2f       	mov	r20, r25
     6f8:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 1));
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	86 95       	lsr	r24
     700:	98 2f       	mov	r25, r24
     702:	91 70       	andi	r25, 0x01	; 1
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	65 e0       	ldi	r22, 0x05	; 5
     708:	49 2f       	mov	r20, r25
     70a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 2));
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	86 95       	lsr	r24
     712:	86 95       	lsr	r24
     714:	98 2f       	mov	r25, r24
     716:	91 70       	andi	r25, 0x01	; 1
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	66 e0       	ldi	r22, 0x06	; 6
     71c:	49 2f       	mov	r20, r25
     71e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 3));
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	86 95       	lsr	r24
     726:	86 95       	lsr	r24
     728:	86 95       	lsr	r24
     72a:	98 2f       	mov	r25, r24
     72c:	91 70       	andi	r25, 0x01	; 1
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	67 e0       	ldi	r22, 0x07	; 7
     732:	49 2f       	mov	r20, r25
     734:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	63 e0       	ldi	r22, 0x03	; 3
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		delay(5000);
     742:	88 e8       	ldi	r24, 0x88	; 136
     744:	93 e1       	ldi	r25, 0x13	; 19
     746:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	63 e0       	ldi	r22, 0x03	; 3
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	}
}
     754:	0f 90       	pop	r0
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <LCD_vidWriteData>:

// function that writes  one element on the LCD
void LCD_vidWriteData(uint8_t data)
{
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	0f 92       	push	r0
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     768:	80 91 ac 00 	lds	r24, 0x00AC
     76c:	88 23       	and	r24, r24
     76e:	29 f4       	brne	.+10     	; 0x77a <LCD_vidWriteData+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_DATA_SID);
     770:	88 e7       	ldi	r24, 0x78	; 120
     772:	62 e0       	ldi	r22, 0x02	; 2
     774:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     778:	81 c0       	rjmp	.+258    	; 0x87c <__stack+0x1d>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 4));
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	82 95       	swap	r24
     792:	8f 70       	andi	r24, 0x0F	; 15
     794:	98 2f       	mov	r25, r24
     796:	91 70       	andi	r25, 0x01	; 1
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	64 e0       	ldi	r22, 0x04	; 4
     79c:	49 2f       	mov	r20, r25
     79e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 5));
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	82 95       	swap	r24
     7a6:	86 95       	lsr	r24
     7a8:	87 70       	andi	r24, 0x07	; 7
     7aa:	98 2f       	mov	r25, r24
     7ac:	91 70       	andi	r25, 0x01	; 1
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	65 e0       	ldi	r22, 0x05	; 5
     7b2:	49 2f       	mov	r20, r25
     7b4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 6));
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	82 95       	swap	r24
     7bc:	86 95       	lsr	r24
     7be:	86 95       	lsr	r24
     7c0:	83 70       	andi	r24, 0x03	; 3
     7c2:	98 2f       	mov	r25, r24
     7c4:	91 70       	andi	r25, 0x01	; 1
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	66 e0       	ldi	r22, 0x06	; 6
     7ca:	49 2f       	mov	r20, r25
     7cc:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 7));
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	98 2f       	mov	r25, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	67 e0       	ldi	r22, 0x07	; 7
     7de:	49 2f       	mov	r20, r25
     7e0:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	63 e0       	ldi	r22, 0x03	; 3
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		delay(5000);
     7ee:	88 e8       	ldi	r24, 0x88	; 136
     7f0:	93 e1       	ldi	r25, 0x13	; 19
     7f2:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	63 e0       	ldi	r22, 0x03	; 3
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	62 e0       	ldi	r22, 0x02	; 2
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 0));
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	98 2f       	mov	r25, r24
     818:	91 70       	andi	r25, 0x01	; 1
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	64 e0       	ldi	r22, 0x04	; 4
     81e:	49 2f       	mov	r20, r25
     820:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 1));
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	86 95       	lsr	r24
     828:	98 2f       	mov	r25, r24
     82a:	91 70       	andi	r25, 0x01	; 1
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	49 2f       	mov	r20, r25
     832:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 2));
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	86 95       	lsr	r24
     83a:	86 95       	lsr	r24
     83c:	98 2f       	mov	r25, r24
     83e:	91 70       	andi	r25, 0x01	; 1
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	66 e0       	ldi	r22, 0x06	; 6
     844:	49 2f       	mov	r20, r25
     846:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 3));
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	86 95       	lsr	r24
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	98 2f       	mov	r25, r24
     854:	91 70       	andi	r25, 0x01	; 1
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	67 e0       	ldi	r22, 0x07	; 7
     85a:	49 2f       	mov	r20, r25
     85c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	63 e0       	ldi	r22, 0x03	; 3
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		delay(5000);
     86a:	88 e8       	ldi	r24, 0x88	; 136
     86c:	93 e1       	ldi	r25, 0x13	; 19
     86e:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	63 e0       	ldi	r22, 0x03	; 3
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	}
}
     87c:	0f 90       	pop	r0
     87e:	cf 91       	pop	r28
     880:	df 91       	pop	r29
     882:	08 95       	ret

00000884 <LCD_vidWriteString>:
// function to write string on the LCD
void LCD_vidWriteString(uint8_t *string)
{
     884:	df 93       	push	r29
     886:	cf 93       	push	r28
     888:	00 d0       	rcall	.+0      	; 0x88a <LCD_vidWriteString+0x6>
     88a:	0f 92       	push	r0
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	8a 83       	std	Y+2, r24	; 0x02
	if (string == NULL_PTR)
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	9b 81       	ldd	r25, Y+3	; 0x03
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	29 f4       	brne	.+10     	; 0x8a6 <LCD_vidWriteString+0x22>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     89c:	88 e7       	ldi	r24, 0x78	; 120
     89e:	63 e0       	ldi	r22, 0x03	; 3
     8a0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     8a4:	24 c0       	rjmp	.+72     	; 0x8ee <LCD_vidWriteString+0x6a>
	}
	else if (LCD_Status == LCD_NOT_INITIALIZED)
     8a6:	80 91 ac 00 	lds	r24, 0x00AC
     8aa:	88 23       	and	r24, r24
     8ac:	29 f4       	brne	.+10     	; 0x8b8 <LCD_vidWriteString+0x34>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     8ae:	88 e7       	ldi	r24, 0x78	; 120
     8b0:	63 e0       	ldi	r22, 0x03	; 3
     8b2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     8b6:	1b c0       	rjmp	.+54     	; 0x8ee <LCD_vidWriteString+0x6a>
	}
	else
	{
		uint8_t index = 0;
     8b8:	19 82       	std	Y+1, r1	; 0x01
     8ba:	0e c0       	rjmp	.+28     	; 0x8d8 <LCD_vidWriteString+0x54>
		while (string[index] != 0)
		{
			LCD_vidWriteData(string[index]);
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	28 2f       	mov	r18, r24
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	9b 81       	ldd	r25, Y+3	; 0x03
     8c6:	fc 01       	movw	r30, r24
     8c8:	e2 0f       	add	r30, r18
     8ca:	f3 1f       	adc	r31, r19
     8cc:	80 81       	ld	r24, Z
     8ce:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vidWriteData>
			index++;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	89 83       	std	Y+1, r24	; 0x01
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
	}
	else
	{
		uint8_t index = 0;
		while (string[index] != 0)
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	28 2f       	mov	r18, r24
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	9b 81       	ldd	r25, Y+3	; 0x03
     8e2:	fc 01       	movw	r30, r24
     8e4:	e2 0f       	add	r30, r18
     8e6:	f3 1f       	adc	r31, r19
     8e8:	80 81       	ld	r24, Z
     8ea:	88 23       	and	r24, r24
     8ec:	39 f7       	brne	.-50     	; 0x8bc <LCD_vidWriteString+0x38>
		{
			LCD_vidWriteData(string[index]);
			index++;
		}
	}
}
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <LCD_vidWriteNumber>:

// function to write a number on the LCD
void LCD_vidWriteNumber(uint32_t num)
{
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	28 97       	sbiw	r28, 0x08	; 8
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	6d 83       	std	Y+5, r22	; 0x05
     918:	7e 83       	std	Y+6, r23	; 0x06
     91a:	8f 83       	std	Y+7, r24	; 0x07
     91c:	98 87       	std	Y+8, r25	; 0x08
	if (LCD_Status == LCD_NOT_INITIALIZED)
     91e:	80 91 ac 00 	lds	r24, 0x00AC
     922:	88 23       	and	r24, r24
     924:	29 f4       	brne	.+10     	; 0x930 <LCD_vidWriteNumber+0x36>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_NUMBER_SID);
     926:	88 e7       	ldi	r24, 0x78	; 120
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     92e:	7f c0       	rjmp	.+254    	; 0xa2e <LCD_vidWriteNumber+0x134>
	}
	else
	{
	uint32_t reversed = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a0 e0       	ldi	r26, 0x00	; 0
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	9a 83       	std	Y+2, r25	; 0x02
     93c:	ab 83       	std	Y+3, r26	; 0x03
     93e:	bc 83       	std	Y+4, r27	; 0x04
	if (num == 0)
     940:	8d 81       	ldd	r24, Y+5	; 0x05
     942:	9e 81       	ldd	r25, Y+6	; 0x06
     944:	af 81       	ldd	r26, Y+7	; 0x07
     946:	b8 85       	ldd	r27, Y+8	; 0x08
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	a1 05       	cpc	r26, r1
     94c:	b1 05       	cpc	r27, r1
     94e:	d1 f5       	brne	.+116    	; 0x9c4 <LCD_vidWriteNumber+0xca>
	{
		LCD_vidWriteData('0');
     950:	80 e3       	ldi	r24, 0x30	; 48
     952:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vidWriteData>
     956:	6b c0       	rjmp	.+214    	; 0xa2e <LCD_vidWriteNumber+0x134>
	}
	else
	{
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	ab 81       	ldd	r26, Y+3	; 0x03
     95e:	bc 81       	ldd	r27, Y+4	; 0x04
     960:	2a e0       	ldi	r18, 0x0A	; 10
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsi3>
     970:	7b 01       	movw	r14, r22
     972:	8c 01       	movw	r16, r24
     974:	8d 81       	ldd	r24, Y+5	; 0x05
     976:	9e 81       	ldd	r25, Y+6	; 0x06
     978:	af 81       	ldd	r26, Y+7	; 0x07
     97a:	b8 85       	ldd	r27, Y+8	; 0x08
     97c:	2a e0       	ldi	r18, 0x0A	; 10
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	8e 0d       	add	r24, r14
     992:	9f 1d       	adc	r25, r15
     994:	a0 1f       	adc	r26, r16
     996:	b1 1f       	adc	r27, r17
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	ab 83       	std	Y+3, r26	; 0x03
     99e:	bc 83       	std	Y+4, r27	; 0x04
			num /= 10;
     9a0:	8d 81       	ldd	r24, Y+5	; 0x05
     9a2:	9e 81       	ldd	r25, Y+6	; 0x06
     9a4:	af 81       	ldd	r26, Y+7	; 0x07
     9a6:	b8 85       	ldd	r27, Y+8	; 0x08
     9a8:	2a e0       	ldi	r18, 0x0A	; 10
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	bc 01       	movw	r22, r24
     9b2:	cd 01       	movw	r24, r26
     9b4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	8d 83       	std	Y+5, r24	; 0x05
     9be:	9e 83       	std	Y+6, r25	; 0x06
     9c0:	af 83       	std	Y+7, r26	; 0x07
     9c2:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_vidWriteData('0');
	}
	else
	{
		while (num != 0)
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	9e 81       	ldd	r25, Y+6	; 0x06
     9c8:	af 81       	ldd	r26, Y+7	; 0x07
     9ca:	b8 85       	ldd	r27, Y+8	; 0x08
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	11 f6       	brne	.-124    	; 0x958 <LCD_vidWriteNumber+0x5e>
     9d4:	23 c0       	rjmp	.+70     	; 0xa1c <LCD_vidWriteNumber+0x122>
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
		{
			LCD_vidWriteData(((reversed % 10) + '0'));
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	ab 81       	ldd	r26, Y+3	; 0x03
     9dc:	bc 81       	ldd	r27, Y+4	; 0x04
     9de:	2a e0       	ldi	r18, 0x0A	; 10
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	80 5d       	subi	r24, 0xD0	; 208
     9f4:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vidWriteData>
			reversed /= 10;
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	ab 81       	ldd	r26, Y+3	; 0x03
     9fe:	bc 81       	ldd	r27, Y+4	; 0x04
     a00:	2a e0       	ldi	r18, 0x0A	; 10
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
     a10:	da 01       	movw	r26, r20
     a12:	c9 01       	movw	r24, r18
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	9a 83       	std	Y+2, r25	; 0x02
     a18:	ab 83       	std	Y+3, r26	; 0x03
     a1a:	bc 83       	std	Y+4, r27	; 0x04
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	ab 81       	ldd	r26, Y+3	; 0x03
     a22:	bc 81       	ldd	r27, Y+4	; 0x04
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	91 05       	cpc	r25, r1
     a28:	a1 05       	cpc	r26, r1
     a2a:	b1 05       	cpc	r27, r1
     a2c:	a1 f6       	brne	.-88     	; 0x9d6 <LCD_vidWriteNumber+0xdc>
			LCD_vidWriteData(((reversed % 10) + '0'));
			reversed /= 10;
		}
	}
	}
}
     a2e:	28 96       	adiw	r28, 0x08	; 8
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	08 95       	ret

00000a48 <LCD_vidSetPosition>:

// function that sets the postion that u want to write in
void LCD_vidSetPosition(uint8_t row, uint8_t col)
{
     a48:	df 93       	push	r29
     a4a:	cf 93       	push	r28
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <LCD_vidSetPosition+0x6>
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <LCD_vidSetPosition+0x8>
     a50:	0f 92       	push	r0
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	8a 83       	std	Y+2, r24	; 0x02
     a58:	6b 83       	std	Y+3, r22	; 0x03
	if (LCD_Status == LCD_NOT_INITIALIZED)
     a5a:	80 91 ac 00 	lds	r24, 0x00AC
     a5e:	88 23       	and	r24, r24
     a60:	29 f4       	brne	.+10     	; 0xa6c <LCD_vidSetPosition+0x24>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_SET_POSTION_SID);
     a62:	88 e7       	ldi	r24, 0x78	; 120
     a64:	65 e0       	ldi	r22, 0x05	; 5
     a66:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     a6a:	1e c0       	rjmp	.+60     	; 0xaa8 <LCD_vidSetPosition+0x60>
	}
	else
	{
	uint8_t adrs = 128;
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	89 83       	std	Y+1, r24	; 0x01
	switch (row)
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	3d 83       	std	Y+5, r19	; 0x05
     a78:	2c 83       	std	Y+4, r18	; 0x04
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	9d 81       	ldd	r25, Y+5	; 0x05
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	31 f0       	breq	.+12     	; 0xa8e <LCD_vidSetPosition+0x46>
     a82:	2c 81       	ldd	r18, Y+4	; 0x04
     a84:	3d 81       	ldd	r19, Y+5	; 0x05
     a86:	21 30       	cpi	r18, 0x01	; 1
     a88:	31 05       	cpc	r19, r1
     a8a:	31 f0       	breq	.+12     	; 0xa98 <LCD_vidSetPosition+0x50>
     a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <LCD_vidSetPosition+0x5a>
	{
	case 0:
		adrs += col;
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9b 81       	ldd	r25, Y+3	; 0x03
     a92:	89 0f       	add	r24, r25
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <LCD_vidSetPosition+0x5a>
		break;
	case 1:
		adrs += (64 + col);
     a98:	9b 81       	ldd	r25, Y+3	; 0x03
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	89 0f       	add	r24, r25
     a9e:	80 5c       	subi	r24, 0xC0	; 192
     aa0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_vidWriteCommand(adrs);
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_vidWriteCommand>
	}
}
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	cf 91       	pop	r28
     ab4:	df 91       	pop	r29
     ab6:	08 95       	ret

00000ab8 <LCD_vidClear>:

// function to clear the LCD
void LCD_vidClear(void)
{   if (LCD_Status == LCD_NOT_INITIALIZED)
     ab8:	df 93       	push	r29
     aba:	cf 93       	push	r28
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	80 91 ac 00 	lds	r24, 0x00AC
     ac4:	88 23       	and	r24, r24
     ac6:	29 f4       	brne	.+10     	; 0xad2 <LCD_vidClear+0x1a>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_CLEAR_SID);
     ac8:	88 e7       	ldi	r24, 0x78	; 120
     aca:	66 e0       	ldi	r22, 0x06	; 6
     acc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Det_ReportError>
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <LCD_vidClear+0x28>
	}
	else
	{
	LCD_vidWriteCommand(0b00000001);
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_vidWriteCommand>
	delay(8000);
     ad8:	80 e4       	ldi	r24, 0x40	; 64
     ada:	9f e1       	ldi	r25, 0x1F	; 31
     adc:	0e 94 73 05 	call	0xae6	; 0xae6 <delay>
}
}
     ae0:	cf 91       	pop	r28
     ae2:	df 91       	pop	r29
     ae4:	08 95       	ret

00000ae6 <delay>:

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	00 d0       	rcall	.+0      	; 0xaec <delay+0x6>
     aec:	00 d0       	rcall	.+0      	; 0xaee <delay+0x8>
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t counter = 0;
     af6:	1a 82       	std	Y+2, r1	; 0x02
     af8:	19 82       	std	Y+1, r1	; 0x01
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <delay+0x20>
	while (counter < max) // loop to perform a delay
	{
		counter++;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	9a 83       	std	Y+2, r25	; 0x02
     b04:	89 83       	std	Y+1, r24	; 0x01

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
	uint16_t counter = 0;
	while (counter < max) // loop to perform a delay
     b06:	29 81       	ldd	r18, Y+1	; 0x01
     b08:	3a 81       	ldd	r19, Y+2	; 0x02
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	28 17       	cp	r18, r24
     b10:	39 07       	cpc	r19, r25
     b12:	a0 f3       	brcs	.-24     	; 0xafc <delay+0x16>
	{
		counter++;
	}
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	cf 91       	pop	r28
     b1e:	df 91       	pop	r29
     b20:	08 95       	ret

00000b22 <KPD_init>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"
//#include<util/delay.h>

void KPD_init(void)
{
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
	/*Set columns & Rows Direction*/
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN0_PIN,DIO_OUTPUT);
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	65 e0       	ldi	r22, 0x05	; 5
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN1_PIN,DIO_OUTPUT);
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	66 e0       	ldi	r22, 0x06	; 6
     b38:	41 e0       	ldi	r20, 0x01	; 1
     b3a:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN2_PIN,DIO_OUTPUT);
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_COLUMN3_PIN,DIO_OUTPUT);
	DIO_SETpinDir(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	62 e0       	ldi	r22, 0x02	; 2
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	64 e0       	ldi	r22, 0x04	; 4
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);

	/*Set Rows to work in pull up mode*/
	DIO_SETpinVal(KPD_PORT,KPD_ROW0_PIN,DIO_HIGH);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW1_PIN,DIO_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	63 e0       	ldi	r22, 0x03	; 3
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW2_PIN,DIO_HIGH);
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	64 e0       	ldi	r22, 0x04	; 4
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_ROW3_PIN,DIO_HIGH);

	/*Deactivate columns by setting them high*/
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN0_PIN,DIO_HIGH);
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	65 e0       	ldi	r22, 0x05	; 5
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN1_PIN,DIO_HIGH);
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	66 e0       	ldi	r22, 0x06	; 6
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN2_PIN,DIO_HIGH);
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	67 e0       	ldi	r22, 0x07	; 7
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_COLUMN3_PIN,DIO_HIGH);
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <KPD_u8GetPressedKey>:

uint8_t KPD_u8GetPressedKey(void)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	00 d0       	rcall	.+0      	; 0xbae <KPD_u8GetPressedKey+0x6>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <KPD_u8GetPressedKey+0x8>
     bb0:	0f 92       	push	r0
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8Pressed=KPD_NO_Pressed;
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     bba:	19 82       	std	Y+1, r1	; 0x01
     bbc:	6a c0       	rjmp	.+212    	; 0xc92 <KPD_u8GetPressedKey+0xea>
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	fc 01       	movw	r30, r24
     bc6:	e5 56       	subi	r30, 0x65	; 101
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	90 81       	ld	r25, Z
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	69 2f       	mov	r22, r25
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     bd6:	1a 82       	std	Y+2, r1	; 0x02
     bd8:	49 c0       	rjmp	.+146    	; 0xc6c <KPD_u8GetPressedKey+0xc4>
		{
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	fc 01       	movw	r30, r24
     be2:	e2 56       	subi	r30, 0x62	; 98
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	90 81       	ld	r25, Z
     be8:	9e 01       	movw	r18, r28
     bea:	2c 5f       	subi	r18, 0xFC	; 252
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	69 2f       	mov	r22, r25
     bf2:	a9 01       	movw	r20, r18
     bf4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_GETpinVal>
			if(DIO_LOW==ROW_PIN_State)
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	88 23       	and	r24, r24
     bfc:	a1 f5       	brne	.+104    	; 0xc66 <KPD_u8GetPressedKey+0xbe>
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	48 2f       	mov	r20, r24
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	c9 01       	movw	r24, r18
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	82 0f       	add	r24, r18
     c12:	93 1f       	adc	r25, r19
     c14:	84 0f       	add	r24, r20
     c16:	95 1f       	adc	r25, r21
     c18:	fc 01       	movw	r30, r24
     c1a:	ef 55       	subi	r30, 0x5F	; 95
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	80 81       	ld	r24, Z
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <KPD_u8GetPressedKey+0x9a>
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	e2 56       	subi	r30, 0x62	; 98
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	90 81       	ld	r25, Z
     c32:	9e 01       	movw	r18, r28
     c34:	2c 5f       	subi	r18, 0xFC	; 252
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	69 2f       	mov	r22, r25
     c3c:	a9 01       	movw	r20, r18
     c3e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_GETpinVal>
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
			if(DIO_LOW==ROW_PIN_State)
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	88 23       	and	r24, r24
     c46:	71 f3       	breq	.-36     	; 0xc24 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
				}
				//_delay_ms(25);
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	fc 01       	movw	r30, r24
     c50:	e5 56       	subi	r30, 0x65	; 101
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	90 81       	ld	r25, Z
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	69 2f       	mov	r22, r25
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
				return local_u8Pressed;
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	1c c0       	rjmp	.+56     	; 0xc9e <KPD_u8GetPressedKey+0xf6>

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	8a 83       	std	Y+2, r24	; 0x02
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	83 30       	cpi	r24, 0x03	; 3
     c70:	08 f4       	brcc	.+2      	; 0xc74 <KPD_u8GetPressedKey+0xcc>
     c72:	b3 cf       	rjmp	.-154    	; 0xbda <KPD_u8GetPressedKey+0x32>
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
				return local_u8Pressed;
			}
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	fc 01       	movw	r30, r24
     c7c:	e5 56       	subi	r30, 0x65	; 101
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	90 81       	ld	r25, Z
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	69 2f       	mov	r22, r25
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	89 83       	std	Y+1, r24	; 0x01
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	08 f4       	brcc	.+2      	; 0xc9a <KPD_u8GetPressedKey+0xf2>
     c98:	92 cf       	rjmp	.-220    	; 0xbbe <KPD_u8GetPressedKey+0x16>
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
	}

	return local_u8Pressed;
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <BTN_vidInit>:
#include "../../02-MCAL/DIO/DIO_interface.h"
#include "Button.h"
#include "ButtonConfig.h"

void BTN_vidInit(BTN_Num_t btn)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <BTN_vidInit+0x6>
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
    switch (btn)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	3b 83       	std	Y+3, r19	; 0x03
     cc6:	2a 83       	std	Y+2, r18	; 0x02
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	9b 81       	ldd	r25, Y+3	; 0x03
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	31 f0       	breq	.+12     	; 0xcdc <BTN_vidInit+0x2c>
     cd0:	2a 81       	ldd	r18, Y+2	; 0x02
     cd2:	3b 81       	ldd	r19, Y+3	; 0x03
     cd4:	21 30       	cpi	r18, 0x01	; 1
     cd6:	31 05       	cpc	r19, r1
     cd8:	39 f0       	breq	.+14     	; 0xce8 <BTN_vidInit+0x38>
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <BTN_vidInit+0x42>
    {
    case BTN_0:
        DIO_SETpinDir(BTN_0_PORT, BTN_0_PIN, DIO_INPUT);
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	64 e0       	ldi	r22, 0x04	; 4
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <BTN_vidInit+0x42>
        {
            // do nothing
        }
        break;
    case BTN_1:
        DIO_SETpinDir(BTN_1_PORT, BTN_1_PIN, DIO_INPUT);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	62 e0       	ldi	r22, 0x02	; 2
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
        }
        break;
    default:
        break;
    }
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <BTN_u8IsPressed>:

uint8_t BTN_u8IsPressed(BTN_Num_t btn)
{   uint16_t counter= 0;
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	28 97       	sbiw	r28, 0x08	; 8
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	8d 83       	std	Y+5, r24	; 0x05
     d14:	1a 82       	std	Y+2, r1	; 0x02
     d16:	19 82       	std	Y+1, r1	; 0x01
    uint8_t prev_status = 0;
     d18:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t status = 1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	8c 83       	std	Y+4, r24	; 0x04

    switch (btn)
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	38 87       	std	Y+8, r19	; 0x08
     d26:	2f 83       	std	Y+7, r18	; 0x07
     d28:	8f 81       	ldd	r24, Y+7	; 0x07
     d2a:	98 85       	ldd	r25, Y+8	; 0x08
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	31 f0       	breq	.+12     	; 0xd3c <BTN_u8IsPressed+0x3e>
     d30:	2f 81       	ldd	r18, Y+7	; 0x07
     d32:	38 85       	ldd	r19, Y+8	; 0x08
     d34:	21 30       	cpi	r18, 0x01	; 1
     d36:	31 05       	cpc	r19, r1
     d38:	21 f1       	breq	.+72     	; 0xd82 <BTN_u8IsPressed+0x84>
     d3a:	46 c0       	rjmp	.+140    	; 0xdc8 <BTN_u8IsPressed+0xca>
    {
    case BTN_0:
        while (1)
        {
            DIO_GETpinVal(BTN_0_PORT, BTN_0_PIN,&prev_status);
     d3c:	9e 01       	movw	r18, r28
     d3e:	2d 5f       	subi	r18, 0xFD	; 253
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	64 e0       	ldi	r22, 0x04	; 4
     d46:	a9 01       	movw	r20, r18
     d48:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_GETpinVal>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <BTN_u8IsPressed+0x5a>
            while (counter < 42000)  //loop to perform a delay
            {
                counter++;    
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
    {
    case BTN_0:
        while (1)
        {
            DIO_GETpinVal(BTN_0_PORT, BTN_0_PIN,&prev_status);
            while (counter < 42000)  //loop to perform a delay
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	34 ea       	ldi	r19, 0xA4	; 164
     d5e:	80 31       	cpi	r24, 0x10	; 16
     d60:	93 07       	cpc	r25, r19
     d62:	a8 f3       	brcs	.-22     	; 0xd4e <BTN_u8IsPressed+0x50>
            {
                counter++;    
            }
            DIO_GETpinVal(BTN_0_PORT, BTN_0_PIN,&status);
     d64:	9e 01       	movw	r18, r28
     d66:	2c 5f       	subi	r18, 0xFC	; 252
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	64 e0       	ldi	r22, 0x04	; 4
     d6e:	a9 01       	movw	r20, r18
     d70:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_GETpinVal>
            
            if (status == prev_status)
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	98 17       	cp	r25, r24
     d7a:	01 f7       	brne	.-64     	; 0xd3c <BTN_u8IsPressed+0x3e>
            }
        }
        
        if (BTN_0_RESISTOR == BTN_PULL_DOWN_EXT)
        {
            return status;
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	8e 83       	std	Y+6, r24	; 0x06
     d80:	25 c0       	rjmp	.+74     	; 0xdcc <BTN_u8IsPressed+0xce>
        }

    case BTN_1:
        while (1)
        {
            DIO_GETpinVal(BTN_1_PORT, BTN_1_PIN,&prev_status);
     d82:	9e 01       	movw	r18, r28
     d84:	2d 5f       	subi	r18, 0xFD	; 253
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	62 e0       	ldi	r22, 0x02	; 2
     d8c:	a9 01       	movw	r20, r18
     d8e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_GETpinVal>
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <BTN_u8IsPressed+0xa0>
            while (counter < 42000)  //loop to perform a delay
            {
                counter++;    
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	89 83       	std	Y+1, r24	; 0x01

    case BTN_1:
        while (1)
        {
            DIO_GETpinVal(BTN_1_PORT, BTN_1_PIN,&prev_status);
            while (counter < 42000)  //loop to perform a delay
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	24 ea       	ldi	r18, 0xA4	; 164
     da4:	80 31       	cpi	r24, 0x10	; 16
     da6:	92 07       	cpc	r25, r18
     da8:	a8 f3       	brcs	.-22     	; 0xd94 <BTN_u8IsPressed+0x96>
            {
                counter++;    
            }
            DIO_GETpinVal(BTN_1_PORT, BTN_1_PIN,&status);
     daa:	9e 01       	movw	r18, r28
     dac:	2c 5f       	subi	r18, 0xFC	; 252
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	a9 01       	movw	r20, r18
     db6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_GETpinVal>
            
            if (status == prev_status)
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	98 17       	cp	r25, r24
     dc0:	01 f7       	brne	.-64     	; 0xd82 <BTN_u8IsPressed+0x84>
                break;
            }
        }
        if (BTN_1_RESISTOR == BTN_PULL_DOWN_EXT)
        {
            return status;
     dc2:	3c 81       	ldd	r19, Y+4	; 0x04
     dc4:	3e 83       	std	Y+6, r19	; 0x06
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <BTN_u8IsPressed+0xce>
        }
        break;
    default:
        break;
    }
    return status;
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	8e 83       	std	Y+6, r24	; 0x06
     dcc:	8e 81       	ldd	r24, Y+6	; 0x06
}
     dce:	28 96       	adiw	r28, 0x08	; 8
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <TIMER_vidTimer0Init>:
void static (*CallBack_Timer0OVF)(void) = NULL_PTR;

static uint8_t gu8_intial_value = 0;

void TIMER_vidTimer0Init(void)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62


    // setting waveform generation mode  ctc or normal
#if ( TIMER_0_MODE == NORMAL)
    TCCR0 = 0;
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	10 82       	st	Z, r1
    if( TIMER_0_OVF_INT == STD_ON){
        TIMSK |= 1;
     dee:	a9 e5       	ldi	r26, 0x59	; 89
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e9 e5       	ldi	r30, 0x59	; 89
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	8c 93       	st	X, r24
    {
        //do nothing
    }
#endif

}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <TIMER_vidTimer0Start>:


void TIMER_vidTimer0Start(uint8_t intial_value){
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	89 83       	std	Y+1, r24	; 0x01
    TIMER_vidTimer0SetInitValue(intial_value);           // setting intial value
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	0e 94 3a 07 	call	0xe74	; 0xe74 <TIMER_vidTimer0SetInitValue>
    TCCR0 |= TIMER_0_PRESCALER;    // setting the prescaler
     e14:	a3 e5       	ldi	r26, 0x53	; 83
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e3 e5       	ldi	r30, 0x53	; 83
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	83 60       	ori	r24, 0x03	; 3
     e20:	8c 93       	st	X, r24
}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <TIMER_vidTimer0Stop>:

void TIMER_vidTimer0Stop(void){
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= ~(0b111);  // clearing the prescaler bits 
     e32:	a3 e5       	ldi	r26, 0x53	; 83
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e3 e5       	ldi	r30, 0x53	; 83
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 7f       	andi	r24, 0xF8	; 248
     e3e:	8c 93       	st	X, r24
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <TIMER_u8Timer0_OVFflag>:

uint8_t TIMER_u8Timer0_OVFflag(void){
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,0);
     e4e:	e8 e5       	ldi	r30, 0x58	; 88
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 70       	andi	r24, 0x01	; 1
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <TIMER_u8Timer0_CTCflag>:

uint8_t TIMER_u8Timer0_CTCflag(void){
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,1);
     e64:	e8 e5       	ldi	r30, 0x58	; 88
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	86 95       	lsr	r24
     e6c:	81 70       	andi	r24, 0x01	; 1
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <TIMER_vidTimer0SetInitValue>:

void TIMER_vidTimer0SetInitValue(uint8_t intial_value){
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	89 83       	std	Y+1, r24	; 0x01
    gu8_intial_value = intial_value ;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 93 b1 00 	sts	0x00B1, r24
    TCNT0  = gu8_intial_value; 
     e86:	e2 e5       	ldi	r30, 0x52	; 82
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 91 b1 00 	lds	r24, 0x00B1
     e8e:	80 83       	st	Z, r24
}
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <SetCallBack_Timer0CTC>:


void SetCallBack_Timer0CTC(void(*func)(void)){
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <SetCallBack_Timer0CTC+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0CTC=func;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	90 93 ae 00 	sts	0x00AE, r25
     eae:	80 93 ad 00 	sts	0x00AD, r24
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <SetCallBack_Timer0OVF>:


void SetCallBack_Timer0OVF(void(*func)(void)){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <SetCallBack_Timer0OVF+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0OVF=func;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	90 93 b0 00 	sts	0x00B0, r25
     ed2:	80 93 af 00 	sts	0x00AF, r24
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <__vector_10>:


void __vector_10(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_10(void){
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
    if (CallBack_Timer0CTC != NULL_PTR)
     f0a:	80 91 ad 00 	lds	r24, 0x00AD
     f0e:	90 91 ae 00 	lds	r25, 0x00AE
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	29 f0       	breq	.+10     	; 0xf20 <__vector_10+0x40>
    {
        CallBack_Timer0CTC();
     f16:	e0 91 ad 00 	lds	r30, 0x00AD
     f1a:	f0 91 ae 00 	lds	r31, 0x00AE
     f1e:	09 95       	icall
    }
    

}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_11>:

void __vector_11(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_11(void){
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
    TCNT0  = gu8_intial_value;
     f70:	e2 e5       	ldi	r30, 0x52	; 82
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 91 b1 00 	lds	r24, 0x00B1
     f78:	80 83       	st	Z, r24
 if (CallBack_Timer0OVF != NULL_PTR)
     f7a:	80 91 af 00 	lds	r24, 0x00AF
     f7e:	90 91 b0 00 	lds	r25, 0x00B0
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	29 f0       	breq	.+10     	; 0xf90 <__vector_11+0x4a>
    {
        CallBack_Timer0OVF();
     f86:	e0 91 af 00 	lds	r30, 0x00AF
     f8a:	f0 91 b0 00 	lds	r31, 0x00B0
     f8e:	09 95       	icall
    }

}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <PWM_vidInit>:


static uint8_t PWM_timer_count = 0;
static uint8_t PWM_dutyCycle=0;

void PWM_vidInit(void){
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
    SetCallBack_Timer0OVF(PWM_vidstart);
     fbe:	85 ef       	ldi	r24, 0xF5	; 245
     fc0:	97 e0       	ldi	r25, 0x07	; 7
     fc2:	0e 94 5e 07 	call	0xebc	; 0xebc <SetCallBack_Timer0OVF>
    TIMER_vidTimer0Init();
     fc6:	0e 94 f0 06 	call	0xde0	; 0xde0 <TIMER_vidTimer0Init>
    DIO_SETpinDir(PWM_PORT1 , PWM_PIN1 , DIO_OUTPUT );
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	64 e0       	ldi	r22, 0x04	; 4
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
    DIO_SETpinDir(PWM_PORT2 , PWM_PIN2 , DIO_OUTPUT );
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	65 e0       	ldi	r22, 0x05	; 5
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SETpinDir>
   // DIO_vidSetPinDirection(PWM_PORT3 , PWM_PIN3 , OUTPUT );
    TIMER_vidTimer0Start(PWM_INTIAL_TIMER_VALUE);
     fde:	87 ee       	ldi	r24, 0xE7	; 231
     fe0:	0e 94 01 07 	call	0xe02	; 0xe02 <TIMER_vidTimer0Start>
}
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <PWM_vidstart>:

// the callback function when the timer overflow 
void PWM_vidstart(void)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
    PWM_timer_count++;
     ff2:	80 91 b2 00 	lds	r24, 0x00B2
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	80 93 b2 00 	sts	0x00B2, r24
    if (PWM_timer_count == PWM_dutyCycle)
     ffc:	90 91 b2 00 	lds	r25, 0x00B2
    1000:	80 91 b3 00 	lds	r24, 0x00B3
    1004:	98 17       	cp	r25, r24
    1006:	59 f4       	brne	.+22     	; 0x101e <PWM_vidstart+0x34>
    {
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_LOW);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	64 e0       	ldi	r22, 0x04	; 4
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_LOW);
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	65 e0       	ldi	r22, 0x05	; 5
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
    101c:	10 c0       	rjmp	.+32     	; 0x103e <PWM_vidstart+0x54>
       // DIO_vidSetPinValue(PWM_PORT3 , PWM_PIN3 , STD_LOW);
        
    }
    else if(PWM_timer_count >= 100)
    101e:	80 91 b2 00 	lds	r24, 0x00B2
    1022:	84 36       	cpi	r24, 0x64	; 100
    1024:	60 f0       	brcs	.+24     	; 0x103e <PWM_vidstart+0x54>
    {
        PWM_timer_count = 0;
    1026:	10 92 b2 00 	sts	0x00B2, r1
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_HIGH);
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	64 e0       	ldi	r22, 0x04	; 4
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_HIGH);
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	65 e0       	ldi	r22, 0x05	; 5
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_SETpinVal>
    }
    else
    {
        // do nothing
    }
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <PWM_SetDutyCycle>:

//function to change dutycycle
void PWM_SetDutyCycle(uint8_t dutyc){
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
    PWM_dutyCycle = dutyc;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 93 b3 00 	sts	0x00B3, r24
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <GlobalInerruptEnable>:
#include "Interrupt_interface.h"
#include "Interrupt_private.h"
#include "Interrupt_config.h"

void GlobalInerruptEnable(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1066:	af e5       	ldi	r26, 0x5F	; 95
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ef e5       	ldi	r30, 0x5F	; 95
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	8c 93       	st	X, r24
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <DIO_SETpinDir>:
#include "../../01-LIB/BIT_MATH.h"
#include "../../01-LIB/STD_TYPES.h"
#include "DIO_register.h"
#include "DIO_interface.h"

uint8_t DIO_SETpinDir(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_STAT){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	28 97       	sbiw	r28, 0x08	; 8
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	6b 83       	std	Y+3, r22	; 0x03
    1092:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <DIO_SETpinDir+0x26>
    109e:	f1 c0       	rjmp	.+482    	; 0x1282 <DIO_SETpinDir+0x208>
	{
		/*If the direction of the pin is output*/
		if(u8_STAT==DIO_OUTPUT)
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <DIO_SETpinDir+0x2e>
    10a6:	71 c0       	rjmp	.+226    	; 0x118a <DIO_SETpinDir+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	38 87       	std	Y+8, r19	; 0x08
    10b0:	2f 83       	std	Y+7, r18	; 0x07
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	98 85       	ldd	r25, Y+8	; 0x08
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	49 f1       	breq	.+82     	; 0x110e <DIO_SETpinDir+0x94>
    10bc:	2f 81       	ldd	r18, Y+7	; 0x07
    10be:	38 85       	ldd	r19, Y+8	; 0x08
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <DIO_SETpinDir+0x56>
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <DIO_SETpinDir+0x6c>
    10ce:	5b c0       	rjmp	.+182    	; 0x1186 <DIO_SETpinDir+0x10c>
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	71 f1       	breq	.+92     	; 0x1136 <DIO_SETpinDir+0xbc>
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	98 85       	ldd	r25, Y+8	; 0x08
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	e9 f1       	breq	.+122    	; 0x115e <DIO_SETpinDir+0xe4>
    10e4:	50 c0       	rjmp	.+160    	; 0x1186 <DIO_SETpinDir+0x10c>
			{
			case DIO_PORTA: SET_BIT(DDRA,u8_PIN);break;
    10e6:	aa e3       	ldi	r26, 0x3A	; 58
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ea e3       	ldi	r30, 0x3A	; 58
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_SETpinDir+0x8a>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_SETpinDir+0x86>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	bb c0       	rjmp	.+374    	; 0x1284 <DIO_SETpinDir+0x20a>
			case DIO_PORTB: SET_BIT(DDRB,u8_PIN);break;
    110e:	a7 e3       	ldi	r26, 0x37	; 55
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e3       	ldi	r30, 0x37	; 55
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_SETpinDir+0xb2>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_SETpinDir+0xae>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	a7 c0       	rjmp	.+334    	; 0x1284 <DIO_SETpinDir+0x20a>
			case DIO_PORTC: SET_BIT(DDRC,u8_PIN);break;
    1136:	a4 e3       	ldi	r26, 0x34	; 52
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_SETpinDir+0xda>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_SETpinDir+0xd6>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	93 c0       	rjmp	.+294    	; 0x1284 <DIO_SETpinDir+0x20a>
			case DIO_PORTD: SET_BIT(DDRD,u8_PIN);break;
    115e:	a1 e3       	ldi	r26, 0x31	; 49
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e1 e3       	ldi	r30, 0x31	; 49
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_SETpinDir+0x102>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_SETpinDir+0xfe>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	7f c0       	rjmp	.+254    	; 0x1284 <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	7d c0       	rjmp	.+250    	; 0x1284 <DIO_SETpinDir+0x20a>
			}
		}
		/*If the direction of the pin is input*/
		else if(u8_STAT==DIO_INPUT)
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	88 23       	and	r24, r24
    118e:	09 f0       	breq	.+2      	; 0x1192 <DIO_SETpinDir+0x118>
    1190:	76 c0       	rjmp	.+236    	; 0x127e <DIO_SETpinDir+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3e 83       	std	Y+6, r19	; 0x06
    119a:	2d 83       	std	Y+5, r18	; 0x05
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	59 f1       	breq	.+86     	; 0x11fc <DIO_SETpinDir+0x182>
    11a6:	2d 81       	ldd	r18, Y+5	; 0x05
    11a8:	3e 81       	ldd	r19, Y+6	; 0x06
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <DIO_SETpinDir+0x140>
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <DIO_SETpinDir+0x158>
    11b8:	60 c0       	rjmp	.+192    	; 0x127a <DIO_SETpinDir+0x200>
    11ba:	2d 81       	ldd	r18, Y+5	; 0x05
    11bc:	3e 81       	ldd	r19, Y+6	; 0x06
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	89 f1       	breq	.+98     	; 0x1226 <DIO_SETpinDir+0x1ac>
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <DIO_SETpinDir+0x156>
    11ce:	40 c0       	rjmp	.+128    	; 0x1250 <DIO_SETpinDir+0x1d6>
    11d0:	54 c0       	rjmp	.+168    	; 0x127a <DIO_SETpinDir+0x200>
			{
			case DIO_PORTA: CLR_BIT(DDRA,u8_PIN);break;
    11d2:	aa e3       	ldi	r26, 0x3A	; 58
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ea e3       	ldi	r30, 0x3A	; 58
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_SETpinDir+0x176>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_SETpinDir+0x172>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	44 c0       	rjmp	.+136    	; 0x1284 <DIO_SETpinDir+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB,u8_PIN);break;
    11fc:	a7 e3       	ldi	r26, 0x37	; 55
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e7 e3       	ldi	r30, 0x37	; 55
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_SETpinDir+0x1a0>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_SETpinDir+0x19c>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	2f c0       	rjmp	.+94     	; 0x1284 <DIO_SETpinDir+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC,u8_PIN);break;
    1226:	a4 e3       	ldi	r26, 0x34	; 52
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e4 e3       	ldi	r30, 0x34	; 52
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_SETpinDir+0x1ca>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_SETpinDir+0x1c6>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	1a c0       	rjmp	.+52     	; 0x1284 <DIO_SETpinDir+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD,u8_PIN);break;
    1250:	a1 e3       	ldi	r26, 0x31	; 49
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e1 e3       	ldi	r30, 0x31	; 49
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_SETpinDir+0x1f4>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_SETpinDir+0x1f0>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;break;
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <DIO_SETpinDir+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
    127e:	19 82       	std	Y+1, r1	; 0x01
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <DIO_SETpinDir+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
    1282:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
}
    1286:	28 96       	adiw	r28, 0x08	; 8
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <DIO_SETportDir>:

uint8_t DIO_SETportDir(uint8_t u8_PORT,uint8_t u8_STAT)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_SETportDir+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_SETportDir+0x8>
    12a0:	0f 92       	push	r0
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	8a 83       	std	Y+2, r24	; 0x02
    12a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3d 83       	std	Y+5, r19	; 0x05
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <DIO_SETportDir+0x5e>
    12c2:	2c 81       	ldd	r18, Y+4	; 0x04
    12c4:	3d 81       	ldd	r19, Y+5	; 0x05
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <DIO_SETportDir+0x3e>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <DIO_SETportDir+0x54>
    12d4:	1f c0       	rjmp	.+62     	; 0x1314 <DIO_SETportDir+0x7c>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <DIO_SETportDir+0x68>
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <DIO_SETportDir+0x72>
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <DIO_SETportDir+0x7c>
	{
		case DIO_PORTA: DDRA=u8_STAT;break;
    12ec:	ea e3       	ldi	r30, 0x3A	; 58
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	80 83       	st	Z, r24
    12f4:	10 c0       	rjmp	.+32     	; 0x1316 <DIO_SETportDir+0x7e>
		case DIO_PORTB: DDRB=u8_STAT;break;
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	80 83       	st	Z, r24
    12fe:	0b c0       	rjmp	.+22     	; 0x1316 <DIO_SETportDir+0x7e>
		case DIO_PORTC: DDRC=u8_STAT;break;
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	80 83       	st	Z, r24
    1308:	06 c0       	rjmp	.+12     	; 0x1316 <DIO_SETportDir+0x7e>
		case DIO_PORTD: DDRD=u8_STAT;break;
    130a:	e1 e3       	ldi	r30, 0x31	; 49
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	80 83       	st	Z, r24
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <DIO_SETportDir+0x7e>
		default:local_u8Error=NOK;break;
    1314:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO_SETpinVal>:

uint8_t DIO_SETpinVal(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_VAL){
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	28 97       	sbiw	r28, 0x08	; 8
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	6b 83       	std	Y+3, r22	; 0x03
    1340:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 30       	cpi	r24, 0x08	; 8
    134a:	08 f0       	brcs	.+2      	; 0x134e <DIO_SETpinVal+0x26>
    134c:	f1 c0       	rjmp	.+482    	; 0x1530 <DIO_SETpinVal+0x208>
	{
		/*If the chosen value is high*/
		if(u8_VAL==DIO_HIGH)
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	09 f0       	breq	.+2      	; 0x1356 <DIO_SETpinVal+0x2e>
    1354:	71 c0       	rjmp	.+226    	; 0x1438 <DIO_SETpinVal+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	38 87       	std	Y+8, r19	; 0x08
    135e:	2f 83       	std	Y+7, r18	; 0x07
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	49 f1       	breq	.+82     	; 0x13bc <DIO_SETpinVal+0x94>
    136a:	2f 81       	ldd	r18, Y+7	; 0x07
    136c:	38 85       	ldd	r19, Y+8	; 0x08
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_SETpinVal+0x56>
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	61 f0       	breq	.+24     	; 0x1394 <DIO_SETpinVal+0x6c>
    137c:	5b c0       	rjmp	.+182    	; 0x1434 <DIO_SETpinVal+0x10c>
    137e:	2f 81       	ldd	r18, Y+7	; 0x07
    1380:	38 85       	ldd	r19, Y+8	; 0x08
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	71 f1       	breq	.+92     	; 0x13e4 <DIO_SETpinVal+0xbc>
    1388:	8f 81       	ldd	r24, Y+7	; 0x07
    138a:	98 85       	ldd	r25, Y+8	; 0x08
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	e9 f1       	breq	.+122    	; 0x140c <DIO_SETpinVal+0xe4>
    1392:	50 c0       	rjmp	.+160    	; 0x1434 <DIO_SETpinVal+0x10c>
			{
			case DIO_PORTA: SET_BIT(PORTA,u8_PIN);break;
    1394:	ab e3       	ldi	r26, 0x3B	; 59
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_SETpinVal+0x8a>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_SETpinVal+0x86>
    13b6:	84 2b       	or	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	bb c0       	rjmp	.+374    	; 0x1532 <DIO_SETpinVal+0x20a>
			case DIO_PORTB: SET_BIT(PORTB,u8_PIN);break;
    13bc:	a8 e3       	ldi	r26, 0x38	; 56
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e8 e3       	ldi	r30, 0x38	; 56
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_SETpinVal+0xb2>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_SETpinVal+0xae>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	a7 c0       	rjmp	.+334    	; 0x1532 <DIO_SETpinVal+0x20a>
			case DIO_PORTC: SET_BIT(PORTC,u8_PIN);break;
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_SETpinVal+0xda>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_SETpinVal+0xd6>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	93 c0       	rjmp	.+294    	; 0x1532 <DIO_SETpinVal+0x20a>
			case DIO_PORTD: SET_BIT(PORTD,u8_PIN);break;
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_SETpinVal+0x102>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_SETpinVal+0xfe>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	7f c0       	rjmp	.+254    	; 0x1532 <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	7d c0       	rjmp	.+250    	; 0x1532 <DIO_SETpinVal+0x20a>
			}
		}
		/*If the chosen value is low*/
		else if(u8_VAL==DIO_LOW)
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	88 23       	and	r24, r24
    143c:	09 f0       	breq	.+2      	; 0x1440 <DIO_SETpinVal+0x118>
    143e:	76 c0       	rjmp	.+236    	; 0x152c <DIO_SETpinVal+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3e 83       	std	Y+6, r19	; 0x06
    1448:	2d 83       	std	Y+5, r18	; 0x05
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	59 f1       	breq	.+86     	; 0x14aa <DIO_SETpinVal+0x182>
    1454:	2d 81       	ldd	r18, Y+5	; 0x05
    1456:	3e 81       	ldd	r19, Y+6	; 0x06
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <DIO_SETpinVal+0x140>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f0       	breq	.+26     	; 0x1480 <DIO_SETpinVal+0x158>
    1466:	60 c0       	rjmp	.+192    	; 0x1528 <DIO_SETpinVal+0x200>
    1468:	2d 81       	ldd	r18, Y+5	; 0x05
    146a:	3e 81       	ldd	r19, Y+6	; 0x06
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	89 f1       	breq	.+98     	; 0x14d4 <DIO_SETpinVal+0x1ac>
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <DIO_SETpinVal+0x156>
    147c:	40 c0       	rjmp	.+128    	; 0x14fe <DIO_SETpinVal+0x1d6>
    147e:	54 c0       	rjmp	.+168    	; 0x1528 <DIO_SETpinVal+0x200>
			{
			case DIO_PORTA: CLR_BIT(PORTA,u8_PIN);break;
    1480:	ab e3       	ldi	r26, 0x3B	; 59
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_SETpinVal+0x176>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_SETpinVal+0x172>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	44 c0       	rjmp	.+136    	; 0x1532 <DIO_SETpinVal+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB,u8_PIN);break;
    14aa:	a8 e3       	ldi	r26, 0x38	; 56
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e8 e3       	ldi	r30, 0x38	; 56
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_SETpinVal+0x1a0>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_SETpinVal+0x19c>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	2f c0       	rjmp	.+94     	; 0x1532 <DIO_SETpinVal+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC,u8_PIN);break;
    14d4:	a5 e3       	ldi	r26, 0x35	; 53
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_SETpinVal+0x1ca>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_SETpinVal+0x1c6>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	1a c0       	rjmp	.+52     	; 0x1532 <DIO_SETpinVal+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD,u8_PIN);break;
    14fe:	a2 e3       	ldi	r26, 0x32	; 50
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_SETpinVal+0x1f4>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_SETpinVal+0x1f0>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    1528:	19 82       	std	Y+1, r1	; 0x01
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <DIO_SETpinVal+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
    152c:	19 82       	std	Y+1, r1	; 0x01
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <DIO_SETpinVal+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
    1530:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
}
    1534:	28 96       	adiw	r28, 0x08	; 8
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <DIO_SETportVal>:

uint8_t DIO_SETportVal(uint8_t u8_PORT,uint8_t u8_VAL)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <DIO_SETportVal+0x6>
    154c:	00 d0       	rcall	.+0      	; 0x154e <DIO_SETportVal+0x8>
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3d 83       	std	Y+5, r19	; 0x05
    1564:	2c 83       	std	Y+4, r18	; 0x04
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	d1 f0       	breq	.+52     	; 0x15a4 <DIO_SETportVal+0x5e>
    1570:	2c 81       	ldd	r18, Y+4	; 0x04
    1572:	3d 81       	ldd	r19, Y+5	; 0x05
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	2c f4       	brge	.+10     	; 0x1584 <DIO_SETportVal+0x3e>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	61 f0       	breq	.+24     	; 0x159a <DIO_SETportVal+0x54>
    1582:	1f c0       	rjmp	.+62     	; 0x15c2 <DIO_SETportVal+0x7c>
    1584:	2c 81       	ldd	r18, Y+4	; 0x04
    1586:	3d 81       	ldd	r19, Y+5	; 0x05
    1588:	22 30       	cpi	r18, 0x02	; 2
    158a:	31 05       	cpc	r19, r1
    158c:	81 f0       	breq	.+32     	; 0x15ae <DIO_SETportVal+0x68>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	91 05       	cpc	r25, r1
    1596:	81 f0       	breq	.+32     	; 0x15b8 <DIO_SETportVal+0x72>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <DIO_SETportVal+0x7c>
	{
		case DIO_PORTA: PORTA=u8_VAL;break;
    159a:	eb e3       	ldi	r30, 0x3B	; 59
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	80 83       	st	Z, r24
    15a2:	10 c0       	rjmp	.+32     	; 0x15c4 <DIO_SETportVal+0x7e>
		case DIO_PORTB: PORTB=u8_VAL;break;
    15a4:	e8 e3       	ldi	r30, 0x38	; 56
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	80 83       	st	Z, r24
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <DIO_SETportVal+0x7e>
		case DIO_PORTC: PORTC=u8_VAL;break;
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	80 83       	st	Z, r24
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <DIO_SETportVal+0x7e>
		case DIO_PORTD: PORTD=u8_VAL;break;
    15b8:	e2 e3       	ldi	r30, 0x32	; 50
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	80 83       	st	Z, r24
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <DIO_SETportVal+0x7e>
		default:local_u8Error=NOK;break;
    15c2:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <DIO_GETpinVal>:

uint8_t DIO_GETpinVal(uint8_t u8_PORT,uint8_t u8_PIN, uint8_t *u8p_RetVal){
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	27 97       	sbiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	6b 83       	std	Y+3, r22	; 0x03
    15ee:	5d 83       	std	Y+5, r21	; 0x05
    15f0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 30       	cpi	r24, 0x08	; 8
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <DIO_GETpinVal+0x28>
    15fc:	73 c0       	rjmp	.+230    	; 0x16e4 <DIO_GETpinVal+0x10e>
	{
		switch(u8_PORT)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3f 83       	std	Y+7, r19	; 0x07
    1606:	2e 83       	std	Y+6, r18	; 0x06
    1608:	4e 81       	ldd	r20, Y+6	; 0x06
    160a:	5f 81       	ldd	r21, Y+7	; 0x07
    160c:	41 30       	cpi	r20, 0x01	; 1
    160e:	51 05       	cpc	r21, r1
    1610:	59 f1       	breq	.+86     	; 0x1668 <DIO_GETpinVal+0x92>
    1612:	8e 81       	ldd	r24, Y+6	; 0x06
    1614:	9f 81       	ldd	r25, Y+7	; 0x07
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	91 05       	cpc	r25, r1
    161a:	34 f4       	brge	.+12     	; 0x1628 <DIO_GETpinVal+0x52>
    161c:	2e 81       	ldd	r18, Y+6	; 0x06
    161e:	3f 81       	ldd	r19, Y+7	; 0x07
    1620:	21 15       	cp	r18, r1
    1622:	31 05       	cpc	r19, r1
    1624:	69 f0       	breq	.+26     	; 0x1640 <DIO_GETpinVal+0x6a>
    1626:	5c c0       	rjmp	.+184    	; 0x16e0 <DIO_GETpinVal+0x10a>
    1628:	4e 81       	ldd	r20, Y+6	; 0x06
    162a:	5f 81       	ldd	r21, Y+7	; 0x07
    162c:	42 30       	cpi	r20, 0x02	; 2
    162e:	51 05       	cpc	r21, r1
    1630:	79 f1       	breq	.+94     	; 0x1690 <DIO_GETpinVal+0xba>
    1632:	8e 81       	ldd	r24, Y+6	; 0x06
    1634:	9f 81       	ldd	r25, Y+7	; 0x07
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	91 05       	cpc	r25, r1
    163a:	09 f4       	brne	.+2      	; 0x163e <DIO_GETpinVal+0x68>
    163c:	3d c0       	rjmp	.+122    	; 0x16b8 <DIO_GETpinVal+0xe2>
    163e:	50 c0       	rjmp	.+160    	; 0x16e0 <DIO_GETpinVal+0x10a>
		{
		/*Choose which port*/
		case DIO_PORTA: *u8p_RetVal=GET_BIT(PINA,u8_PIN);break;
    1640:	e9 e3       	ldi	r30, 0x39	; 57
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_GETpinVal+0x82>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_GETpinVal+0x7e>
    165c:	ca 01       	movw	r24, r20
    165e:	81 70       	andi	r24, 0x01	; 1
    1660:	ec 81       	ldd	r30, Y+4	; 0x04
    1662:	fd 81       	ldd	r31, Y+5	; 0x05
    1664:	80 83       	st	Z, r24
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <DIO_GETpinVal+0x110>
		case DIO_PORTB: *u8p_RetVal=GET_BIT(PINB,u8_PIN);break;
    1668:	e6 e3       	ldi	r30, 0x36	; 54
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_GETpinVal+0xaa>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_GETpinVal+0xa6>
    1684:	ca 01       	movw	r24, r20
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	ec 81       	ldd	r30, Y+4	; 0x04
    168a:	fd 81       	ldd	r31, Y+5	; 0x05
    168c:	80 83       	st	Z, r24
    168e:	2b c0       	rjmp	.+86     	; 0x16e6 <DIO_GETpinVal+0x110>
		case DIO_PORTC: *u8p_RetVal=GET_BIT(PINC,u8_PIN);break;
    1690:	e3 e3       	ldi	r30, 0x33	; 51
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	88 2f       	mov	r24, r24
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a9 01       	movw	r20, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_GETpinVal+0xd2>
    16a4:	55 95       	asr	r21
    16a6:	47 95       	ror	r20
    16a8:	8a 95       	dec	r24
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_GETpinVal+0xce>
    16ac:	ca 01       	movw	r24, r20
    16ae:	81 70       	andi	r24, 0x01	; 1
    16b0:	ec 81       	ldd	r30, Y+4	; 0x04
    16b2:	fd 81       	ldd	r31, Y+5	; 0x05
    16b4:	80 83       	st	Z, r24
    16b6:	17 c0       	rjmp	.+46     	; 0x16e6 <DIO_GETpinVal+0x110>
		case DIO_PORTD: *u8p_RetVal=GET_BIT(PIND,u8_PIN);break;
    16b8:	e0 e3       	ldi	r30, 0x30	; 48
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a9 01       	movw	r20, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_GETpinVal+0xfa>
    16cc:	55 95       	asr	r21
    16ce:	47 95       	ror	r20
    16d0:	8a 95       	dec	r24
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_GETpinVal+0xf6>
    16d4:	ca 01       	movw	r24, r20
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	ec 81       	ldd	r30, Y+4	; 0x04
    16da:	fd 81       	ldd	r31, Y+5	; 0x05
    16dc:	80 83       	st	Z, r24
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <DIO_GETpinVal+0x110>
		default: Local_u8Error=NOK;break;
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <DIO_GETpinVal+0x110>
		}
	}
	else
	{
		Local_u8Error=NOK;
    16e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e8:	27 96       	adiw	r28, 0x07	; 7
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <ADC_init>:
uint16_t* gu8_Reading;
uint8_t gu8_State=IDLE;
void(*CallbackNotification)(void);

void ADC_init(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRA,0);
    1702:	aa e3       	ldi	r26, 0x3A	; 58
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ea e3       	ldi	r30, 0x3A	; 58
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	8e 7f       	andi	r24, 0xFE	; 254
    170e:	8c 93       	st	X, r24
	/*Select Ref.*/
#if ADC_REF_SEL == ADC_AREF
	CLR_BIT(ADC_ADMUX,ADMUX_REFS0);
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
#elif ADC_REF_SEL == ADC_AVCC
	SET_BIT(ADC_ADMUX,ADMUX_REFS0);
    1710:	a7 e2       	ldi	r26, 0x27	; 39
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e7 e2       	ldi	r30, 0x27	; 39
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	80 64       	ori	r24, 0x40	; 64
    171c:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
    171e:	a7 e2       	ldi	r26, 0x27	; 39
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e7 e2       	ldi	r30, 0x27	; 39
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 77       	andi	r24, 0x7F	; 127
    172a:	8c 93       	st	X, r24

	/*Select ADC Left Adjust Result*/
#if ADC_ADLAR_SEL == LEFT_ADJUST
	SET_BIT(ADC_ADMUX,ADMUX_ADLAR);
#elif ADC_ADLAR_SEL == RIGHT_ADJUST
	CLR_BIT(ADC_ADMUX,ADMUX_ADLAR);
    172c:	a7 e2       	ldi	r26, 0x27	; 39
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e7 e2       	ldi	r30, 0x27	; 39
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7d       	andi	r24, 0xDF	; 223
    1738:	8c 93       	st	X, r24
#endif

	/*Select Prescalar*/
	ADC_ADCSRA&=PRESC_BIT_MASK;
    173a:	a6 e2       	ldi	r26, 0x26	; 38
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e6 e2       	ldi	r30, 0x26	; 38
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	88 7f       	andi	r24, 0xF8	; 248
    1746:	8c 93       	st	X, r24
	ADC_ADCSRA|=ADC_PRESCLAR_SEL;
    1748:	a6 e2       	ldi	r26, 0x26	; 38
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e6 e2       	ldi	r30, 0x26	; 38
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	87 60       	ori	r24, 0x07	; 7
    1754:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADC_ADCSRA,ADCSRA_ADEN);
    1756:	a6 e2       	ldi	r26, 0x26	; 38
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e2       	ldi	r30, 0x26	; 38
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 68       	ori	r24, 0x80	; 128
    1762:	8c 93       	st	X, r24
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <ADC_u8StartConversionSynch>:

uint8_t ADC_u8StartConversionSynch(uint8_t ADC_Channel,uint16_t* u8_Reading)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	28 97       	sbiw	r28, 0x08	; 8
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	8e 83       	std	Y+6, r24	; 0x06
    1780:	78 87       	std	Y+8, r23	; 0x08
    1782:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t local_u8Error=OK;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t local_u8Counter=0;
    1788:	19 82       	std	Y+1, r1	; 0x01
    178a:	1a 82       	std	Y+2, r1	; 0x02
    178c:	1b 82       	std	Y+3, r1	; 0x03
    178e:	1c 82       	std	Y+4, r1	; 0x04
	if(gu8_State == IDLE)
    1790:	80 91 aa 00 	lds	r24, 0x00AA
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	09 f0       	breq	.+2      	; 0x179a <ADC_u8StartConversionSynch+0x30>
    1798:	5d c0       	rjmp	.+186    	; 0x1854 <ADC_u8StartConversionSynch+0xea>
	{
		gu8_State=BUSY;
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	80 93 aa 00 	sts	0x00AA, r24
		/*Select Channel*/
		ADC_ADMUX&=MUX_BIT_MASK;
    17a0:	a7 e2       	ldi	r26, 0x27	; 39
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e7 e2       	ldi	r30, 0x27	; 39
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 7e       	andi	r24, 0xE0	; 224
    17ac:	8c 93       	st	X, r24
		ADC_ADMUX|=ADC_Channel;
    17ae:	a7 e2       	ldi	r26, 0x27	; 39
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e7 e2       	ldi	r30, 0x27	; 39
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	90 81       	ld	r25, Z
    17b8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ba:	89 2b       	or	r24, r25
    17bc:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    17be:	a6 e2       	ldi	r26, 0x26	; 38
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e6 e2       	ldi	r30, 0x26	; 38
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 64       	ori	r24, 0x40	; 64
    17ca:	8c 93       	st	X, r24
    17cc:	0b c0       	rjmp	.+22     	; 0x17e4 <ADC_u8StartConversionSynch+0x7a>

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
		{
			local_u8Counter++;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	ab 81       	ldd	r26, Y+3	; 0x03
    17d4:	bc 81       	ldd	r27, Y+4	; 0x04
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	a1 1d       	adc	r26, r1
    17da:	b1 1d       	adc	r27, r1
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	ab 83       	std	Y+3, r26	; 0x03
    17e2:	bc 83       	std	Y+4, r27	; 0x04

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
    17e4:	e6 e2       	ldi	r30, 0x26	; 38
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	82 95       	swap	r24
    17ec:	8f 70       	andi	r24, 0x0F	; 15
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	90 70       	andi	r25, 0x00	; 0
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	61 f4       	brne	.+24     	; 0x1812 <ADC_u8StartConversionSynch+0xa8>
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1800:	bc 81       	ldd	r27, Y+4	; 0x04
    1802:	80 35       	cpi	r24, 0x50	; 80
    1804:	23 ec       	ldi	r18, 0xC3	; 195
    1806:	92 07       	cpc	r25, r18
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	a2 07       	cpc	r26, r18
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	b2 07       	cpc	r27, r18
    1810:	f1 f6       	brne	.-68     	; 0x17ce <ADC_u8StartConversionSynch+0x64>
		{
			local_u8Counter++;
		}

		if(local_u8Counter == ADC_TIMEOUT)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	ab 81       	ldd	r26, Y+3	; 0x03
    1818:	bc 81       	ldd	r27, Y+4	; 0x04
    181a:	80 35       	cpi	r24, 0x50	; 80
    181c:	23 ec       	ldi	r18, 0xC3	; 195
    181e:	92 07       	cpc	r25, r18
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	a2 07       	cpc	r26, r18
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	b2 07       	cpc	r27, r18
    1828:	11 f4       	brne	.+4      	; 0x182e <ADC_u8StartConversionSynch+0xc4>
		{
			local_u8Error=NOK;
    182a:	1d 82       	std	Y+5, r1	; 0x05
    182c:	15 c0       	rjmp	.+42     	; 0x1858 <ADC_u8StartConversionSynch+0xee>
		}
		else
		{
			/*Clear the ADC flag*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIF);
    182e:	a6 e2       	ldi	r26, 0x26	; 38
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e6 e2       	ldi	r30, 0x26	; 38
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 61       	ori	r24, 0x10	; 16
    183a:	8c 93       	st	X, r24
				*u8_Reading=ADC_ADCH;
				gu8_State=IDLE;
			}
			else if(ADC_ADLAR_SEL == RIGHT_ADJUST)
			{
				*u8_Reading=ADC_ADCL;
    183c:	e4 e2       	ldi	r30, 0x24	; 36
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	ef 81       	ldd	r30, Y+7	; 0x07
    1846:	f8 85       	ldd	r31, Y+8	; 0x08
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
				gu8_State=IDLE;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 aa 00 	sts	0x00AA, r24
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <ADC_u8StartConversionSynch+0xee>
			}
		}
	}
	else
	{
		local_u8Error=BUSY;
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8Error;
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
}
    185a:	28 96       	adiw	r28, 0x08	; 8
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <ADC_u8StartConversionASynch>:

uint8_t ADC_u8StartConversionASynch(uint8_t ADC_Channel,uint8_t* u8_Reading,void(*NotificFunc)(void))
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <ADC_u8StartConversionASynch+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <ADC_u8StartConversionASynch+0x8>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <ADC_u8StartConversionASynch+0xa>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	7c 83       	std	Y+4, r23	; 0x04
    187e:	6b 83       	std	Y+3, r22	; 0x03
    1880:	5e 83       	std	Y+6, r21	; 0x06
    1882:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t local_u8Error=OK;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_State==IDLE)
    1888:	80 91 aa 00 	lds	r24, 0x00AA
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	b9 f5       	brne	.+110    	; 0x18fe <ADC_u8StartConversionASynch+0x92>
	{
		if((u8_Reading==NULL) || (NotificFunc == NULL))
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	21 f0       	breq	.+8      	; 0x18a0 <ADC_u8StartConversionASynch+0x34>
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	11 f4       	brne	.+4      	; 0x18a4 <ADC_u8StartConversionASynch+0x38>
		{
			local_u8Error=NOK;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	2f c0       	rjmp	.+94     	; 0x1902 <ADC_u8StartConversionASynch+0x96>
		}
		else
		{
			gu8_State=BUSY;
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	80 93 aa 00 	sts	0x00AA, r24

			/*Select Channel*/
			ADC_ADMUX&=MUX_BIT_MASK;
    18aa:	a7 e2       	ldi	r26, 0x27	; 39
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e7 e2       	ldi	r30, 0x27	; 39
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 7e       	andi	r24, 0xE0	; 224
    18b6:	8c 93       	st	X, r24
			ADC_ADMUX|=ADC_Channel;
    18b8:	a7 e2       	ldi	r26, 0x27	; 39
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e7 e2       	ldi	r30, 0x27	; 39
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	90 81       	ld	r25, Z
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	89 2b       	or	r24, r25
    18c6:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    18c8:	a6 e2       	ldi	r26, 0x26	; 38
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e6 e2       	ldi	r30, 0x26	; 38
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 64       	ori	r24, 0x40	; 64
    18d4:	8c 93       	st	X, r24

			/*Enable Interrupt*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    18d6:	a6 e2       	ldi	r26, 0x26	; 38
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e6 e2       	ldi	r30, 0x26	; 38
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	88 60       	ori	r24, 0x08	; 8
    18e2:	8c 93       	st	X, r24

			gu8_Reading=u8_Reading;
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	90 93 1a 01 	sts	0x011A, r25
    18ec:	80 93 19 01 	sts	0x0119, r24
			CallbackNotification=NotificFunc;
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	90 93 1c 01 	sts	0x011C, r25
    18f8:	80 93 1b 01 	sts	0x011B, r24
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <ADC_u8StartConversionASynch+0x96>
		}
	}
	else
	{
		local_u8Error=BUSY;
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Error;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
}
    1904:	26 96       	adiw	r28, 0x06	; 6
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	{
		*gu8_Reading=ADC_ADCH;
	}
	else if(ADC_ADLAR_SEL == RIGHT_ADJUST)
	{
		*gu8_Reading=ADC_ADCL;
    1940:	a0 91 19 01 	lds	r26, 0x0119
    1944:	b0 91 1a 01 	lds	r27, 0x011A
    1948:	e4 e2       	ldi	r30, 0x24	; 36
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	8d 93       	st	X+, r24
    1952:	9c 93       	st	X, r25
	}

	/*ADC state IDLE*/
	gu8_State=IDLE;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 aa 00 	sts	0x00AA, r24

	/*Call callback notification func*/
	CallbackNotification();
    195a:	e0 91 1b 01 	lds	r30, 0x011B
    195e:	f0 91 1c 01 	lds	r31, 0x011C
    1962:	09 95       	icall

	/*Disable the interrupt*/
	CLR_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    1964:	a6 e2       	ldi	r26, 0x26	; 38
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e6 e2       	ldi	r30, 0x26	; 38
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	87 7f       	andi	r24, 0xF7	; 247
    1970:	8c 93       	st	X, r24

}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <Det_ReportError>:
#include "Det.h"

static uint8_t index_row=0;

void Det_ReportError( uint8_t ModuleId , uint8_t ApiId)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <Det_ReportError+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	6a 83       	std	Y+2, r22	; 0x02
gu8arr_error[index_row][0]=ModuleId;
    19a6:	80 91 b4 00 	lds	r24, 0x00B4
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	fc 01       	movw	r30, r24
    19b4:	eb 54       	subi	r30, 0x4B	; 75
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	80 83       	st	Z, r24
gu8arr_error[index_row][1]=ApiId;
    19bc:	80 91 b4 00 	lds	r24, 0x00B4
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	fc 01       	movw	r30, r24
    19ca:	ea 54       	subi	r30, 0x4A	; 74
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
index_row++;
    19d2:	80 91 b4 00 	lds	r24, 0x00B4
    19d6:	8f 5f       	subi	r24, 0xFF	; 255
    19d8:	80 93 b4 00 	sts	0x00B4, r24
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <main>:

#include "04-APP/APP_Interface.h";


int  main()
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
	 APP_init();
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	 APP_Prog();
    19f2:	0e 94 61 00 	call	0xc2	; 0xc2 <APP_Prog>

	 return 0;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <__mulsi3>:
    1a00:	62 9f       	mul	r22, r18
    1a02:	d0 01       	movw	r26, r0
    1a04:	73 9f       	mul	r23, r19
    1a06:	f0 01       	movw	r30, r0
    1a08:	82 9f       	mul	r24, r18
    1a0a:	e0 0d       	add	r30, r0
    1a0c:	f1 1d       	adc	r31, r1
    1a0e:	64 9f       	mul	r22, r20
    1a10:	e0 0d       	add	r30, r0
    1a12:	f1 1d       	adc	r31, r1
    1a14:	92 9f       	mul	r25, r18
    1a16:	f0 0d       	add	r31, r0
    1a18:	83 9f       	mul	r24, r19
    1a1a:	f0 0d       	add	r31, r0
    1a1c:	74 9f       	mul	r23, r20
    1a1e:	f0 0d       	add	r31, r0
    1a20:	65 9f       	mul	r22, r21
    1a22:	f0 0d       	add	r31, r0
    1a24:	99 27       	eor	r25, r25
    1a26:	72 9f       	mul	r23, r18
    1a28:	b0 0d       	add	r27, r0
    1a2a:	e1 1d       	adc	r30, r1
    1a2c:	f9 1f       	adc	r31, r25
    1a2e:	63 9f       	mul	r22, r19
    1a30:	b0 0d       	add	r27, r0
    1a32:	e1 1d       	adc	r30, r1
    1a34:	f9 1f       	adc	r31, r25
    1a36:	bd 01       	movw	r22, r26
    1a38:	cf 01       	movw	r24, r30
    1a3a:	11 24       	eor	r1, r1
    1a3c:	08 95       	ret

00001a3e <__udivmodhi4>:
    1a3e:	aa 1b       	sub	r26, r26
    1a40:	bb 1b       	sub	r27, r27
    1a42:	51 e1       	ldi	r21, 0x11	; 17
    1a44:	07 c0       	rjmp	.+14     	; 0x1a54 <__udivmodhi4_ep>

00001a46 <__udivmodhi4_loop>:
    1a46:	aa 1f       	adc	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	a6 17       	cp	r26, r22
    1a4c:	b7 07       	cpc	r27, r23
    1a4e:	10 f0       	brcs	.+4      	; 0x1a54 <__udivmodhi4_ep>
    1a50:	a6 1b       	sub	r26, r22
    1a52:	b7 0b       	sbc	r27, r23

00001a54 <__udivmodhi4_ep>:
    1a54:	88 1f       	adc	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	5a 95       	dec	r21
    1a5a:	a9 f7       	brne	.-22     	; 0x1a46 <__udivmodhi4_loop>
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	08 95       	ret

00001a66 <__udivmodsi4>:
    1a66:	a1 e2       	ldi	r26, 0x21	; 33
    1a68:	1a 2e       	mov	r1, r26
    1a6a:	aa 1b       	sub	r26, r26
    1a6c:	bb 1b       	sub	r27, r27
    1a6e:	fd 01       	movw	r30, r26
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <__udivmodsi4_ep>

00001a72 <__udivmodsi4_loop>:
    1a72:	aa 1f       	adc	r26, r26
    1a74:	bb 1f       	adc	r27, r27
    1a76:	ee 1f       	adc	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	a2 17       	cp	r26, r18
    1a7c:	b3 07       	cpc	r27, r19
    1a7e:	e4 07       	cpc	r30, r20
    1a80:	f5 07       	cpc	r31, r21
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <__udivmodsi4_ep>
    1a84:	a2 1b       	sub	r26, r18
    1a86:	b3 0b       	sbc	r27, r19
    1a88:	e4 0b       	sbc	r30, r20
    1a8a:	f5 0b       	sbc	r31, r21

00001a8c <__udivmodsi4_ep>:
    1a8c:	66 1f       	adc	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	1a 94       	dec	r1
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <__udivmodsi4_loop>
    1a98:	60 95       	com	r22
    1a9a:	70 95       	com	r23
    1a9c:	80 95       	com	r24
    1a9e:	90 95       	com	r25
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	bd 01       	movw	r22, r26
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	08 95       	ret

00001aaa <_exit>:
    1aaa:	f8 94       	cli

00001aac <__stop_program>:
    1aac:	ff cf       	rjmp	.-2      	; 0x1aac <__stop_program>
