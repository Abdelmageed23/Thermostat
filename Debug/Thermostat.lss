
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001a3a  00001ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  008000a0  008000a0  00001b0e  2**0
                  ALLOC
  3 .stab         00003048  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000103c  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_10>
      2c:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 0c 	call	0x1972	; 0x1972 <main>
      8a:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
#include "APP_Private.h"
#include "APP_Config.h"


void APP_init()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TEMP_init();
      9a:	0e 94 55 02 	call	0x4aa	; 0x4aa <TEMP_init>
	GlobalInerruptEnable();
      9e:	0e 94 f9 07 	call	0xff2	; 0xff2 <GlobalInerruptEnable>
	KPD_init();
      a2:	0e 94 5b 05 	call	0xab6	; 0xab6 <KPD_init>
	LCD_vidInit();
      a6:	0e 94 99 02 	call	0x532	; 0x532 <LCD_vidInit>
	BTN_vidInit(BTN_1);
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	0e 94 22 06 	call	0xc44	; 0xc44 <BTN_vidInit>
	MOTOR_init(MOTOR_1);
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	0e 94 b3 01 	call	0x366	; 0x366 <MOTOR_init>
	MOTOR_init(MOTOR_2);
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	0e 94 b3 01 	call	0x366	; 0x366 <MOTOR_init>

}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <APP_Prog>:


void APP_Prog()
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2b 97       	sbiw	r28, 0x0b	; 11
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
	uint8_t state = Home;
      d6:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint16_t Actual_Temp = 0;
      d8:	1c 82       	std	Y+4, r1	; 0x04
      da:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8_t key =255;
      dc:	8f ef       	ldi	r24, 0xFF	; 255
      de:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t desired_temp=0;
      e0:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{

	switch (state)
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	28 2f       	mov	r18, r24
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	3b 87       	std	Y+11, r19	; 0x0b
      ea:	2a 87       	std	Y+10, r18	; 0x0a
      ec:	4a 85       	ldd	r20, Y+10	; 0x0a
      ee:	5b 85       	ldd	r21, Y+11	; 0x0b
      f0:	41 30       	cpi	r20, 0x01	; 1
      f2:	51 05       	cpc	r21, r1
      f4:	b1 f1       	breq	.+108    	; 0x162 <APP_Prog+0xa0>
      f6:	8a 85       	ldd	r24, Y+10	; 0x0a
      f8:	9b 85       	ldd	r25, Y+11	; 0x0b
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	91 05       	cpc	r25, r1
      fe:	09 f4       	brne	.+2      	; 0x102 <APP_Prog+0x40>
     100:	73 c0       	rjmp	.+230    	; 0x1e8 <APP_Prog+0x126>
     102:	2a 85       	ldd	r18, Y+10	; 0x0a
     104:	3b 85       	ldd	r19, Y+11	; 0x0b
     106:	21 15       	cp	r18, r1
     108:	31 05       	cpc	r19, r1
     10a:	59 f7       	brne	.-42     	; 0xe2 <APP_Prog+0x20>
		{
		case Home:
			LCD_vidClear();
     10c:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_vidClear>
			LCD_vidSetPosition(0,0);
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteString("1-SET Temp");
     118:	80 e6       	ldi	r24, 0x60	; 96
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_vidWriteString>
			LCD_vidSetPosition(1,0);
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteString("2- RUN");
     128:	8b e6       	ldi	r24, 0x6B	; 107
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_vidWriteString>
			key =KPD_u8GetPressedKey();
     130:	0e 94 9e 05 	call	0xb3c	; 0xb3c <KPD_u8GetPressedKey>
     134:	8d 83       	std	Y+5, r24	; 0x05
     136:	03 c0       	rjmp	.+6      	; 0x13e <APP_Prog+0x7c>
			while(key!=1 && key!=2)
			{
				key =KPD_u8GetPressedKey();
     138:	0e 94 9e 05 	call	0xb3c	; 0xb3c <KPD_u8GetPressedKey>
     13c:	8d 83       	std	Y+5, r24	; 0x05
			LCD_vidSetPosition(0,0);
			LCD_vidWriteString("1-SET Temp");
			LCD_vidSetPosition(1,0);
			LCD_vidWriteString("2- RUN");
			key =KPD_u8GetPressedKey();
			while(key!=1 && key!=2)
     13e:	8d 81       	ldd	r24, Y+5	; 0x05
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	19 f0       	breq	.+6      	; 0x14a <APP_Prog+0x88>
     144:	8d 81       	ldd	r24, Y+5	; 0x05
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	b9 f7       	brne	.-18     	; 0x138 <APP_Prog+0x76>
			{
				key =KPD_u8GetPressedKey();
			}

			if(key ==1 )
     14a:	8d 81       	ldd	r24, Y+5	; 0x05
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	19 f4       	brne	.+6      	; 0x156 <APP_Prog+0x94>
			{
				state = SET;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	8a 83       	std	Y+2, r24	; 0x02
     154:	c6 cf       	rjmp	.-116    	; 0xe2 <APP_Prog+0x20>

			}
			else if (key ==2)
     156:	8d 81       	ldd	r24, Y+5	; 0x05
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	19 f6       	brne	.-122    	; 0xe2 <APP_Prog+0x20>
			{
				state = GET;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	8a 83       	std	Y+2, r24	; 0x02
     160:	c0 cf       	rjmp	.-128    	; 0xe2 <APP_Prog+0x20>
			}

			break;
		case SET:
			desired_temp=0;
     162:	19 82       	std	Y+1, r1	; 0x01
			key =255;
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	8d 83       	std	Y+5, r24	; 0x05
			LCD_vidClear();
     168:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_vidClear>
			LCD_vidSetPosition(0,0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteString("Desired Temp:");
     174:	82 e7       	ldi	r24, 0x72	; 114
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_vidWriteString>
			key =KPD_u8GetPressedKey();
     17c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <KPD_u8GetPressedKey>
     180:	8d 83       	std	Y+5, r24	; 0x05
     182:	03 c0       	rjmp	.+6      	; 0x18a <APP_Prog+0xc8>
			while(key==255)
			{
				key =KPD_u8GetPressedKey();
     184:	0e 94 9e 05 	call	0xb3c	; 0xb3c <KPD_u8GetPressedKey>
     188:	8d 83       	std	Y+5, r24	; 0x05
			key =255;
			LCD_vidClear();
			LCD_vidSetPosition(0,0);
			LCD_vidWriteString("Desired Temp:");
			key =KPD_u8GetPressedKey();
			while(key==255)
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	8f 3f       	cpi	r24, 0xFF	; 255
     18e:	d1 f3       	breq	.-12     	; 0x184 <APP_Prog+0xc2>
			{
				key =KPD_u8GetPressedKey();
			}
			LCD_vidSetPosition(1,5);
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	65 e0       	ldi	r22, 0x05	; 5
     194:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>

			while(1 )// Enter Button //////////////////////////// NOTED
		{

				if(BTN_u8IsPressed(BTN_1) ==1)
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 49 06 	call	0xc92	; 0xc92 <BTN_u8IsPressed>
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	09 f1       	breq	.+66     	; 0x1e4 <APP_Prog+0x122>
				{
					break;
				}
			key =KPD_u8GetPressedKey();
     1a2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <KPD_u8GetPressedKey>
     1a6:	8d 83       	std	Y+5, r24	; 0x05
			if(key != 255)
     1a8:	8d 81       	ldd	r24, Y+5	; 0x05
     1aa:	8f 3f       	cpi	r24, 0xFF	; 255
     1ac:	a9 f3       	breq	.-22     	; 0x198 <APP_Prog+0xd6>
			{

				desired_temp = desired_temp *10+key;
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9c 01       	movw	r18, r24
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	c9 01       	movw	r24, r18
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	82 0f       	add	r24, r18
     1c6:	93 1f       	adc	r25, r19
     1c8:	98 2f       	mov	r25, r24
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	89 0f       	add	r24, r25
     1ce:	89 83       	std	Y+1, r24	; 0x01
				LCD_vidWriteNumber(key);
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	88 2f       	mov	r24, r24
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	bc 01       	movw	r22, r24
     1dc:	cd 01       	movw	r24, r26
     1de:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_vidWriteNumber>
     1e2:	da cf       	rjmp	.-76     	; 0x198 <APP_Prog+0xd6>
			}


		}
			state = Home;
     1e4:	1a 82       	std	Y+2, r1	; 0x02
     1e6:	7d cf       	rjmp	.-262    	; 0xe2 <APP_Prog+0x20>
			}
*/
			break;
		case GET:
		//	LCD_vidClear();
			LCD_vidSetPosition(0,0);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteString("Actual Temp:");
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_vidWriteString>
			LCD_vidSetPosition(0,14);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	6e e0       	ldi	r22, 0x0E	; 14
     1fc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteString("  ");
     200:	8d e8       	ldi	r24, 0x8D	; 141
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_vidWriteString>

			LCD_vidSetPosition(0,14);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	6e e0       	ldi	r22, 0x0E	; 14
     20c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteNumber(Actual_Temp);
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	cc 01       	movw	r24, r24
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	bc 01       	movw	r22, r24
     21c:	cd 01       	movw	r24, r26
     21e:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_vidWriteNumber>
			LCD_vidSetPosition(1,0);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteString("Desired Temp:");
     22a:	82 e7       	ldi	r24, 0x72	; 114
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_vidWriteString>
			LCD_vidSetPosition(1,14);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	6e e0       	ldi	r22, 0x0E	; 14
     236:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidSetPosition>
			LCD_vidWriteNumber(desired_temp);
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	bc 01       	movw	r22, r24
     246:	cd 01       	movw	r24, r26
     248:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_vidWriteNumber>


			Actual_Temp = TEMP_u8GetReading();// 0 = ADC channel   ** NEEDED
     24c:	0e 94 66 02 	call	0x4cc	; 0x4cc <TEMP_u8GetReading>
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
			LCD_vidWriteNumber(Actual_Temp);
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	cc 01       	movw	r24, r24
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	bc 01       	movw	r22, r24
     264:	cd 01       	movw	r24, r26
     266:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_vidWriteNumber>
     26a:	0b c0       	rjmp	.+22     	; 0x282 <APP_Prog+0x1c0>
			for(volatile uint32_t delay; delay<20000000;delay++);
     26c:	8e 81       	ldd	r24, Y+6	; 0x06
     26e:	9f 81       	ldd	r25, Y+7	; 0x07
     270:	a8 85       	ldd	r26, Y+8	; 0x08
     272:	b9 85       	ldd	r27, Y+9	; 0x09
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	a1 1d       	adc	r26, r1
     278:	b1 1d       	adc	r27, r1
     27a:	8e 83       	std	Y+6, r24	; 0x06
     27c:	9f 83       	std	Y+7, r25	; 0x07
     27e:	a8 87       	std	Y+8, r26	; 0x08
     280:	b9 87       	std	Y+9, r27	; 0x09
     282:	8e 81       	ldd	r24, Y+6	; 0x06
     284:	9f 81       	ldd	r25, Y+7	; 0x07
     286:	a8 85       	ldd	r26, Y+8	; 0x08
     288:	b9 85       	ldd	r27, Y+9	; 0x09
     28a:	80 30       	cpi	r24, 0x00	; 0
     28c:	3d e2       	ldi	r19, 0x2D	; 45
     28e:	93 07       	cpc	r25, r19
     290:	31 e3       	ldi	r19, 0x31	; 49
     292:	a3 07       	cpc	r26, r19
     294:	31 e0       	ldi	r19, 0x01	; 1
     296:	b3 07       	cpc	r27, r19
     298:	48 f3       	brcs	.-46     	; 0x26c <APP_Prog+0x1aa>
			key =KPD_u8GetPressedKey();
     29a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <KPD_u8GetPressedKey>
     29e:	8d 83       	std	Y+5, r24	; 0x05

			if(desired_temp>Actual_Temp)
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	28 2f       	mov	r18, r24
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	9c 81       	ldd	r25, Y+4	; 0x04
     2aa:	82 17       	cp	r24, r18
     2ac:	93 07       	cpc	r25, r19
     2ae:	20 f4       	brcc	.+8      	; 0x2b8 <APP_Prog+0x1f6>
					{
						MOTOR_off(MOTOR_1);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 30 02 	call	0x460	; 0x460 <MOTOR_off>
     2b6:	4f c0       	rjmp	.+158    	; 0x356 <APP_Prog+0x294>
					}
					else if ((Actual_Temp -desired_temp)<4 &&(Actual_Temp -desired_temp)>0)
     2b8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ba:	3c 81       	ldd	r19, Y+4	; 0x04
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	a9 01       	movw	r20, r18
     2c4:	48 1b       	sub	r20, r24
     2c6:	59 0b       	sbc	r21, r25
     2c8:	ca 01       	movw	r24, r20
     2ca:	84 30       	cpi	r24, 0x04	; 4
     2cc:	91 05       	cpc	r25, r1
     2ce:	80 f4       	brcc	.+32     	; 0x2f0 <APP_Prog+0x22e>
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	9c 81       	ldd	r25, Y+4	; 0x04
     2da:	28 17       	cp	r18, r24
     2dc:	39 07       	cpc	r19, r25
     2de:	41 f0       	breq	.+16     	; 0x2f0 <APP_Prog+0x22e>

					{
						MOTOR_speed(10);
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MOTOR_speed>
						MOTOR_direction(MOTOR_1,FWD);
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	0e 94 e7 01 	call	0x3ce	; 0x3ce <MOTOR_direction>
     2ee:	33 c0       	rjmp	.+102    	; 0x356 <APP_Prog+0x294>


					}
					else if ( ((Actual_Temp -desired_temp)<8 ) && ((Actual_Temp -desired_temp)>4))
     2f0:	2b 81       	ldd	r18, Y+3	; 0x03
     2f2:	3c 81       	ldd	r19, Y+4	; 0x04
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a9 01       	movw	r20, r18
     2fc:	48 1b       	sub	r20, r24
     2fe:	59 0b       	sbc	r21, r25
     300:	ca 01       	movw	r24, r20
     302:	88 30       	cpi	r24, 0x08	; 8
     304:	91 05       	cpc	r25, r1
     306:	a0 f4       	brcc	.+40     	; 0x330 <APP_Prog+0x26e>
     308:	2b 81       	ldd	r18, Y+3	; 0x03
     30a:	3c 81       	ldd	r19, Y+4	; 0x04
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	88 2f       	mov	r24, r24
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a9 01       	movw	r20, r18
     314:	48 1b       	sub	r20, r24
     316:	59 0b       	sbc	r21, r25
     318:	ca 01       	movw	r24, r20
     31a:	85 30       	cpi	r24, 0x05	; 5
     31c:	91 05       	cpc	r25, r1
     31e:	40 f0       	brcs	.+16     	; 0x330 <APP_Prog+0x26e>

					{
						MOTOR_direction(MOTOR_1,FWD);
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	0e 94 e7 01 	call	0x3ce	; 0x3ce <MOTOR_direction>
						MOTOR_speed(60);
     328:	8c e3       	ldi	r24, 0x3C	; 60
     32a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MOTOR_speed>
     32e:	13 c0       	rjmp	.+38     	; 0x356 <APP_Prog+0x294>


					}
					else if ( (Actual_Temp -desired_temp) >8 )
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	88 2f       	mov	r24, r24
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	a9 01       	movw	r20, r18
     33c:	48 1b       	sub	r20, r24
     33e:	59 0b       	sbc	r21, r25
     340:	ca 01       	movw	r24, r20
     342:	89 30       	cpi	r24, 0x09	; 9
     344:	91 05       	cpc	r25, r1
     346:	38 f0       	brcs	.+14     	; 0x356 <APP_Prog+0x294>

					{
						MOTOR_speed(90);
     348:	8a e5       	ldi	r24, 0x5A	; 90
     34a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MOTOR_speed>
						MOTOR_direction(MOTOR_1,FWD);
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	0e 94 e7 01 	call	0x3ce	; 0x3ce <MOTOR_direction>

					}
			if(BTN_u8IsPressed(BTN_1))	// NEED MODIFICATION TO HOME
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0e 94 49 06 	call	0xc92	; 0xc92 <BTN_u8IsPressed>
     35c:	88 23       	and	r24, r24
     35e:	09 f4       	brne	.+2      	; 0x362 <APP_Prog+0x2a0>
     360:	c0 ce       	rjmp	.-640    	; 0xe2 <APP_Prog+0x20>
			{
				state = Home;
     362:	1a 82       	std	Y+2, r1	; 0x02
     364:	be ce       	rjmp	.-644    	; 0xe2 <APP_Prog+0x20>

00000366 <MOTOR_init>:
#include "Motor.h"



void MOTOR_init(uint8_t numMotor)// numMotor (initialize Direction pins only (PWM initializes enable pins inside them))
{
     366:	df 93       	push	r29
     368:	cf 93       	push	r28
     36a:	0f 92       	push	r0
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	89 83       	std	Y+1, r24	; 0x01
	PWM_vidInit();
     372:	0e 94 a5 07 	call	0xf4a	; 0xf4a <PWM_vidInit>
	if(MOTOR_1==numMotor)
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	88 23       	and	r24, r24
     37a:	59 f4       	brne	.+22     	; 0x392 <MOTOR_init+0x2c>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1A,DIO_OUTPUT);
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1B,DIO_OUTPUT);
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	63 e0       	ldi	r22, 0x03	; 3
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
     390:	0d c0       	rjmp	.+26     	; 0x3ac <MOTOR_init+0x46>
	}
	else if(MOTOR_2==numMotor)
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	51 f4       	brne	.+20     	; 0x3ac <MOTOR_init+0x46>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2A,DIO_OUTPUT);
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	66 e0       	ldi	r22, 0x06	; 6
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2B,DIO_OUTPUT);
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	67 e0       	ldi	r22, 0x07	; 7
     3a6:	41 e0       	ldi	r20, 0x01	; 1
     3a8:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	}
}
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <MOTOR_speed>:

void MOTOR_speed(uint8_t dutyCycle)//  30/60/90 (Start PWM and initialize duty cycle)
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	0f 92       	push	r0
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	89 83       	std	Y+1, r24	; 0x01
	PWM_SetDutyCycle(dutyCycle);
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <PWM_SetDutyCycle>
}
     3c6:	0f 90       	pop	r0
     3c8:	cf 91       	pop	r28
     3ca:	df 91       	pop	r29
     3cc:	08 95       	ret

000003ce <MOTOR_direction>:
void MOTOR_direction(uint8_t numMotor, uint8_t DIR)//  numMotor/(FWD,REV) (Set direction of specified motor) i.e (MOTOR_1, FWD) meaning motor 1, move forward
{
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <MOTOR_direction+0x6>
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	89 83       	std	Y+1, r24	; 0x01
     3da:	6a 83       	std	Y+2, r22	; 0x02
	if(MOTOR_1==numMotor)
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	88 23       	and	r24, r24
     3e0:	e1 f4       	brne	.+56     	; 0x41a <MOTOR_direction+0x4c>
	{
		if(FWD==DIR)
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	59 f4       	brne	.+22     	; 0x3fe <MOTOR_direction+0x30>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_HIGH);
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	62 e0       	ldi	r22, 0x02	; 2
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	63 e0       	ldi	r22, 0x03	; 3
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
     3fc:	2c c0       	rjmp	.+88     	; 0x456 <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	88 23       	and	r24, r24
     402:	49 f5       	brne	.+82     	; 0x456 <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	62 e0       	ldi	r22, 0x02	; 2
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_HIGH);
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	63 e0       	ldi	r22, 0x03	; 3
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
     418:	1e c0       	rjmp	.+60     	; 0x456 <MOTOR_direction+0x88>
		}
	}
	else if(MOTOR_2==numMotor)
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	d9 f4       	brne	.+54     	; 0x456 <MOTOR_direction+0x88>
	{
		if(FWD==DIR)
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	59 f4       	brne	.+22     	; 0x43c <MOTOR_direction+0x6e>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_HIGH);
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	66 e0       	ldi	r22, 0x06	; 6
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	67 e0       	ldi	r22, 0x07	; 7
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
     43a:	0d c0       	rjmp	.+26     	; 0x456 <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	88 23       	and	r24, r24
     440:	51 f4       	brne	.+20     	; 0x456 <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	66 e0       	ldi	r22, 0x06	; 6
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_HIGH);
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	67 e0       	ldi	r22, 0x07	; 7
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		}
	}
	
	
}
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	cf 91       	pop	r28
     45c:	df 91       	pop	r29
     45e:	08 95       	ret

00000460 <MOTOR_off>:
void MOTOR_off(uint8_t numMotor)// stop specified motor (writes LOW on DIR data pins)
{
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	0f 92       	push	r0
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	89 83       	std	Y+1, r24	; 0x01
	if(MOTOR_1==numMotor)
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	88 23       	and	r24, r24
     470:	59 f4       	brne	.+22     	; 0x488 <MOTOR_off+0x28>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	62 e0       	ldi	r22, 0x02	; 2
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	63 e0       	ldi	r22, 0x03	; 3
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <MOTOR_off+0x42>
	}
	else if(MOTOR_2==numMotor)
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	51 f4       	brne	.+20     	; 0x4a2 <MOTOR_off+0x42>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	66 e0       	ldi	r22, 0x06	; 6
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	67 e0       	ldi	r22, 0x07	; 7
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	}
     4a2:	0f 90       	pop	r0
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <TEMP_init>:
#include "TEMP_private.h"
#include "TEMP_config.h"
#include "TEMP_interface.h"

void TEMP_init(void)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	DIO_SETpinDir(DIO_PORTA,ADC_Channel,DIO_INPUT);
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	ADC_init();
     4c2:	0e 94 47 0b 	call	0x168e	; 0x168e <ADC_init>
}
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <TEMP_u8GetReading>:

uint8_t TEMP_u8GetReading(void)
{
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <TEMP_u8GetReading+0x6>
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <TEMP_u8GetReading+0x8>
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8TEMP;
	uint16_t local_u16MiliVolt;
	uint8_t local_u8ADC_Read;
	ADC_u8StartConversionSynch(ADC_Channel,&local_u8ADC_Read);
     4d8:	9e 01       	movw	r18, r28
     4da:	2c 5f       	subi	r18, 0xFC	; 252
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	b9 01       	movw	r22, r18
     4e2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_u8StartConversionSynch>
	local_u16MiliVolt=(uint16_t)(((uint32_t)local_u8ADC_Read*Vref)/TWO_P_RESOLUTION);
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	88 2f       	mov	r24, r24
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	a0 e0       	ldi	r26, 0x00	; 0
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	28 e8       	ldi	r18, 0x88	; 136
     4f2:	33 e1       	ldi	r19, 0x13	; 19
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	bc 01       	movw	r22, r24
     4fa:	cd 01       	movw	r24, r26
     4fc:	0e 94 c6 0c 	call	0x198c	; 0x198c <__mulsi3>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	89 2f       	mov	r24, r25
     506:	9a 2f       	mov	r25, r26
     508:	ab 2f       	mov	r26, r27
     50a:	bb 27       	eor	r27, r27
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
	local_u8TEMP=local_u16MiliVolt/10;
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	2a e0       	ldi	r18, 0x0A	; 10
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	b9 01       	movw	r22, r18
     51a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__udivmodhi4>
     51e:	cb 01       	movw	r24, r22
     520:	8b 83       	std	Y+3, r24	; 0x03
	return local_u8TEMP;
     522:	8b 81       	ldd	r24, Y+3	; 0x03

}
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	08 95       	ret

00000532 <LCD_vidInit>:

// ********* FUNCTIONS IMPLMENTATION **********

// function to intialize the LCD with the configured pins
void LCD_vidInit(void)
{
     532:	df 93       	push	r29
     534:	cf 93       	push	r28
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
	if (LCD_Status == LCD_NOT_INITIALIZED)
     53a:	80 91 a0 00 	lds	r24, 0x00A0
     53e:	88 23       	and	r24, r24
     540:	09 f0       	breq	.+2      	; 0x544 <LCD_vidInit+0x12>
     542:	3f c0       	rjmp	.+126    	; 0x5c2 <LCD_vidInit+0x90>
	{
		// setting the pins direction
		DIO_SETpinDir(LCD_Port, LCD_RS, DIO_OUTPUT);
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_RW, DIO_OUTPUT);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	41 e0       	ldi	r20, 0x01	; 1
     554:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_E, DIO_OUTPUT);
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	63 e0       	ldi	r22, 0x03	; 3
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D4, DIO_OUTPUT);
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	64 e0       	ldi	r22, 0x04	; 4
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D5, DIO_OUTPUT);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	65 e0       	ldi	r22, 0x05	; 5
     570:	41 e0       	ldi	r20, 0x01	; 1
     572:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D6, DIO_OUTPUT);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	66 e0       	ldi	r22, 0x06	; 6
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D7, DIO_OUTPUT);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	67 e0       	ldi	r22, 0x07	; 7
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
		delay(65000);
     58a:	88 ee       	ldi	r24, 0xE8	; 232
     58c:	9d ef       	ldi	r25, 0xFD	; 253
     58e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		LCD_Status = LCD_INITIALIZED;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 a0 00 	sts	0x00A0, r24

		LCD_vidWriteCommand(0b00101000);
     598:	88 e2       	ldi	r24, 0x28	; 40
     59a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_vidWriteCommand>
		delay(5000);
     59e:	88 e8       	ldi	r24, 0x88	; 136
     5a0:	93 e1       	ldi	r25, 0x13	; 19
     5a2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		LCD_vidWriteCommand(0b00001100);
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_vidWriteCommand>
		delay(5000);
     5ac:	88 e8       	ldi	r24, 0x88	; 136
     5ae:	93 e1       	ldi	r25, 0x13	; 19
     5b0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		LCD_vidWriteCommand(0b00000001);
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_vidWriteCommand>
		delay(5000);
     5ba:	88 e8       	ldi	r24, 0x88	; 136
     5bc:	93 e1       	ldi	r25, 0x13	; 19
     5be:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
	}
	else
	{
		// do nothing
	}
}
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	08 95       	ret

000005c8 <LCD_vidWriteCommand>:

// function to send a command to LCD
void LCD_vidWriteCommand(uint8_t command)
{
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	0f 92       	push	r0
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     5d4:	80 91 a0 00 	lds	r24, 0x00A0
     5d8:	88 23       	and	r24, r24
     5da:	29 f4       	brne	.+10     	; 0x5e6 <LCD_vidWriteCommand+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_COMMAND_SID);
     5dc:	88 e7       	ldi	r24, 0x78	; 120
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     5e4:	81 c0       	rjmp	.+258    	; 0x6e8 <LCD_vidWriteCommand+0x120>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	62 e0       	ldi	r22, 0x02	; 2
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 4));
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	82 95       	swap	r24
     5fe:	8f 70       	andi	r24, 0x0F	; 15
     600:	98 2f       	mov	r25, r24
     602:	91 70       	andi	r25, 0x01	; 1
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	64 e0       	ldi	r22, 0x04	; 4
     608:	49 2f       	mov	r20, r25
     60a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 5));
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	82 95       	swap	r24
     612:	86 95       	lsr	r24
     614:	87 70       	andi	r24, 0x07	; 7
     616:	98 2f       	mov	r25, r24
     618:	91 70       	andi	r25, 0x01	; 1
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	65 e0       	ldi	r22, 0x05	; 5
     61e:	49 2f       	mov	r20, r25
     620:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 6));
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	82 95       	swap	r24
     628:	86 95       	lsr	r24
     62a:	86 95       	lsr	r24
     62c:	83 70       	andi	r24, 0x03	; 3
     62e:	98 2f       	mov	r25, r24
     630:	91 70       	andi	r25, 0x01	; 1
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	66 e0       	ldi	r22, 0x06	; 6
     636:	49 2f       	mov	r20, r25
     638:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 7));
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	98 2f       	mov	r25, r24
     640:	99 1f       	adc	r25, r25
     642:	99 27       	eor	r25, r25
     644:	99 1f       	adc	r25, r25
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	67 e0       	ldi	r22, 0x07	; 7
     64a:	49 2f       	mov	r20, r25
     64c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	63 e0       	ldi	r22, 0x03	; 3
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		delay(5000);
     65a:	88 e8       	ldi	r24, 0x88	; 136
     65c:	93 e1       	ldi	r25, 0x13	; 19
     65e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	63 e0       	ldi	r22, 0x03	; 3
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 0));
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	98 2f       	mov	r25, r24
     684:	91 70       	andi	r25, 0x01	; 1
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	49 2f       	mov	r20, r25
     68c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 1));
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	86 95       	lsr	r24
     694:	98 2f       	mov	r25, r24
     696:	91 70       	andi	r25, 0x01	; 1
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	65 e0       	ldi	r22, 0x05	; 5
     69c:	49 2f       	mov	r20, r25
     69e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 2));
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	86 95       	lsr	r24
     6a6:	86 95       	lsr	r24
     6a8:	98 2f       	mov	r25, r24
     6aa:	91 70       	andi	r25, 0x01	; 1
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	66 e0       	ldi	r22, 0x06	; 6
     6b0:	49 2f       	mov	r20, r25
     6b2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 3));
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	86 95       	lsr	r24
     6ba:	86 95       	lsr	r24
     6bc:	86 95       	lsr	r24
     6be:	98 2f       	mov	r25, r24
     6c0:	91 70       	andi	r25, 0x01	; 1
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	67 e0       	ldi	r22, 0x07	; 7
     6c6:	49 2f       	mov	r20, r25
     6c8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	63 e0       	ldi	r22, 0x03	; 3
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		delay(5000);
     6d6:	88 e8       	ldi	r24, 0x88	; 136
     6d8:	93 e1       	ldi	r25, 0x13	; 19
     6da:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	63 e0       	ldi	r22, 0x03	; 3
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	}
}
     6e8:	0f 90       	pop	r0
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	08 95       	ret

000006f0 <LCD_vidWriteData>:

// function that writes  one element on the LCD
void LCD_vidWriteData(uint8_t data)
{
     6f0:	df 93       	push	r29
     6f2:	cf 93       	push	r28
     6f4:	0f 92       	push	r0
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     6fc:	80 91 a0 00 	lds	r24, 0x00A0
     700:	88 23       	and	r24, r24
     702:	29 f4       	brne	.+10     	; 0x70e <LCD_vidWriteData+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_DATA_SID);
     704:	88 e7       	ldi	r24, 0x78	; 120
     706:	62 e0       	ldi	r22, 0x02	; 2
     708:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     70c:	81 c0       	rjmp	.+258    	; 0x810 <LCD_vidWriteData+0x120>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	41 e0       	ldi	r20, 0x01	; 1
     714:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	62 e0       	ldi	r22, 0x02	; 2
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 4));
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	82 95       	swap	r24
     726:	8f 70       	andi	r24, 0x0F	; 15
     728:	98 2f       	mov	r25, r24
     72a:	91 70       	andi	r25, 0x01	; 1
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	64 e0       	ldi	r22, 0x04	; 4
     730:	49 2f       	mov	r20, r25
     732:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 5));
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	82 95       	swap	r24
     73a:	86 95       	lsr	r24
     73c:	87 70       	andi	r24, 0x07	; 7
     73e:	98 2f       	mov	r25, r24
     740:	91 70       	andi	r25, 0x01	; 1
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	65 e0       	ldi	r22, 0x05	; 5
     746:	49 2f       	mov	r20, r25
     748:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 6));
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	82 95       	swap	r24
     750:	86 95       	lsr	r24
     752:	86 95       	lsr	r24
     754:	83 70       	andi	r24, 0x03	; 3
     756:	98 2f       	mov	r25, r24
     758:	91 70       	andi	r25, 0x01	; 1
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	66 e0       	ldi	r22, 0x06	; 6
     75e:	49 2f       	mov	r20, r25
     760:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 7));
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	98 2f       	mov	r25, r24
     768:	99 1f       	adc	r25, r25
     76a:	99 27       	eor	r25, r25
     76c:	99 1f       	adc	r25, r25
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	67 e0       	ldi	r22, 0x07	; 7
     772:	49 2f       	mov	r20, r25
     774:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		delay(5000);
     782:	88 e8       	ldi	r24, 0x88	; 136
     784:	93 e1       	ldi	r25, 0x13	; 19
     786:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	63 e0       	ldi	r22, 0x03	; 3
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 0));
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	98 2f       	mov	r25, r24
     7ac:	91 70       	andi	r25, 0x01	; 1
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	64 e0       	ldi	r22, 0x04	; 4
     7b2:	49 2f       	mov	r20, r25
     7b4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 1));
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	86 95       	lsr	r24
     7bc:	98 2f       	mov	r25, r24
     7be:	91 70       	andi	r25, 0x01	; 1
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	65 e0       	ldi	r22, 0x05	; 5
     7c4:	49 2f       	mov	r20, r25
     7c6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 2));
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	86 95       	lsr	r24
     7ce:	86 95       	lsr	r24
     7d0:	98 2f       	mov	r25, r24
     7d2:	91 70       	andi	r25, 0x01	; 1
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	66 e0       	ldi	r22, 0x06	; 6
     7d8:	49 2f       	mov	r20, r25
     7da:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 3));
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	86 95       	lsr	r24
     7e2:	86 95       	lsr	r24
     7e4:	86 95       	lsr	r24
     7e6:	98 2f       	mov	r25, r24
     7e8:	91 70       	andi	r25, 0x01	; 1
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	67 e0       	ldi	r22, 0x07	; 7
     7ee:	49 2f       	mov	r20, r25
     7f0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	63 e0       	ldi	r22, 0x03	; 3
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		delay(5000);
     7fe:	88 e8       	ldi	r24, 0x88	; 136
     800:	93 e1       	ldi	r25, 0x13	; 19
     802:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	63 e0       	ldi	r22, 0x03	; 3
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	}
}
     810:	0f 90       	pop	r0
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <LCD_vidWriteString>:
// function to write string on the LCD
void LCD_vidWriteString(uint8_t *string)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <LCD_vidWriteString+0x6>
     81e:	0f 92       	push	r0
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9b 83       	std	Y+3, r25	; 0x03
     826:	8a 83       	std	Y+2, r24	; 0x02
	if (string == NULL_PTR)
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	29 f4       	brne	.+10     	; 0x83a <LCD_vidWriteString+0x22>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     830:	88 e7       	ldi	r24, 0x78	; 120
     832:	63 e0       	ldi	r22, 0x03	; 3
     834:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     838:	24 c0       	rjmp	.+72     	; 0x882 <__stack+0x23>
	}
	else if (LCD_Status == LCD_NOT_INITIALIZED)
     83a:	80 91 a0 00 	lds	r24, 0x00A0
     83e:	88 23       	and	r24, r24
     840:	29 f4       	brne	.+10     	; 0x84c <LCD_vidWriteString+0x34>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     842:	88 e7       	ldi	r24, 0x78	; 120
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     84a:	1b c0       	rjmp	.+54     	; 0x882 <__stack+0x23>
	}
	else
	{
		uint8_t index = 0;
     84c:	19 82       	std	Y+1, r1	; 0x01
     84e:	0e c0       	rjmp	.+28     	; 0x86c <__stack+0xd>
		while (string[index] != 0)
		{
			LCD_vidWriteData(string[index]);
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	28 2f       	mov	r18, r24
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	fc 01       	movw	r30, r24
     85c:	e2 0f       	add	r30, r18
     85e:	f3 1f       	adc	r31, r19
     860:	80 81       	ld	r24, Z
     862:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_vidWriteData>
			index++;
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	8f 5f       	subi	r24, 0xFF	; 255
     86a:	89 83       	std	Y+1, r24	; 0x01
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
	}
	else
	{
		uint8_t index = 0;
		while (string[index] != 0)
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	9b 81       	ldd	r25, Y+3	; 0x03
     876:	fc 01       	movw	r30, r24
     878:	e2 0f       	add	r30, r18
     87a:	f3 1f       	adc	r31, r19
     87c:	80 81       	ld	r24, Z
     87e:	88 23       	and	r24, r24
     880:	39 f7       	brne	.-50     	; 0x850 <LCD_vidWriteString+0x38>
		{
			LCD_vidWriteData(string[index]);
			index++;
		}
	}
}
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	08 95       	ret

0000088e <LCD_vidWriteNumber>:

// function to write a number on the LCD
void LCD_vidWriteNumber(uint32_t num)
{
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	28 97       	sbiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	6d 83       	std	Y+5, r22	; 0x05
     8ac:	7e 83       	std	Y+6, r23	; 0x06
     8ae:	8f 83       	std	Y+7, r24	; 0x07
     8b0:	98 87       	std	Y+8, r25	; 0x08
	if (LCD_Status == LCD_NOT_INITIALIZED)
     8b2:	80 91 a0 00 	lds	r24, 0x00A0
     8b6:	88 23       	and	r24, r24
     8b8:	29 f4       	brne	.+10     	; 0x8c4 <LCD_vidWriteNumber+0x36>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_NUMBER_SID);
     8ba:	88 e7       	ldi	r24, 0x78	; 120
     8bc:	64 e0       	ldi	r22, 0x04	; 4
     8be:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     8c2:	7f c0       	rjmp	.+254    	; 0x9c2 <LCD_vidWriteNumber+0x134>
	}
	else
	{
	uint32_t reversed = 1;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	9a 83       	std	Y+2, r25	; 0x02
     8d0:	ab 83       	std	Y+3, r26	; 0x03
     8d2:	bc 83       	std	Y+4, r27	; 0x04
	if (num == 0)
     8d4:	8d 81       	ldd	r24, Y+5	; 0x05
     8d6:	9e 81       	ldd	r25, Y+6	; 0x06
     8d8:	af 81       	ldd	r26, Y+7	; 0x07
     8da:	b8 85       	ldd	r27, Y+8	; 0x08
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	d1 f5       	brne	.+116    	; 0x958 <LCD_vidWriteNumber+0xca>
	{
		LCD_vidWriteData('0');
     8e4:	80 e3       	ldi	r24, 0x30	; 48
     8e6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_vidWriteData>
     8ea:	6b c0       	rjmp	.+214    	; 0x9c2 <LCD_vidWriteNumber+0x134>
	}
	else
	{
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	ab 81       	ldd	r26, Y+3	; 0x03
     8f2:	bc 81       	ldd	r27, Y+4	; 0x04
     8f4:	2a e0       	ldi	r18, 0x0A	; 10
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 c6 0c 	call	0x198c	; 0x198c <__mulsi3>
     904:	7b 01       	movw	r14, r22
     906:	8c 01       	movw	r16, r24
     908:	8d 81       	ldd	r24, Y+5	; 0x05
     90a:	9e 81       	ldd	r25, Y+6	; 0x06
     90c:	af 81       	ldd	r26, Y+7	; 0x07
     90e:	b8 85       	ldd	r27, Y+8	; 0x08
     910:	2a e0       	ldi	r18, 0x0A	; 10
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__udivmodsi4>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	8e 0d       	add	r24, r14
     926:	9f 1d       	adc	r25, r15
     928:	a0 1f       	adc	r26, r16
     92a:	b1 1f       	adc	r27, r17
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	ab 83       	std	Y+3, r26	; 0x03
     932:	bc 83       	std	Y+4, r27	; 0x04
			num /= 10;
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	af 81       	ldd	r26, Y+7	; 0x07
     93a:	b8 85       	ldd	r27, Y+8	; 0x08
     93c:	2a e0       	ldi	r18, 0x0A	; 10
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	bc 01       	movw	r22, r24
     946:	cd 01       	movw	r24, r26
     948:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__udivmodsi4>
     94c:	da 01       	movw	r26, r20
     94e:	c9 01       	movw	r24, r18
     950:	8d 83       	std	Y+5, r24	; 0x05
     952:	9e 83       	std	Y+6, r25	; 0x06
     954:	af 83       	std	Y+7, r26	; 0x07
     956:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_vidWriteData('0');
	}
	else
	{
		while (num != 0)
     958:	8d 81       	ldd	r24, Y+5	; 0x05
     95a:	9e 81       	ldd	r25, Y+6	; 0x06
     95c:	af 81       	ldd	r26, Y+7	; 0x07
     95e:	b8 85       	ldd	r27, Y+8	; 0x08
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	a1 05       	cpc	r26, r1
     964:	b1 05       	cpc	r27, r1
     966:	11 f6       	brne	.-124    	; 0x8ec <LCD_vidWriteNumber+0x5e>
     968:	23 c0       	rjmp	.+70     	; 0x9b0 <LCD_vidWriteNumber+0x122>
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
		{
			LCD_vidWriteData(((reversed % 10) + '0'));
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	ab 81       	ldd	r26, Y+3	; 0x03
     970:	bc 81       	ldd	r27, Y+4	; 0x04
     972:	2a e0       	ldi	r18, 0x0A	; 10
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__udivmodsi4>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	80 5d       	subi	r24, 0xD0	; 208
     988:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_vidWriteData>
			reversed /= 10;
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	ab 81       	ldd	r26, Y+3	; 0x03
     992:	bc 81       	ldd	r27, Y+4	; 0x04
     994:	2a e0       	ldi	r18, 0x0A	; 10
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__udivmodsi4>
     9a4:	da 01       	movw	r26, r20
     9a6:	c9 01       	movw	r24, r18
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	ab 83       	std	Y+3, r26	; 0x03
     9ae:	bc 83       	std	Y+4, r27	; 0x04
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	ab 81       	ldd	r26, Y+3	; 0x03
     9b6:	bc 81       	ldd	r27, Y+4	; 0x04
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	91 05       	cpc	r25, r1
     9bc:	a1 05       	cpc	r26, r1
     9be:	b1 05       	cpc	r27, r1
     9c0:	a1 f6       	brne	.-88     	; 0x96a <LCD_vidWriteNumber+0xdc>
			LCD_vidWriteData(((reversed % 10) + '0'));
			reversed /= 10;
		}
	}
	}
}
     9c2:	28 96       	adiw	r28, 0x08	; 8
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	08 95       	ret

000009dc <LCD_vidSetPosition>:

// function that sets the postion that u want to write in
void LCD_vidSetPosition(uint8_t row, uint8_t col)
{
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <LCD_vidSetPosition+0x6>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <LCD_vidSetPosition+0x8>
     9e4:	0f 92       	push	r0
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	8a 83       	std	Y+2, r24	; 0x02
     9ec:	6b 83       	std	Y+3, r22	; 0x03
	if (LCD_Status == LCD_NOT_INITIALIZED)
     9ee:	80 91 a0 00 	lds	r24, 0x00A0
     9f2:	88 23       	and	r24, r24
     9f4:	29 f4       	brne	.+10     	; 0xa00 <LCD_vidSetPosition+0x24>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_SET_POSTION_SID);
     9f6:	88 e7       	ldi	r24, 0x78	; 120
     9f8:	65 e0       	ldi	r22, 0x05	; 5
     9fa:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     9fe:	1e c0       	rjmp	.+60     	; 0xa3c <LCD_vidSetPosition+0x60>
	}
	else
	{
	uint8_t adrs = 128;
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	89 83       	std	Y+1, r24	; 0x01
	switch (row)
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	3d 83       	std	Y+5, r19	; 0x05
     a0c:	2c 83       	std	Y+4, r18	; 0x04
     a0e:	8c 81       	ldd	r24, Y+4	; 0x04
     a10:	9d 81       	ldd	r25, Y+5	; 0x05
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	31 f0       	breq	.+12     	; 0xa22 <LCD_vidSetPosition+0x46>
     a16:	2c 81       	ldd	r18, Y+4	; 0x04
     a18:	3d 81       	ldd	r19, Y+5	; 0x05
     a1a:	21 30       	cpi	r18, 0x01	; 1
     a1c:	31 05       	cpc	r19, r1
     a1e:	31 f0       	breq	.+12     	; 0xa2c <LCD_vidSetPosition+0x50>
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <LCD_vidSetPosition+0x5a>
	{
	case 0:
		adrs += col;
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	89 0f       	add	r24, r25
     a28:	89 83       	std	Y+1, r24	; 0x01
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <LCD_vidSetPosition+0x5a>
		break;
	case 1:
		adrs += (64 + col);
     a2c:	9b 81       	ldd	r25, Y+3	; 0x03
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	89 0f       	add	r24, r25
     a32:	80 5c       	subi	r24, 0xC0	; 192
     a34:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_vidWriteCommand(adrs);
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_vidWriteCommand>
	}
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <LCD_vidClear>:

// function to clear the LCD
void LCD_vidClear(void)
{   if (LCD_Status == LCD_NOT_INITIALIZED)
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	80 91 a0 00 	lds	r24, 0x00A0
     a58:	88 23       	and	r24, r24
     a5a:	29 f4       	brne	.+10     	; 0xa66 <LCD_vidClear+0x1a>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_CLEAR_SID);
     a5c:	88 e7       	ldi	r24, 0x78	; 120
     a5e:	66 e0       	ldi	r22, 0x06	; 6
     a60:	0e 94 92 0c 	call	0x1924	; 0x1924 <Det_ReportError>
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <LCD_vidClear+0x28>
	}
	else
	{
	LCD_vidWriteCommand(0b00000001);
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_vidWriteCommand>
	delay(8000);
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	9f e1       	ldi	r25, 0x1F	; 31
     a70:	0e 94 3d 05 	call	0xa7a	; 0xa7a <delay>
}
}
     a74:	cf 91       	pop	r28
     a76:	df 91       	pop	r29
     a78:	08 95       	ret

00000a7a <delay>:

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <delay+0x6>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <delay+0x8>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	9c 83       	std	Y+4, r25	; 0x04
     a88:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t counter = 0;
     a8a:	1a 82       	std	Y+2, r1	; 0x02
     a8c:	19 82       	std	Y+1, r1	; 0x01
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <delay+0x20>
	while (counter < max) // loop to perform a delay
	{
		counter++;
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	9a 81       	ldd	r25, Y+2	; 0x02
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	9a 83       	std	Y+2, r25	; 0x02
     a98:	89 83       	std	Y+1, r24	; 0x01

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
	uint16_t counter = 0;
	while (counter < max) // loop to perform a delay
     a9a:	29 81       	ldd	r18, Y+1	; 0x01
     a9c:	3a 81       	ldd	r19, Y+2	; 0x02
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	a0 f3       	brcs	.-24     	; 0xa90 <delay+0x16>
	{
		counter++;
	}
}
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	08 95       	ret

00000ab6 <KPD_init>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"
//#include<util/delay.h>

void KPD_init(void)
{
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
	/*Set columns & Rows Direction*/
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN0_PIN,DIO_OUTPUT);
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	65 e0       	ldi	r22, 0x05	; 5
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN1_PIN,DIO_OUTPUT);
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	66 e0       	ldi	r22, 0x06	; 6
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN2_PIN,DIO_OUTPUT);
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	67 e0       	ldi	r22, 0x07	; 7
     ad6:	41 e0       	ldi	r20, 0x01	; 1
     ad8:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_COLUMN3_PIN,DIO_OUTPUT);
	DIO_SETpinDir(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	62 e0       	ldi	r22, 0x02	; 2
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	64 e0       	ldi	r22, 0x04	; 4
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);

	/*Set Rows to work in pull up mode*/
	DIO_SETpinVal(KPD_PORT,KPD_ROW0_PIN,DIO_HIGH);
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW1_PIN,DIO_HIGH);
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	63 e0       	ldi	r22, 0x03	; 3
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW2_PIN,DIO_HIGH);
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	64 e0       	ldi	r22, 0x04	; 4
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_ROW3_PIN,DIO_HIGH);

	/*Deactivate columns by setting them high*/
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN0_PIN,DIO_HIGH);
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	65 e0       	ldi	r22, 0x05	; 5
     b1c:	41 e0       	ldi	r20, 0x01	; 1
     b1e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN1_PIN,DIO_HIGH);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	66 e0       	ldi	r22, 0x06	; 6
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN2_PIN,DIO_HIGH);
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	67 e0       	ldi	r22, 0x07	; 7
     b30:	41 e0       	ldi	r20, 0x01	; 1
     b32:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_COLUMN3_PIN,DIO_HIGH);
}
     b36:	cf 91       	pop	r28
     b38:	df 91       	pop	r29
     b3a:	08 95       	ret

00000b3c <KPD_u8GetPressedKey>:

uint8_t KPD_u8GetPressedKey(void)
{
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	00 d0       	rcall	.+0      	; 0xb42 <KPD_u8GetPressedKey+0x6>
     b42:	00 d0       	rcall	.+0      	; 0xb44 <KPD_u8GetPressedKey+0x8>
     b44:	0f 92       	push	r0
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8Pressed=KPD_NO_Pressed;
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	6a c0       	rjmp	.+212    	; 0xc26 <KPD_u8GetPressedKey+0xea>
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	e0 57       	subi	r30, 0x70	; 112
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	90 81       	ld	r25, Z
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	69 2f       	mov	r22, r25
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     b6a:	1a 82       	std	Y+2, r1	; 0x02
     b6c:	49 c0       	rjmp	.+146    	; 0xc00 <KPD_u8GetPressedKey+0xc4>
		{
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	ed 56       	subi	r30, 0x6D	; 109
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	90 81       	ld	r25, Z
     b7c:	9e 01       	movw	r18, r28
     b7e:	2c 5f       	subi	r18, 0xFC	; 252
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	69 2f       	mov	r22, r25
     b86:	a9 01       	movw	r20, r18
     b88:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_GETpinVal>
			if(DIO_LOW==ROW_PIN_State)
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	88 23       	and	r24, r24
     b90:	a1 f5       	brne	.+104    	; 0xbfa <KPD_u8GetPressedKey+0xbe>
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	48 2f       	mov	r20, r24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	c9 01       	movw	r24, r18
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	84 0f       	add	r24, r20
     baa:	95 1f       	adc	r25, r21
     bac:	fc 01       	movw	r30, r24
     bae:	ea 56       	subi	r30, 0x6A	; 106
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	80 81       	ld	r24, Z
     bb4:	8b 83       	std	Y+3, r24	; 0x03
     bb6:	0f c0       	rjmp	.+30     	; 0xbd6 <KPD_u8GetPressedKey+0x9a>
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fc 01       	movw	r30, r24
     bc0:	ed 56       	subi	r30, 0x6D	; 109
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	90 81       	ld	r25, Z
     bc6:	9e 01       	movw	r18, r28
     bc8:	2c 5f       	subi	r18, 0xFC	; 252
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	69 2f       	mov	r22, r25
     bd0:	a9 01       	movw	r20, r18
     bd2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_GETpinVal>
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
			if(DIO_LOW==ROW_PIN_State)
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	88 23       	and	r24, r24
     bda:	71 f3       	breq	.-36     	; 0xbb8 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
				}
				//_delay_ms(25);
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	e0 57       	subi	r30, 0x70	; 112
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	90 81       	ld	r25, Z
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	69 2f       	mov	r22, r25
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
				return local_u8Pressed;
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	8d 83       	std	Y+5, r24	; 0x05
     bf8:	1c c0       	rjmp	.+56     	; 0xc32 <KPD_u8GetPressedKey+0xf6>

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	8a 83       	std	Y+2, r24	; 0x02
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	08 f4       	brcc	.+2      	; 0xc08 <KPD_u8GetPressedKey+0xcc>
     c06:	b3 cf       	rjmp	.-154    	; 0xb6e <KPD_u8GetPressedKey+0x32>
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
				return local_u8Pressed;
			}
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	e0 57       	subi	r30, 0x70	; 112
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	90 81       	ld	r25, Z
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	69 2f       	mov	r22, r25
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	83 30       	cpi	r24, 0x03	; 3
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <KPD_u8GetPressedKey+0xf2>
     c2c:	92 cf       	rjmp	.-220    	; 0xb52 <KPD_u8GetPressedKey+0x16>
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
	}

	return local_u8Pressed;
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	8d 83       	std	Y+5, r24	; 0x05
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <BTN_vidInit>:
#include "../../02-MCAL/DIO/DIO_interface.h"
#include "Button.h"
#include "ButtonConfig.h"

void BTN_vidInit(BTN_Num_t btn)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <BTN_vidInit+0x6>
     c4a:	0f 92       	push	r0
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	89 83       	std	Y+1, r24	; 0x01
    switch (btn)
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3b 83       	std	Y+3, r19	; 0x03
     c5a:	2a 83       	std	Y+2, r18	; 0x02
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	31 f0       	breq	.+12     	; 0xc70 <BTN_vidInit+0x2c>
     c64:	2a 81       	ldd	r18, Y+2	; 0x02
     c66:	3b 81       	ldd	r19, Y+3	; 0x03
     c68:	21 30       	cpi	r18, 0x01	; 1
     c6a:	31 05       	cpc	r19, r1
     c6c:	39 f0       	breq	.+14     	; 0xc7c <BTN_vidInit+0x38>
     c6e:	0b c0       	rjmp	.+22     	; 0xc86 <BTN_vidInit+0x42>
    {
    case BTN_0:
        DIO_SETpinDir(BTN_0_PORT, BTN_0_PIN, DIO_INPUT);
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <BTN_vidInit+0x42>
        {
            // do nothing
        }
        break;
    case BTN_1:
        DIO_SETpinDir(BTN_1_PORT, BTN_1_PIN, DIO_INPUT);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
        }
        break;
    default:
        break;
    }
}
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <BTN_u8IsPressed>:

uint8_t BTN_u8IsPressed(BTN_Num_t btn)
{   uint16_t counter= 0;
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	28 97       	sbiw	r28, 0x08	; 8
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	8d 83       	std	Y+5, r24	; 0x05
     ca8:	1a 82       	std	Y+2, r1	; 0x02
     caa:	19 82       	std	Y+1, r1	; 0x01
    uint8_t prev_status = 0;
     cac:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t status = 1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8c 83       	std	Y+4, r24	; 0x04

    switch (btn)
     cb2:	8d 81       	ldd	r24, Y+5	; 0x05
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	38 87       	std	Y+8, r19	; 0x08
     cba:	2f 83       	std	Y+7, r18	; 0x07
     cbc:	8f 81       	ldd	r24, Y+7	; 0x07
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <BTN_u8IsPressed+0x3e>
     cc4:	2f 81       	ldd	r18, Y+7	; 0x07
     cc6:	38 85       	ldd	r19, Y+8	; 0x08
     cc8:	21 30       	cpi	r18, 0x01	; 1
     cca:	31 05       	cpc	r19, r1
     ccc:	21 f1       	breq	.+72     	; 0xd16 <BTN_u8IsPressed+0x84>
     cce:	46 c0       	rjmp	.+140    	; 0xd5c <BTN_u8IsPressed+0xca>
    {
    case BTN_0:
        while (1)
        {
            DIO_GETpinVal(BTN_0_PORT, BTN_0_PIN,&prev_status);
     cd0:	9e 01       	movw	r18, r28
     cd2:	2d 5f       	subi	r18, 0xFD	; 253
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	64 e0       	ldi	r22, 0x04	; 4
     cda:	a9 01       	movw	r20, r18
     cdc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_GETpinVal>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <BTN_u8IsPressed+0x5a>
            while (counter < 42000)  //loop to perform a delay
            {
                counter++;    
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
    {
    case BTN_0:
        while (1)
        {
            DIO_GETpinVal(BTN_0_PORT, BTN_0_PIN,&prev_status);
            while (counter < 42000)  //loop to perform a delay
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	34 ea       	ldi	r19, 0xA4	; 164
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	93 07       	cpc	r25, r19
     cf6:	a8 f3       	brcs	.-22     	; 0xce2 <BTN_u8IsPressed+0x50>
            {
                counter++;    
            }
            DIO_GETpinVal(BTN_0_PORT, BTN_0_PIN,&status);
     cf8:	9e 01       	movw	r18, r28
     cfa:	2c 5f       	subi	r18, 0xFC	; 252
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	64 e0       	ldi	r22, 0x04	; 4
     d02:	a9 01       	movw	r20, r18
     d04:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_GETpinVal>
            
            if (status == prev_status)
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	98 17       	cp	r25, r24
     d0e:	01 f7       	brne	.-64     	; 0xcd0 <BTN_u8IsPressed+0x3e>
            }
        }
        
        if (BTN_0_RESISTOR == BTN_PULL_DOWN_EXT)
        {
            return status;
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	8e 83       	std	Y+6, r24	; 0x06
     d14:	25 c0       	rjmp	.+74     	; 0xd60 <BTN_u8IsPressed+0xce>
        }

    case BTN_1:
        while (1)
        {
            DIO_GETpinVal(BTN_1_PORT, BTN_1_PIN,&prev_status);
     d16:	9e 01       	movw	r18, r28
     d18:	2d 5f       	subi	r18, 0xFD	; 253
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	62 e0       	ldi	r22, 0x02	; 2
     d20:	a9 01       	movw	r20, r18
     d22:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_GETpinVal>
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <BTN_u8IsPressed+0xa0>
            while (counter < 42000)  //loop to perform a delay
            {
                counter++;    
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01

    case BTN_1:
        while (1)
        {
            DIO_GETpinVal(BTN_1_PORT, BTN_1_PIN,&prev_status);
            while (counter < 42000)  //loop to perform a delay
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	24 ea       	ldi	r18, 0xA4	; 164
     d38:	80 31       	cpi	r24, 0x10	; 16
     d3a:	92 07       	cpc	r25, r18
     d3c:	a8 f3       	brcs	.-22     	; 0xd28 <BTN_u8IsPressed+0x96>
            {
                counter++;    
            }
            DIO_GETpinVal(BTN_1_PORT, BTN_1_PIN,&status);
     d3e:	9e 01       	movw	r18, r28
     d40:	2c 5f       	subi	r18, 0xFC	; 252
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	62 e0       	ldi	r22, 0x02	; 2
     d48:	a9 01       	movw	r20, r18
     d4a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_GETpinVal>
            
            if (status == prev_status)
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	98 17       	cp	r25, r24
     d54:	01 f7       	brne	.-64     	; 0xd16 <BTN_u8IsPressed+0x84>
                break;
            }
        }
        if (BTN_1_RESISTOR == BTN_PULL_DOWN_EXT)
        {
            return status;
     d56:	3c 81       	ldd	r19, Y+4	; 0x04
     d58:	3e 83       	std	Y+6, r19	; 0x06
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <BTN_u8IsPressed+0xce>
        }
        break;
    default:
        break;
    }
    return status;
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	8e 83       	std	Y+6, r24	; 0x06
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
}
     d62:	28 96       	adiw	r28, 0x08	; 8
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TIMER_vidTimer0Init>:
void static (*CallBack_Timer0OVF)(void) = NULL_PTR;

static uint8_t gu8_intial_value = 0;

void TIMER_vidTimer0Init(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62


    // setting waveform generation mode  ctc or normal
#if ( TIMER_0_MODE == NORMAL)
    TCCR0 = 0;
     d7c:	e3 e5       	ldi	r30, 0x53	; 83
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	10 82       	st	Z, r1
    if( TIMER_0_OVF_INT == STD_ON){
        TIMSK |= 1;
     d82:	a9 e5       	ldi	r26, 0x59	; 89
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e9 e5       	ldi	r30, 0x59	; 89
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	8c 93       	st	X, r24
    {
        //do nothing
    }
#endif

}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <TIMER_vidTimer0Start>:


void TIMER_vidTimer0Start(uint8_t intial_value){
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	89 83       	std	Y+1, r24	; 0x01
    TIMER_vidTimer0SetInitValue(intial_value);           // setting intial value
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMER_vidTimer0SetInitValue>
    TCCR0 |= TIMER_0_PRESCALER;    // setting the prescaler
     da8:	a3 e5       	ldi	r26, 0x53	; 83
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e3 e5       	ldi	r30, 0x53	; 83
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	83 60       	ori	r24, 0x03	; 3
     db4:	8c 93       	st	X, r24
}
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <TIMER_vidTimer0Stop>:

void TIMER_vidTimer0Stop(void){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= ~(0b111);  // clearing the prescaler bits 
     dc6:	a3 e5       	ldi	r26, 0x53	; 83
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e3 e5       	ldi	r30, 0x53	; 83
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 7f       	andi	r24, 0xF8	; 248
     dd2:	8c 93       	st	X, r24
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <TIMER_u8Timer0_OVFflag>:

uint8_t TIMER_u8Timer0_OVFflag(void){
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,0);
     de2:	e8 e5       	ldi	r30, 0x58	; 88
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	81 70       	andi	r24, 0x01	; 1
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TIMER_u8Timer0_CTCflag>:

uint8_t TIMER_u8Timer0_CTCflag(void){
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,1);
     df8:	e8 e5       	ldi	r30, 0x58	; 88
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	86 95       	lsr	r24
     e00:	81 70       	andi	r24, 0x01	; 1
}
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <TIMER_vidTimer0SetInitValue>:

void TIMER_vidTimer0SetInitValue(uint8_t intial_value){
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	0f 92       	push	r0
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	89 83       	std	Y+1, r24	; 0x01
    gu8_intial_value = intial_value ;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	80 93 a5 00 	sts	0x00A5, r24
    TCNT0  = gu8_intial_value; 
     e1a:	e2 e5       	ldi	r30, 0x52	; 82
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 91 a5 00 	lds	r24, 0x00A5
     e22:	80 83       	st	Z, r24
}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <SetCallBack_Timer0CTC>:


void SetCallBack_Timer0CTC(void(*func)(void)){
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <SetCallBack_Timer0CTC+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0CTC=func;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	90 93 a2 00 	sts	0x00A2, r25
     e42:	80 93 a1 00 	sts	0x00A1, r24
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <SetCallBack_Timer0OVF>:


void SetCallBack_Timer0OVF(void(*func)(void)){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <SetCallBack_Timer0OVF+0x6>
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0OVF=func;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	90 93 a4 00 	sts	0x00A4, r25
     e66:	80 93 a3 00 	sts	0x00A3, r24
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <__vector_10>:


void __vector_10(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_10(void){
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
    if (CallBack_Timer0CTC != NULL_PTR)
     e9e:	80 91 a1 00 	lds	r24, 0x00A1
     ea2:	90 91 a2 00 	lds	r25, 0x00A2
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	29 f0       	breq	.+10     	; 0xeb4 <__vector_10+0x40>
    {
        CallBack_Timer0CTC();
     eaa:	e0 91 a1 00 	lds	r30, 0x00A1
     eae:	f0 91 a2 00 	lds	r31, 0x00A2
     eb2:	09 95       	icall
    }
    

}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <__vector_11>:

void __vector_11(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_11(void){
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
    TCNT0  = gu8_intial_value;
     f04:	e2 e5       	ldi	r30, 0x52	; 82
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 91 a5 00 	lds	r24, 0x00A5
     f0c:	80 83       	st	Z, r24
 if (CallBack_Timer0OVF != NULL_PTR)
     f0e:	80 91 a3 00 	lds	r24, 0x00A3
     f12:	90 91 a4 00 	lds	r25, 0x00A4
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	29 f0       	breq	.+10     	; 0xf24 <__vector_11+0x4a>
    {
        CallBack_Timer0OVF();
     f1a:	e0 91 a3 00 	lds	r30, 0x00A3
     f1e:	f0 91 a4 00 	lds	r31, 0x00A4
     f22:	09 95       	icall
    }

}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <PWM_vidInit>:


static uint8_t PWM_timer_count = 0;
static uint8_t PWM_dutyCycle=0;

void PWM_vidInit(void){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    SetCallBack_Timer0OVF(PWM_vidstart);
     f52:	8f eb       	ldi	r24, 0xBF	; 191
     f54:	97 e0       	ldi	r25, 0x07	; 7
     f56:	0e 94 28 07 	call	0xe50	; 0xe50 <SetCallBack_Timer0OVF>
    TIMER_vidTimer0Init();
     f5a:	0e 94 ba 06 	call	0xd74	; 0xd74 <TIMER_vidTimer0Init>
    DIO_SETpinDir(PWM_PORT1 , PWM_PIN1 , DIO_OUTPUT );
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	64 e0       	ldi	r22, 0x04	; 4
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
    DIO_SETpinDir(PWM_PORT2 , PWM_PIN2 , DIO_OUTPUT );
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	65 e0       	ldi	r22, 0x05	; 5
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_SETpinDir>
   // DIO_vidSetPinDirection(PWM_PORT3 , PWM_PIN3 , OUTPUT );
    TIMER_vidTimer0Start(PWM_INTIAL_TIMER_VALUE);
     f72:	87 ee       	ldi	r24, 0xE7	; 231
     f74:	0e 94 cb 06 	call	0xd96	; 0xd96 <TIMER_vidTimer0Start>
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <PWM_vidstart>:

// the callback function when the timer overflow 
void PWM_vidstart(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
    PWM_timer_count++;
     f86:	80 91 a6 00 	lds	r24, 0x00A6
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	80 93 a6 00 	sts	0x00A6, r24
    if (PWM_timer_count == PWM_dutyCycle)
     f90:	90 91 a6 00 	lds	r25, 0x00A6
     f94:	80 91 a7 00 	lds	r24, 0x00A7
     f98:	98 17       	cp	r25, r24
     f9a:	59 f4       	brne	.+22     	; 0xfb2 <PWM_vidstart+0x34>
    {
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_LOW);
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_LOW);
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	65 e0       	ldi	r22, 0x05	; 5
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
     fb0:	10 c0       	rjmp	.+32     	; 0xfd2 <PWM_vidstart+0x54>
       // DIO_vidSetPinValue(PWM_PORT3 , PWM_PIN3 , STD_LOW);
        
    }
    else if(PWM_timer_count >= 100)
     fb2:	80 91 a6 00 	lds	r24, 0x00A6
     fb6:	84 36       	cpi	r24, 0x64	; 100
     fb8:	60 f0       	brcs	.+24     	; 0xfd2 <PWM_vidstart+0x54>
    {
        PWM_timer_count = 0;
     fba:	10 92 a6 00 	sts	0x00A6, r1
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_HIGH);
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_HIGH);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	65 e0       	ldi	r22, 0x05	; 5
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SETpinVal>
    }
    else
    {
        // do nothing
    }
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <PWM_SetDutyCycle>:

//function to change dutycycle
void PWM_SetDutyCycle(uint8_t dutyc){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
    PWM_dutyCycle = dutyc;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	80 93 a7 00 	sts	0x00A7, r24
}
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <GlobalInerruptEnable>:
#include "Interrupt_interface.h"
#include "Interrupt_private.h"
#include "Interrupt_config.h"

void GlobalInerruptEnable(void)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     ffa:	af e5       	ldi	r26, 0x5F	; 95
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ef e5       	ldi	r30, 0x5F	; 95
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	8c 93       	st	X, r24
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <DIO_SETpinDir>:
#include "../../01-LIB/BIT_MATH.h"
#include "../../01-LIB/STD_TYPES.h"
#include "DIO_register.h"
#include "DIO_interface.h"

uint8_t DIO_SETpinDir(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_STAT){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	28 97       	sbiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	6b 83       	std	Y+3, r22	; 0x03
    1026:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	08 f0       	brcs	.+2      	; 0x1034 <DIO_SETpinDir+0x26>
    1032:	f1 c0       	rjmp	.+482    	; 0x1216 <DIO_SETpinDir+0x208>
	{
		/*If the direction of the pin is output*/
		if(u8_STAT==DIO_OUTPUT)
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	09 f0       	breq	.+2      	; 0x103c <DIO_SETpinDir+0x2e>
    103a:	71 c0       	rjmp	.+226    	; 0x111e <DIO_SETpinDir+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	38 87       	std	Y+8, r19	; 0x08
    1044:	2f 83       	std	Y+7, r18	; 0x07
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	49 f1       	breq	.+82     	; 0x10a2 <DIO_SETpinDir+0x94>
    1050:	2f 81       	ldd	r18, Y+7	; 0x07
    1052:	38 85       	ldd	r19, Y+8	; 0x08
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <DIO_SETpinDir+0x56>
    105a:	8f 81       	ldd	r24, Y+7	; 0x07
    105c:	98 85       	ldd	r25, Y+8	; 0x08
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	61 f0       	breq	.+24     	; 0x107a <DIO_SETpinDir+0x6c>
    1062:	5b c0       	rjmp	.+182    	; 0x111a <DIO_SETpinDir+0x10c>
    1064:	2f 81       	ldd	r18, Y+7	; 0x07
    1066:	38 85       	ldd	r19, Y+8	; 0x08
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	71 f1       	breq	.+92     	; 0x10ca <DIO_SETpinDir+0xbc>
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	98 85       	ldd	r25, Y+8	; 0x08
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	e9 f1       	breq	.+122    	; 0x10f2 <DIO_SETpinDir+0xe4>
    1078:	50 c0       	rjmp	.+160    	; 0x111a <DIO_SETpinDir+0x10c>
			{
			case DIO_PORTA: SET_BIT(DDRA,u8_PIN);break;
    107a:	aa e3       	ldi	r26, 0x3A	; 58
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_SETpinDir+0x8a>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_SETpinDir+0x86>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	bb c0       	rjmp	.+374    	; 0x1218 <DIO_SETpinDir+0x20a>
			case DIO_PORTB: SET_BIT(DDRB,u8_PIN);break;
    10a2:	a7 e3       	ldi	r26, 0x37	; 55
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e7 e3       	ldi	r30, 0x37	; 55
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_SETpinDir+0xb2>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_SETpinDir+0xae>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	a7 c0       	rjmp	.+334    	; 0x1218 <DIO_SETpinDir+0x20a>
			case DIO_PORTC: SET_BIT(DDRC,u8_PIN);break;
    10ca:	a4 e3       	ldi	r26, 0x34	; 52
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e4 e3       	ldi	r30, 0x34	; 52
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_SETpinDir+0xda>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_SETpinDir+0xd6>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	93 c0       	rjmp	.+294    	; 0x1218 <DIO_SETpinDir+0x20a>
			case DIO_PORTD: SET_BIT(DDRD,u8_PIN);break;
    10f2:	a1 e3       	ldi	r26, 0x31	; 49
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e1 e3       	ldi	r30, 0x31	; 49
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_SETpinDir+0x102>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_SETpinDir+0xfe>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	7f c0       	rjmp	.+254    	; 0x1218 <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	7d c0       	rjmp	.+250    	; 0x1218 <DIO_SETpinDir+0x20a>
			}
		}
		/*If the direction of the pin is input*/
		else if(u8_STAT==DIO_INPUT)
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	88 23       	and	r24, r24
    1122:	09 f0       	breq	.+2      	; 0x1126 <DIO_SETpinDir+0x118>
    1124:	76 c0       	rjmp	.+236    	; 0x1212 <DIO_SETpinDir+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3e 83       	std	Y+6, r19	; 0x06
    112e:	2d 83       	std	Y+5, r18	; 0x05
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	91 05       	cpc	r25, r1
    1138:	59 f1       	breq	.+86     	; 0x1190 <DIO_SETpinDir+0x182>
    113a:	2d 81       	ldd	r18, Y+5	; 0x05
    113c:	3e 81       	ldd	r19, Y+6	; 0x06
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	2c f4       	brge	.+10     	; 0x114e <DIO_SETpinDir+0x140>
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	69 f0       	breq	.+26     	; 0x1166 <DIO_SETpinDir+0x158>
    114c:	60 c0       	rjmp	.+192    	; 0x120e <DIO_SETpinDir+0x200>
    114e:	2d 81       	ldd	r18, Y+5	; 0x05
    1150:	3e 81       	ldd	r19, Y+6	; 0x06
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	89 f1       	breq	.+98     	; 0x11ba <DIO_SETpinDir+0x1ac>
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_SETpinDir+0x156>
    1162:	40 c0       	rjmp	.+128    	; 0x11e4 <DIO_SETpinDir+0x1d6>
    1164:	54 c0       	rjmp	.+168    	; 0x120e <DIO_SETpinDir+0x200>
			{
			case DIO_PORTA: CLR_BIT(DDRA,u8_PIN);break;
    1166:	aa e3       	ldi	r26, 0x3A	; 58
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_SETpinDir+0x176>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_SETpinDir+0x172>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	44 c0       	rjmp	.+136    	; 0x1218 <DIO_SETpinDir+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB,u8_PIN);break;
    1190:	a7 e3       	ldi	r26, 0x37	; 55
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e7 e3       	ldi	r30, 0x37	; 55
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_SETpinDir+0x1a0>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_SETpinDir+0x19c>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	2f c0       	rjmp	.+94     	; 0x1218 <DIO_SETpinDir+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC,u8_PIN);break;
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_SETpinDir+0x1ca>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_SETpinDir+0x1c6>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	1a c0       	rjmp	.+52     	; 0x1218 <DIO_SETpinDir+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD,u8_PIN);break;
    11e4:	a1 e3       	ldi	r26, 0x31	; 49
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e1 e3       	ldi	r30, 0x31	; 49
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_SETpinDir+0x1f4>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_SETpinDir+0x1f0>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;break;
    120e:	19 82       	std	Y+1, r1	; 0x01
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <DIO_SETpinDir+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
    1212:	19 82       	std	Y+1, r1	; 0x01
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <DIO_SETpinDir+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
    1216:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
}
    121a:	28 96       	adiw	r28, 0x08	; 8
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <DIO_SETportDir>:

uint8_t DIO_SETportDir(uint8_t u8_PORT,uint8_t u8_STAT)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <DIO_SETportDir+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_SETportDir+0x8>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3d 83       	std	Y+5, r19	; 0x05
    124a:	2c 83       	std	Y+4, r18	; 0x04
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	d1 f0       	breq	.+52     	; 0x128a <DIO_SETportDir+0x5e>
    1256:	2c 81       	ldd	r18, Y+4	; 0x04
    1258:	3d 81       	ldd	r19, Y+5	; 0x05
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <DIO_SETportDir+0x3e>
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	61 f0       	breq	.+24     	; 0x1280 <DIO_SETportDir+0x54>
    1268:	1f c0       	rjmp	.+62     	; 0x12a8 <DIO_SETportDir+0x7c>
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <DIO_SETportDir+0x68>
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <DIO_SETportDir+0x72>
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <DIO_SETportDir+0x7c>
	{
		case DIO_PORTA: DDRA=u8_STAT;break;
    1280:	ea e3       	ldi	r30, 0x3A	; 58
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	80 83       	st	Z, r24
    1288:	10 c0       	rjmp	.+32     	; 0x12aa <DIO_SETportDir+0x7e>
		case DIO_PORTB: DDRB=u8_STAT;break;
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	80 83       	st	Z, r24
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <DIO_SETportDir+0x7e>
		case DIO_PORTC: DDRC=u8_STAT;break;
    1294:	e4 e3       	ldi	r30, 0x34	; 52
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	80 83       	st	Z, r24
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <DIO_SETportDir+0x7e>
		case DIO_PORTD: DDRD=u8_STAT;break;
    129e:	e1 e3       	ldi	r30, 0x31	; 49
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	80 83       	st	Z, r24
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <DIO_SETportDir+0x7e>
		default:local_u8Error=NOK;break;
    12a8:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <DIO_SETpinVal>:

uint8_t DIO_SETpinVal(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_VAL){
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	28 97       	sbiw	r28, 0x08	; 8
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
    12d4:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <DIO_SETpinVal+0x26>
    12e0:	f1 c0       	rjmp	.+482    	; 0x14c4 <DIO_SETpinVal+0x208>
	{
		/*If the chosen value is high*/
		if(u8_VAL==DIO_HIGH)
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <DIO_SETpinVal+0x2e>
    12e8:	71 c0       	rjmp	.+226    	; 0x13cc <DIO_SETpinVal+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	38 87       	std	Y+8, r19	; 0x08
    12f2:	2f 83       	std	Y+7, r18	; 0x07
    12f4:	8f 81       	ldd	r24, Y+7	; 0x07
    12f6:	98 85       	ldd	r25, Y+8	; 0x08
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	49 f1       	breq	.+82     	; 0x1350 <DIO_SETpinVal+0x94>
    12fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1300:	38 85       	ldd	r19, Y+8	; 0x08
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <DIO_SETpinVal+0x56>
    1308:	8f 81       	ldd	r24, Y+7	; 0x07
    130a:	98 85       	ldd	r25, Y+8	; 0x08
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <DIO_SETpinVal+0x6c>
    1310:	5b c0       	rjmp	.+182    	; 0x13c8 <DIO_SETpinVal+0x10c>
    1312:	2f 81       	ldd	r18, Y+7	; 0x07
    1314:	38 85       	ldd	r19, Y+8	; 0x08
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	71 f1       	breq	.+92     	; 0x1378 <DIO_SETpinVal+0xbc>
    131c:	8f 81       	ldd	r24, Y+7	; 0x07
    131e:	98 85       	ldd	r25, Y+8	; 0x08
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	e9 f1       	breq	.+122    	; 0x13a0 <DIO_SETpinVal+0xe4>
    1326:	50 c0       	rjmp	.+160    	; 0x13c8 <DIO_SETpinVal+0x10c>
			{
			case DIO_PORTA: SET_BIT(PORTA,u8_PIN);break;
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_SETpinVal+0x8a>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_SETpinVal+0x86>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	bb c0       	rjmp	.+374    	; 0x14c6 <DIO_SETpinVal+0x20a>
			case DIO_PORTB: SET_BIT(PORTB,u8_PIN);break;
    1350:	a8 e3       	ldi	r26, 0x38	; 56
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_SETpinVal+0xb2>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_SETpinVal+0xae>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	a7 c0       	rjmp	.+334    	; 0x14c6 <DIO_SETpinVal+0x20a>
			case DIO_PORTC: SET_BIT(PORTC,u8_PIN);break;
    1378:	a5 e3       	ldi	r26, 0x35	; 53
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e3       	ldi	r30, 0x35	; 53
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_SETpinVal+0xda>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_SETpinVal+0xd6>
    139a:	84 2b       	or	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	93 c0       	rjmp	.+294    	; 0x14c6 <DIO_SETpinVal+0x20a>
			case DIO_PORTD: SET_BIT(PORTD,u8_PIN);break;
    13a0:	a2 e3       	ldi	r26, 0x32	; 50
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e2 e3       	ldi	r30, 0x32	; 50
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_SETpinVal+0x102>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_SETpinVal+0xfe>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	7f c0       	rjmp	.+254    	; 0x14c6 <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	7d c0       	rjmp	.+250    	; 0x14c6 <DIO_SETpinVal+0x20a>
			}
		}
		/*If the chosen value is low*/
		else if(u8_VAL==DIO_LOW)
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	88 23       	and	r24, r24
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <DIO_SETpinVal+0x118>
    13d2:	76 c0       	rjmp	.+236    	; 0x14c0 <DIO_SETpinVal+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	59 f1       	breq	.+86     	; 0x143e <DIO_SETpinVal+0x182>
    13e8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ea:	3e 81       	ldd	r19, Y+6	; 0x06
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	2c f4       	brge	.+10     	; 0x13fc <DIO_SETpinVal+0x140>
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	69 f0       	breq	.+26     	; 0x1414 <DIO_SETpinVal+0x158>
    13fa:	60 c0       	rjmp	.+192    	; 0x14bc <DIO_SETpinVal+0x200>
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	89 f1       	breq	.+98     	; 0x1468 <DIO_SETpinVal+0x1ac>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <DIO_SETpinVal+0x156>
    1410:	40 c0       	rjmp	.+128    	; 0x1492 <DIO_SETpinVal+0x1d6>
    1412:	54 c0       	rjmp	.+168    	; 0x14bc <DIO_SETpinVal+0x200>
			{
			case DIO_PORTA: CLR_BIT(PORTA,u8_PIN);break;
    1414:	ab e3       	ldi	r26, 0x3B	; 59
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	eb e3       	ldi	r30, 0x3B	; 59
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_SETpinVal+0x176>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_SETpinVal+0x172>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	44 c0       	rjmp	.+136    	; 0x14c6 <DIO_SETpinVal+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB,u8_PIN);break;
    143e:	a8 e3       	ldi	r26, 0x38	; 56
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e8 e3       	ldi	r30, 0x38	; 56
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_SETpinVal+0x1a0>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_SETpinVal+0x19c>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	2f c0       	rjmp	.+94     	; 0x14c6 <DIO_SETpinVal+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC,u8_PIN);break;
    1468:	a5 e3       	ldi	r26, 0x35	; 53
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_SETpinVal+0x1ca>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_SETpinVal+0x1c6>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	1a c0       	rjmp	.+52     	; 0x14c6 <DIO_SETpinVal+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD,u8_PIN);break;
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_SETpinVal+0x1f4>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_SETpinVal+0x1f0>
    14b4:	80 95       	com	r24
    14b6:	84 23       	and	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <DIO_SETpinVal+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
    14c0:	19 82       	std	Y+1, r1	; 0x01
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <DIO_SETpinVal+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
    14c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	28 96       	adiw	r28, 0x08	; 8
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <DIO_SETportVal>:

uint8_t DIO_SETportVal(uint8_t u8_PORT,uint8_t u8_VAL)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_SETportVal+0x6>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_SETportVal+0x8>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3d 83       	std	Y+5, r19	; 0x05
    14f8:	2c 83       	std	Y+4, r18	; 0x04
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	d1 f0       	breq	.+52     	; 0x1538 <DIO_SETportVal+0x5e>
    1504:	2c 81       	ldd	r18, Y+4	; 0x04
    1506:	3d 81       	ldd	r19, Y+5	; 0x05
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	2c f4       	brge	.+10     	; 0x1518 <DIO_SETportVal+0x3e>
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	61 f0       	breq	.+24     	; 0x152e <DIO_SETportVal+0x54>
    1516:	1f c0       	rjmp	.+62     	; 0x1556 <DIO_SETportVal+0x7c>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <DIO_SETportVal+0x68>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	81 f0       	breq	.+32     	; 0x154c <DIO_SETportVal+0x72>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <DIO_SETportVal+0x7c>
	{
		case DIO_PORTA: PORTA=u8_VAL;break;
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	80 83       	st	Z, r24
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <DIO_SETportVal+0x7e>
		case DIO_PORTB: PORTB=u8_VAL;break;
    1538:	e8 e3       	ldi	r30, 0x38	; 56
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	80 83       	st	Z, r24
    1540:	0b c0       	rjmp	.+22     	; 0x1558 <DIO_SETportVal+0x7e>
		case DIO_PORTC: PORTC=u8_VAL;break;
    1542:	e5 e3       	ldi	r30, 0x35	; 53
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	80 83       	st	Z, r24
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <DIO_SETportVal+0x7e>
		case DIO_PORTD: PORTD=u8_VAL;break;
    154c:	e2 e3       	ldi	r30, 0x32	; 50
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	80 83       	st	Z, r24
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <DIO_SETportVal+0x7e>
		default:local_u8Error=NOK;break;
    1556:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <DIO_GETpinVal>:

uint8_t DIO_GETpinVal(uint8_t u8_PORT,uint8_t u8_PIN, uint8_t *u8p_RetVal){
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	27 97       	sbiw	r28, 0x07	; 7
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	8a 83       	std	Y+2, r24	; 0x02
    1580:	6b 83       	std	Y+3, r22	; 0x03
    1582:	5d 83       	std	Y+5, r21	; 0x05
    1584:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	88 30       	cpi	r24, 0x08	; 8
    158e:	08 f0       	brcs	.+2      	; 0x1592 <DIO_GETpinVal+0x28>
    1590:	73 c0       	rjmp	.+230    	; 0x1678 <DIO_GETpinVal+0x10e>
	{
		switch(u8_PORT)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3f 83       	std	Y+7, r19	; 0x07
    159a:	2e 83       	std	Y+6, r18	; 0x06
    159c:	4e 81       	ldd	r20, Y+6	; 0x06
    159e:	5f 81       	ldd	r21, Y+7	; 0x07
    15a0:	41 30       	cpi	r20, 0x01	; 1
    15a2:	51 05       	cpc	r21, r1
    15a4:	59 f1       	breq	.+86     	; 0x15fc <DIO_GETpinVal+0x92>
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	91 05       	cpc	r25, r1
    15ae:	34 f4       	brge	.+12     	; 0x15bc <DIO_GETpinVal+0x52>
    15b0:	2e 81       	ldd	r18, Y+6	; 0x06
    15b2:	3f 81       	ldd	r19, Y+7	; 0x07
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <DIO_GETpinVal+0x6a>
    15ba:	5c c0       	rjmp	.+184    	; 0x1674 <DIO_GETpinVal+0x10a>
    15bc:	4e 81       	ldd	r20, Y+6	; 0x06
    15be:	5f 81       	ldd	r21, Y+7	; 0x07
    15c0:	42 30       	cpi	r20, 0x02	; 2
    15c2:	51 05       	cpc	r21, r1
    15c4:	79 f1       	breq	.+94     	; 0x1624 <DIO_GETpinVal+0xba>
    15c6:	8e 81       	ldd	r24, Y+6	; 0x06
    15c8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <DIO_GETpinVal+0x68>
    15d0:	3d c0       	rjmp	.+122    	; 0x164c <DIO_GETpinVal+0xe2>
    15d2:	50 c0       	rjmp	.+160    	; 0x1674 <DIO_GETpinVal+0x10a>
		{
		/*Choose which port*/
		case DIO_PORTA: *u8p_RetVal=GET_BIT(PINA,u8_PIN);break;
    15d4:	e9 e3       	ldi	r30, 0x39	; 57
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_GETpinVal+0x82>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_GETpinVal+0x7e>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	ec 81       	ldd	r30, Y+4	; 0x04
    15f6:	fd 81       	ldd	r31, Y+5	; 0x05
    15f8:	80 83       	st	Z, r24
    15fa:	3f c0       	rjmp	.+126    	; 0x167a <DIO_GETpinVal+0x110>
		case DIO_PORTB: *u8p_RetVal=GET_BIT(PINB,u8_PIN);break;
    15fc:	e6 e3       	ldi	r30, 0x36	; 54
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_GETpinVal+0xaa>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_GETpinVal+0xa6>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	ec 81       	ldd	r30, Y+4	; 0x04
    161e:	fd 81       	ldd	r31, Y+5	; 0x05
    1620:	80 83       	st	Z, r24
    1622:	2b c0       	rjmp	.+86     	; 0x167a <DIO_GETpinVal+0x110>
		case DIO_PORTC: *u8p_RetVal=GET_BIT(PINC,u8_PIN);break;
    1624:	e3 e3       	ldi	r30, 0x33	; 51
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_GETpinVal+0xd2>
    1638:	55 95       	asr	r21
    163a:	47 95       	ror	r20
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_GETpinVal+0xce>
    1640:	ca 01       	movw	r24, r20
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	ec 81       	ldd	r30, Y+4	; 0x04
    1646:	fd 81       	ldd	r31, Y+5	; 0x05
    1648:	80 83       	st	Z, r24
    164a:	17 c0       	rjmp	.+46     	; 0x167a <DIO_GETpinVal+0x110>
		case DIO_PORTD: *u8p_RetVal=GET_BIT(PIND,u8_PIN);break;
    164c:	e0 e3       	ldi	r30, 0x30	; 48
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a9 01       	movw	r20, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_GETpinVal+0xfa>
    1660:	55 95       	asr	r21
    1662:	47 95       	ror	r20
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_GETpinVal+0xf6>
    1668:	ca 01       	movw	r24, r20
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	ec 81       	ldd	r30, Y+4	; 0x04
    166e:	fd 81       	ldd	r31, Y+5	; 0x05
    1670:	80 83       	st	Z, r24
    1672:	03 c0       	rjmp	.+6      	; 0x167a <DIO_GETpinVal+0x110>
		default: Local_u8Error=NOK;break;
    1674:	19 82       	std	Y+1, r1	; 0x01
    1676:	01 c0       	rjmp	.+2      	; 0x167a <DIO_GETpinVal+0x110>
		}
	}
	else
	{
		Local_u8Error=NOK;
    1678:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    167a:	89 81       	ldd	r24, Y+1	; 0x01
}
    167c:	27 96       	adiw	r28, 0x07	; 7
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <ADC_init>:
uint8_t* gu8_Reading;
uint8_t gu8_State=IDLE;
void(*CallbackNotification)(void);

void ADC_init(void)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRA,0);
    1696:	aa e3       	ldi	r26, 0x3A	; 58
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ea e3       	ldi	r30, 0x3A	; 58
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8e 7f       	andi	r24, 0xFE	; 254
    16a2:	8c 93       	st	X, r24
	/*Select Ref.*/
#if ADC_REF_SEL == ADC_AREF
	CLR_BIT(ADC_ADMUX,ADMUX_REFS0);
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
#elif ADC_REF_SEL == ADC_AVCC
	SET_BIT(ADC_ADMUX,ADMUX_REFS0);
    16a4:	a7 e2       	ldi	r26, 0x27	; 39
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e7 e2       	ldi	r30, 0x27	; 39
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	80 64       	ori	r24, 0x40	; 64
    16b0:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
    16b2:	a7 e2       	ldi	r26, 0x27	; 39
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e7 e2       	ldi	r30, 0x27	; 39
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8f 77       	andi	r24, 0x7F	; 127
    16be:	8c 93       	st	X, r24
#endif

	/*Select ADC Left Adjust Result*/
#if ADC_ADLAR_SEL == LEFT_ADJUST
	SET_BIT(ADC_ADMUX,ADMUX_ADLAR);
    16c0:	a7 e2       	ldi	r26, 0x27	; 39
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e7 e2       	ldi	r30, 0x27	; 39
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 62       	ori	r24, 0x20	; 32
    16cc:	8c 93       	st	X, r24
#elif ADC_ADLAR_SEL == RIGHT_ADJUST
	CLR_BIT(ADC_ADMUX,ADMUX_ADLAR);
#endif

	/*Select Prescalar*/
	ADC_ADCSRA&=PRESC_BIT_MASK;
    16ce:	a6 e2       	ldi	r26, 0x26	; 38
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e6 e2       	ldi	r30, 0x26	; 38
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	88 7f       	andi	r24, 0xF8	; 248
    16da:	8c 93       	st	X, r24
	ADC_ADCSRA|=ADC_PRESCLAR_SEL;
    16dc:	a6 e2       	ldi	r26, 0x26	; 38
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e6 e2       	ldi	r30, 0x26	; 38
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	87 60       	ori	r24, 0x07	; 7
    16e8:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADC_ADCSRA,ADCSRA_ADEN);
    16ea:	a6 e2       	ldi	r26, 0x26	; 38
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e6 e2       	ldi	r30, 0x26	; 38
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 68       	ori	r24, 0x80	; 128
    16f6:	8c 93       	st	X, r24
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <ADC_u8StartConversionSynch>:

uint8_t ADC_u8StartConversionSynch(uint8_t ADC_Channel,uint8_t* u8_Reading)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	28 97       	sbiw	r28, 0x08	; 8
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	8e 83       	std	Y+6, r24	; 0x06
    1714:	78 87       	std	Y+8, r23	; 0x08
    1716:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t local_u8Error=OK;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t local_u8Counter=0;
    171c:	19 82       	std	Y+1, r1	; 0x01
    171e:	1a 82       	std	Y+2, r1	; 0x02
    1720:	1b 82       	std	Y+3, r1	; 0x03
    1722:	1c 82       	std	Y+4, r1	; 0x04
	if(gu8_State == IDLE)
    1724:	80 91 9f 00 	lds	r24, 0x009F
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	09 f0       	breq	.+2      	; 0x172e <ADC_u8StartConversionSynch+0x30>
    172c:	5b c0       	rjmp	.+182    	; 0x17e4 <ADC_u8StartConversionSynch+0xe6>
	{
		gu8_State=BUSY;
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	80 93 9f 00 	sts	0x009F, r24
		/*Select Channel*/
		ADC_ADMUX&=MUX_BIT_MASK;
    1734:	a7 e2       	ldi	r26, 0x27	; 39
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e2       	ldi	r30, 0x27	; 39
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 7e       	andi	r24, 0xE0	; 224
    1740:	8c 93       	st	X, r24
		ADC_ADMUX|=ADC_Channel;
    1742:	a7 e2       	ldi	r26, 0x27	; 39
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 e2       	ldi	r30, 0x27	; 39
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	90 81       	ld	r25, Z
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	89 2b       	or	r24, r25
    1750:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    1752:	a6 e2       	ldi	r26, 0x26	; 38
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e6 e2       	ldi	r30, 0x26	; 38
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 64       	ori	r24, 0x40	; 64
    175e:	8c 93       	st	X, r24
    1760:	0b c0       	rjmp	.+22     	; 0x1778 <ADC_u8StartConversionSynch+0x7a>

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
		{
			local_u8Counter++;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	ab 81       	ldd	r26, Y+3	; 0x03
    1768:	bc 81       	ldd	r27, Y+4	; 0x04
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	a1 1d       	adc	r26, r1
    176e:	b1 1d       	adc	r27, r1
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	ab 83       	std	Y+3, r26	; 0x03
    1776:	bc 83       	std	Y+4, r27	; 0x04

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
    1778:	e6 e2       	ldi	r30, 0x26	; 38
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	82 95       	swap	r24
    1780:	8f 70       	andi	r24, 0x0F	; 15
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	81 70       	andi	r24, 0x01	; 1
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	61 f4       	brne	.+24     	; 0x17a6 <ADC_u8StartConversionSynch+0xa8>
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	ab 81       	ldd	r26, Y+3	; 0x03
    1794:	bc 81       	ldd	r27, Y+4	; 0x04
    1796:	80 35       	cpi	r24, 0x50	; 80
    1798:	23 ec       	ldi	r18, 0xC3	; 195
    179a:	92 07       	cpc	r25, r18
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	a2 07       	cpc	r26, r18
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	b2 07       	cpc	r27, r18
    17a4:	f1 f6       	brne	.-68     	; 0x1762 <ADC_u8StartConversionSynch+0x64>
		{
			local_u8Counter++;
		}

		if(local_u8Counter == ADC_TIMEOUT)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	ab 81       	ldd	r26, Y+3	; 0x03
    17ac:	bc 81       	ldd	r27, Y+4	; 0x04
    17ae:	80 35       	cpi	r24, 0x50	; 80
    17b0:	23 ec       	ldi	r18, 0xC3	; 195
    17b2:	92 07       	cpc	r25, r18
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	a2 07       	cpc	r26, r18
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	b2 07       	cpc	r27, r18
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <ADC_u8StartConversionSynch+0xc4>
		{
			local_u8Error=NOK;
    17be:	1d 82       	std	Y+5, r1	; 0x05
    17c0:	13 c0       	rjmp	.+38     	; 0x17e8 <ADC_u8StartConversionSynch+0xea>
		}
		else
		{
			/*Clear the ADC flag*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIF);
    17c2:	a6 e2       	ldi	r26, 0x26	; 38
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e6 e2       	ldi	r30, 0x26	; 38
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 61       	ori	r24, 0x10	; 16
    17ce:	8c 93       	st	X, r24

			/*Read the ADC value*/
			if(ADC_ADLAR_SEL == LEFT_ADJUST)
			{
				*u8_Reading=ADC_ADCH;
    17d0:	e5 e2       	ldi	r30, 0x25	; 37
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	ef 81       	ldd	r30, Y+7	; 0x07
    17d8:	f8 85       	ldd	r31, Y+8	; 0x08
    17da:	80 83       	st	Z, r24
				gu8_State=IDLE;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 9f 00 	sts	0x009F, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <ADC_u8StartConversionSynch+0xea>
			}
		}
	}
	else
	{
		local_u8Error=BUSY;
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8Error;
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17ea:	28 96       	adiw	r28, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <ADC_u8StartConversionASynch>:

uint8_t ADC_u8StartConversionASynch(uint8_t ADC_Channel,uint8_t* u8_Reading,void(*NotificFunc)(void))
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <ADC_u8StartConversionASynch+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <ADC_u8StartConversionASynch+0x8>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <ADC_u8StartConversionASynch+0xa>
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	7c 83       	std	Y+4, r23	; 0x04
    180e:	6b 83       	std	Y+3, r22	; 0x03
    1810:	5e 83       	std	Y+6, r21	; 0x06
    1812:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t local_u8Error=OK;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_State==IDLE)
    1818:	80 91 9f 00 	lds	r24, 0x009F
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	b9 f5       	brne	.+110    	; 0x188e <ADC_u8StartConversionASynch+0x92>
	{
		if((u8_Reading==NULL) || (NotificFunc == NULL))
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	21 f0       	breq	.+8      	; 0x1830 <ADC_u8StartConversionASynch+0x34>
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	11 f4       	brne	.+4      	; 0x1834 <ADC_u8StartConversionASynch+0x38>
		{
			local_u8Error=NOK;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	2f c0       	rjmp	.+94     	; 0x1892 <ADC_u8StartConversionASynch+0x96>
		}
		else
		{
			gu8_State=BUSY;
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	80 93 9f 00 	sts	0x009F, r24

			/*Select Channel*/
			ADC_ADMUX&=MUX_BIT_MASK;
    183a:	a7 e2       	ldi	r26, 0x27	; 39
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e7 e2       	ldi	r30, 0x27	; 39
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 7e       	andi	r24, 0xE0	; 224
    1846:	8c 93       	st	X, r24
			ADC_ADMUX|=ADC_Channel;
    1848:	a7 e2       	ldi	r26, 0x27	; 39
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e7 e2       	ldi	r30, 0x27	; 39
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	90 81       	ld	r25, Z
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	89 2b       	or	r24, r25
    1856:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    1858:	a6 e2       	ldi	r26, 0x26	; 38
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e6 e2       	ldi	r30, 0x26	; 38
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 64       	ori	r24, 0x40	; 64
    1864:	8c 93       	st	X, r24

			/*Enable Interrupt*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    1866:	a6 e2       	ldi	r26, 0x26	; 38
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e6 e2       	ldi	r30, 0x26	; 38
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	88 60       	ori	r24, 0x08	; 8
    1872:	8c 93       	st	X, r24

			gu8_Reading=u8_Reading;
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	90 93 0e 01 	sts	0x010E, r25
    187c:	80 93 0d 01 	sts	0x010D, r24
			CallbackNotification=NotificFunc;
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	90 93 10 01 	sts	0x0110, r25
    1888:	80 93 0f 01 	sts	0x010F, r24
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <ADC_u8StartConversionASynch+0x96>
		}
	}
	else
	{
		local_u8Error=BUSY;
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Error;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
}
    1894:	26 96       	adiw	r28, 0x06	; 6
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	/*Read ADC*/
	if(ADC_ADLAR_SEL == LEFT_ADJUST)
	{
		*gu8_Reading=ADC_ADCH;
    18d0:	a0 91 0d 01 	lds	r26, 0x010D
    18d4:	b0 91 0e 01 	lds	r27, 0x010E
    18d8:	e5 e2       	ldi	r30, 0x25	; 37
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8c 93       	st	X, r24
	{
		*gu8_Reading=ADC_ADCL;
	}

	/*ADC state IDLE*/
	gu8_State=IDLE;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 9f 00 	sts	0x009F, r24

	/*Call callback notification func*/
	CallbackNotification();
    18e6:	e0 91 0f 01 	lds	r30, 0x010F
    18ea:	f0 91 10 01 	lds	r31, 0x0110
    18ee:	09 95       	icall

	/*Disable the interrupt*/
	CLR_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    18f0:	a6 e2       	ldi	r26, 0x26	; 38
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e6 e2       	ldi	r30, 0x26	; 38
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	87 7f       	andi	r24, 0xF7	; 247
    18fc:	8c 93       	st	X, r24

}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <Det_ReportError>:
#include "Det.h"

static uint8_t index_row=0;

void Det_ReportError( uint8_t ModuleId , uint8_t ApiId)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <Det_ReportError+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
gu8arr_error[index_row][0]=ModuleId;
    1932:	80 91 a8 00 	lds	r24, 0x00A8
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	fc 01       	movw	r30, r24
    1940:	e7 55       	subi	r30, 0x57	; 87
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	80 83       	st	Z, r24
gu8arr_error[index_row][1]=ApiId;
    1948:	80 91 a8 00 	lds	r24, 0x00A8
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	fc 01       	movw	r30, r24
    1956:	e6 55       	subi	r30, 0x56	; 86
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	80 83       	st	Z, r24
index_row++;
    195e:	80 91 a8 00 	lds	r24, 0x00A8
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	80 93 a8 00 	sts	0x00A8, r24
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <main>:

#include "04-APP/APP_Interface.h";


int  main()
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	 APP_init();
    197a:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	 APP_Prog();
    197e:	0e 94 61 00 	call	0xc2	; 0xc2 <APP_Prog>

	 return 0;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <__mulsi3>:
    198c:	62 9f       	mul	r22, r18
    198e:	d0 01       	movw	r26, r0
    1990:	73 9f       	mul	r23, r19
    1992:	f0 01       	movw	r30, r0
    1994:	82 9f       	mul	r24, r18
    1996:	e0 0d       	add	r30, r0
    1998:	f1 1d       	adc	r31, r1
    199a:	64 9f       	mul	r22, r20
    199c:	e0 0d       	add	r30, r0
    199e:	f1 1d       	adc	r31, r1
    19a0:	92 9f       	mul	r25, r18
    19a2:	f0 0d       	add	r31, r0
    19a4:	83 9f       	mul	r24, r19
    19a6:	f0 0d       	add	r31, r0
    19a8:	74 9f       	mul	r23, r20
    19aa:	f0 0d       	add	r31, r0
    19ac:	65 9f       	mul	r22, r21
    19ae:	f0 0d       	add	r31, r0
    19b0:	99 27       	eor	r25, r25
    19b2:	72 9f       	mul	r23, r18
    19b4:	b0 0d       	add	r27, r0
    19b6:	e1 1d       	adc	r30, r1
    19b8:	f9 1f       	adc	r31, r25
    19ba:	63 9f       	mul	r22, r19
    19bc:	b0 0d       	add	r27, r0
    19be:	e1 1d       	adc	r30, r1
    19c0:	f9 1f       	adc	r31, r25
    19c2:	bd 01       	movw	r22, r26
    19c4:	cf 01       	movw	r24, r30
    19c6:	11 24       	eor	r1, r1
    19c8:	08 95       	ret

000019ca <__udivmodhi4>:
    19ca:	aa 1b       	sub	r26, r26
    19cc:	bb 1b       	sub	r27, r27
    19ce:	51 e1       	ldi	r21, 0x11	; 17
    19d0:	07 c0       	rjmp	.+14     	; 0x19e0 <__udivmodhi4_ep>

000019d2 <__udivmodhi4_loop>:
    19d2:	aa 1f       	adc	r26, r26
    19d4:	bb 1f       	adc	r27, r27
    19d6:	a6 17       	cp	r26, r22
    19d8:	b7 07       	cpc	r27, r23
    19da:	10 f0       	brcs	.+4      	; 0x19e0 <__udivmodhi4_ep>
    19dc:	a6 1b       	sub	r26, r22
    19de:	b7 0b       	sbc	r27, r23

000019e0 <__udivmodhi4_ep>:
    19e0:	88 1f       	adc	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	5a 95       	dec	r21
    19e6:	a9 f7       	brne	.-22     	; 0x19d2 <__udivmodhi4_loop>
    19e8:	80 95       	com	r24
    19ea:	90 95       	com	r25
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	08 95       	ret

000019f2 <__udivmodsi4>:
    19f2:	a1 e2       	ldi	r26, 0x21	; 33
    19f4:	1a 2e       	mov	r1, r26
    19f6:	aa 1b       	sub	r26, r26
    19f8:	bb 1b       	sub	r27, r27
    19fa:	fd 01       	movw	r30, r26
    19fc:	0d c0       	rjmp	.+26     	; 0x1a18 <__udivmodsi4_ep>

000019fe <__udivmodsi4_loop>:
    19fe:	aa 1f       	adc	r26, r26
    1a00:	bb 1f       	adc	r27, r27
    1a02:	ee 1f       	adc	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	a2 17       	cp	r26, r18
    1a08:	b3 07       	cpc	r27, r19
    1a0a:	e4 07       	cpc	r30, r20
    1a0c:	f5 07       	cpc	r31, r21
    1a0e:	20 f0       	brcs	.+8      	; 0x1a18 <__udivmodsi4_ep>
    1a10:	a2 1b       	sub	r26, r18
    1a12:	b3 0b       	sbc	r27, r19
    1a14:	e4 0b       	sbc	r30, r20
    1a16:	f5 0b       	sbc	r31, r21

00001a18 <__udivmodsi4_ep>:
    1a18:	66 1f       	adc	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	1a 94       	dec	r1
    1a22:	69 f7       	brne	.-38     	; 0x19fe <__udivmodsi4_loop>
    1a24:	60 95       	com	r22
    1a26:	70 95       	com	r23
    1a28:	80 95       	com	r24
    1a2a:	90 95       	com	r25
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	ac 01       	movw	r20, r24
    1a30:	bd 01       	movw	r22, r26
    1a32:	cf 01       	movw	r24, r30
    1a34:	08 95       	ret

00001a36 <_exit>:
    1a36:	f8 94       	cli

00001a38 <__stop_program>:
    1a38:	ff cf       	rjmp	.-2      	; 0x1a38 <__stop_program>
