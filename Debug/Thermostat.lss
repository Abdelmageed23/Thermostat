
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001614  000016a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800070  00800070  000016b8  2**0
                  ALLOC
  3 .stab         00002784  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e0f  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_10>
      2c:	0c 94 75 05 	jmp	0xaea	; 0xaea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 0a 	call	0x1558	; 0x1558 <main>
      8a:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
#include "APP_Private.h"
#include "APP_Config.h"


void APP_init()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInit();
      9a:	0e 94 39 01 	call	0x272	; 0x272 <LCD_vidInit>
	MOTOR_init(MOTOR_1);
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 61 00 	call	0xc2	; 0xc2 <MOTOR_init>
	MOTOR_init(MOTOR_2);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 61 00 	call	0xc2	; 0xc2 <MOTOR_init>

}
      aa:	cf 91       	pop	r28
      ac:	df 91       	pop	r29
      ae:	08 95       	ret

000000b0 <APP_Prog>:

void APP_Prog()
{
      b0:	df 93       	push	r29
      b2:	cf 93       	push	r28
      b4:	0f 92       	push	r0
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
		break;
	default :
		break;
	}

}
      ba:	0f 90       	pop	r0
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <MOTOR_init>:
#include "Motor.h"



void MOTOR_init(uint8_t numMotor)// numMotor (initialize Direction pins only (PWM initializes enable pins inside them))
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	0f 92       	push	r0
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	89 83       	std	Y+1, r24	; 0x01
	PWM_vidInit();
      ce:	0e 94 ad 05 	call	0xb5a	; 0xb5a <PWM_vidInit>
	if(MOTOR_1==numMotor)
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	88 23       	and	r24, r24
      d6:	59 f4       	brne	.+22     	; 0xee <MOTOR_init+0x2c>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1A,DIO_OUTPUT);
      d8:	83 e0       	ldi	r24, 0x03	; 3
      da:	62 e0       	ldi	r22, 0x02	; 2
      dc:	41 e0       	ldi	r20, 0x01	; 1
      de:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1B,DIO_OUTPUT);
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	63 e0       	ldi	r22, 0x03	; 3
      e6:	41 e0       	ldi	r20, 0x01	; 1
      e8:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
      ec:	0d c0       	rjmp	.+26     	; 0x108 <MOTOR_init+0x46>
	}
	else if(MOTOR_2==numMotor)
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	51 f4       	brne	.+20     	; 0x108 <MOTOR_init+0x46>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2A,DIO_OUTPUT);
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	66 e0       	ldi	r22, 0x06	; 6
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2B,DIO_OUTPUT);
      fe:	83 e0       	ldi	r24, 0x03	; 3
     100:	67 e0       	ldi	r22, 0x07	; 7
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	}
}
     108:	0f 90       	pop	r0
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <MOTOR_speed>:

void MOTOR_speed(uint8_t dutyCycle)//  30/60/90 (Start PWM and initialize duty cycle)
{
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	0f 92       	push	r0
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	89 83       	std	Y+1, r24	; 0x01
	PWM_SetDutyCycle(dutyCycle);
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <PWM_SetDutyCycle>
}
     122:	0f 90       	pop	r0
     124:	cf 91       	pop	r28
     126:	df 91       	pop	r29
     128:	08 95       	ret

0000012a <MOTOR_direction>:
void MOTOR_direction(uint8_t numMotor, uint8_t DIR)//  numMotor/(FWD,REV) (Set direction of specified motor) i.e (MOTOR_1, FWD) meaning motor 1, move forward
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <MOTOR_direction+0x6>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	6a 83       	std	Y+2, r22	; 0x02
	if(MOTOR_1==numMotor)
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	88 23       	and	r24, r24
     13c:	e1 f4       	brne	.+56     	; 0x176 <MOTOR_direction+0x4c>
	{
		if(FWD==DIR)
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	59 f4       	brne	.+22     	; 0x15a <MOTOR_direction+0x30>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_HIGH);
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	62 e0       	ldi	r22, 0x02	; 2
     148:	41 e0       	ldi	r20, 0x01	; 1
     14a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     14e:	83 e0       	ldi	r24, 0x03	; 3
     150:	63 e0       	ldi	r22, 0x03	; 3
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
     158:	2c c0       	rjmp	.+88     	; 0x1b2 <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	88 23       	and	r24, r24
     15e:	49 f5       	brne	.+82     	; 0x1b2 <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     160:	83 e0       	ldi	r24, 0x03	; 3
     162:	62 e0       	ldi	r22, 0x02	; 2
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_HIGH);
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	63 e0       	ldi	r22, 0x03	; 3
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
     174:	1e c0       	rjmp	.+60     	; 0x1b2 <MOTOR_direction+0x88>
		}
	}
	else if(MOTOR_2==numMotor)
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	d9 f4       	brne	.+54     	; 0x1b2 <MOTOR_direction+0x88>
	{
		if(FWD==DIR)
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	59 f4       	brne	.+22     	; 0x198 <MOTOR_direction+0x6e>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_HIGH);
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	66 e0       	ldi	r22, 0x06	; 6
     186:	41 e0       	ldi	r20, 0x01	; 1
     188:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	67 e0       	ldi	r22, 0x07	; 7
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
     196:	0d c0       	rjmp	.+26     	; 0x1b2 <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	88 23       	and	r24, r24
     19c:	51 f4       	brne	.+20     	; 0x1b2 <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	66 e0       	ldi	r22, 0x06	; 6
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_HIGH);
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	67 e0       	ldi	r22, 0x07	; 7
     1ac:	41 e0       	ldi	r20, 0x01	; 1
     1ae:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		}
	}
	
	
}
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	cf 91       	pop	r28
     1b8:	df 91       	pop	r29
     1ba:	08 95       	ret

000001bc <MOTOR_off>:
void MOTOR_off(uint8_t numMotor)// stop specified motor (writes LOW on DIR data pins)
{
     1bc:	df 93       	push	r29
     1be:	cf 93       	push	r28
     1c0:	0f 92       	push	r0
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	89 83       	std	Y+1, r24	; 0x01
	if(MOTOR_1==numMotor)
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 23       	and	r24, r24
     1cc:	59 f4       	brne	.+22     	; 0x1e4 <MOTOR_off+0x28>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	62 e0       	ldi	r22, 0x02	; 2
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	63 e0       	ldi	r22, 0x03	; 3
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
     1e2:	0d c0       	rjmp	.+26     	; 0x1fe <MOTOR_off+0x42>
	}
	else if(MOTOR_2==numMotor)
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	51 f4       	brne	.+20     	; 0x1fe <MOTOR_off+0x42>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	66 e0       	ldi	r22, 0x06	; 6
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	67 e0       	ldi	r22, 0x07	; 7
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	}
     1fe:	0f 90       	pop	r0
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <TEMP_u8GetReading>:
#include "TEMP_private.h"
#include "TEMP_config.h"
#include "TEMP_interface.h"

uint8_t TEMP_u8GetReading(uint8_t ADC_Channel)
{
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	00 d0       	rcall	.+0      	; 0x20c <TEMP_u8GetReading+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <TEMP_u8GetReading+0x8>
     20e:	0f 92       	push	r0
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t local_u8TEMP;
	uint16_t local_u16MiliVolt;
	uint8_t local_u8ADC_Read;
	ADC_u8StartConversionSynch(ADC_Channel,&local_u8ADC_Read);
     216:	9e 01       	movw	r18, r28
     218:	2c 5f       	subi	r18, 0xFC	; 252
     21a:	3f 4f       	sbci	r19, 0xFF	; 255
     21c:	8d 81       	ldd	r24, Y+5	; 0x05
     21e:	b9 01       	movw	r22, r18
     220:	0e 94 72 09 	call	0x12e4	; 0x12e4 <ADC_u8StartConversionSynch>
	local_u16MiliVolt=(uint16_t)(((uint32_t)local_u8ADC_Read*Vref)/TWO_P_RESOLUTION);
     224:	8c 81       	ldd	r24, Y+4	; 0x04
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	28 e8       	ldi	r18, 0x88	; 136
     230:	33 e1       	ldi	r19, 0x13	; 19
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	bc 01       	movw	r22, r24
     238:	cd 01       	movw	r24, r26
     23a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__mulsi3>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	89 2f       	mov	r24, r25
     244:	9a 2f       	mov	r25, r26
     246:	ab 2f       	mov	r26, r27
     248:	bb 27       	eor	r27, r27
     24a:	9a 83       	std	Y+2, r25	; 0x02
     24c:	89 83       	std	Y+1, r24	; 0x01
	local_u8TEMP=local_u16MiliVolt/10;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	2a e0       	ldi	r18, 0x0A	; 10
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	b9 01       	movw	r22, r18
     258:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__udivmodhi4>
     25c:	cb 01       	movw	r24, r22
     25e:	8b 83       	std	Y+3, r24	; 0x03
	return local_u8TEMP;
     260:	8b 81       	ldd	r24, Y+3	; 0x03

}
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	cf 91       	pop	r28
     26e:	df 91       	pop	r29
     270:	08 95       	ret

00000272 <LCD_vidInit>:

// ********* FUNCTIONS IMPLMENTATION **********

// function to intialize the LCD with the configured pins
void LCD_vidInit(void)
{
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
	if (LCD_Status == LCD_NOT_INITIALIZED)
     27a:	80 91 70 00 	lds	r24, 0x0070
     27e:	88 23       	and	r24, r24
     280:	09 f0       	breq	.+2      	; 0x284 <LCD_vidInit+0x12>
     282:	3f c0       	rjmp	.+126    	; 0x302 <LCD_vidInit+0x90>
	{
		// setting the pins direction
		DIO_SETpinDir(LCD_Port, LCD_RS, DIO_OUTPUT);
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	41 e0       	ldi	r20, 0x01	; 1
     28a:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_RW, DIO_OUTPUT);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	62 e0       	ldi	r22, 0x02	; 2
     292:	41 e0       	ldi	r20, 0x01	; 1
     294:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_E, DIO_OUTPUT);
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	63 e0       	ldi	r22, 0x03	; 3
     29c:	41 e0       	ldi	r20, 0x01	; 1
     29e:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D4, DIO_OUTPUT);
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	64 e0       	ldi	r22, 0x04	; 4
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D5, DIO_OUTPUT);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	65 e0       	ldi	r22, 0x05	; 5
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D6, DIO_OUTPUT);
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	66 e0       	ldi	r22, 0x06	; 6
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D7, DIO_OUTPUT);
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	67 e0       	ldi	r22, 0x07	; 7
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
		delay(65000);
     2ca:	88 ee       	ldi	r24, 0xE8	; 232
     2cc:	9d ef       	ldi	r25, 0xFD	; 253
     2ce:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		LCD_Status = LCD_INITIALIZED;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 70 00 	sts	0x0070, r24

		LCD_vidWriteCommand(0b00101000);
     2d8:	88 e2       	ldi	r24, 0x28	; 40
     2da:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vidWriteCommand>
		delay(5000);
     2de:	88 e8       	ldi	r24, 0x88	; 136
     2e0:	93 e1       	ldi	r25, 0x13	; 19
     2e2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		LCD_vidWriteCommand(0b00001100);
     2e6:	8c e0       	ldi	r24, 0x0C	; 12
     2e8:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vidWriteCommand>
		delay(5000);
     2ec:	88 e8       	ldi	r24, 0x88	; 136
     2ee:	93 e1       	ldi	r25, 0x13	; 19
     2f0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		LCD_vidWriteCommand(0b00000001);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vidWriteCommand>
		delay(5000);
     2fa:	88 e8       	ldi	r24, 0x88	; 136
     2fc:	93 e1       	ldi	r25, 0x13	; 19
     2fe:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
	}
	else
	{
		// do nothing
	}
}
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <LCD_vidWriteCommand>:

// function to send a command to LCD
void LCD_vidWriteCommand(uint8_t command)
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	0f 92       	push	r0
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     314:	80 91 70 00 	lds	r24, 0x0070
     318:	88 23       	and	r24, r24
     31a:	29 f4       	brne	.+10     	; 0x326 <LCD_vidWriteCommand+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_COMMAND_SID);
     31c:	88 e7       	ldi	r24, 0x78	; 120
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     324:	81 c0       	rjmp	.+258    	; 0x428 <LCD_vidWriteCommand+0x120>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 4));
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	82 95       	swap	r24
     33e:	8f 70       	andi	r24, 0x0F	; 15
     340:	98 2f       	mov	r25, r24
     342:	91 70       	andi	r25, 0x01	; 1
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	64 e0       	ldi	r22, 0x04	; 4
     348:	49 2f       	mov	r20, r25
     34a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 5));
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	82 95       	swap	r24
     352:	86 95       	lsr	r24
     354:	87 70       	andi	r24, 0x07	; 7
     356:	98 2f       	mov	r25, r24
     358:	91 70       	andi	r25, 0x01	; 1
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	65 e0       	ldi	r22, 0x05	; 5
     35e:	49 2f       	mov	r20, r25
     360:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 6));
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	82 95       	swap	r24
     368:	86 95       	lsr	r24
     36a:	86 95       	lsr	r24
     36c:	83 70       	andi	r24, 0x03	; 3
     36e:	98 2f       	mov	r25, r24
     370:	91 70       	andi	r25, 0x01	; 1
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	66 e0       	ldi	r22, 0x06	; 6
     376:	49 2f       	mov	r20, r25
     378:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 7));
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	98 2f       	mov	r25, r24
     380:	99 1f       	adc	r25, r25
     382:	99 27       	eor	r25, r25
     384:	99 1f       	adc	r25, r25
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	67 e0       	ldi	r22, 0x07	; 7
     38a:	49 2f       	mov	r20, r25
     38c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	63 e0       	ldi	r22, 0x03	; 3
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		delay(5000);
     39a:	88 e8       	ldi	r24, 0x88	; 136
     39c:	93 e1       	ldi	r25, 0x13	; 19
     39e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	63 e0       	ldi	r22, 0x03	; 3
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 0));
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	98 2f       	mov	r25, r24
     3c4:	91 70       	andi	r25, 0x01	; 1
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	64 e0       	ldi	r22, 0x04	; 4
     3ca:	49 2f       	mov	r20, r25
     3cc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 1));
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	86 95       	lsr	r24
     3d4:	98 2f       	mov	r25, r24
     3d6:	91 70       	andi	r25, 0x01	; 1
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	65 e0       	ldi	r22, 0x05	; 5
     3dc:	49 2f       	mov	r20, r25
     3de:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 2));
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	86 95       	lsr	r24
     3e6:	86 95       	lsr	r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	91 70       	andi	r25, 0x01	; 1
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	66 e0       	ldi	r22, 0x06	; 6
     3f0:	49 2f       	mov	r20, r25
     3f2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 3));
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	86 95       	lsr	r24
     3fa:	86 95       	lsr	r24
     3fc:	86 95       	lsr	r24
     3fe:	98 2f       	mov	r25, r24
     400:	91 70       	andi	r25, 0x01	; 1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	67 e0       	ldi	r22, 0x07	; 7
     406:	49 2f       	mov	r20, r25
     408:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	63 e0       	ldi	r22, 0x03	; 3
     410:	41 e0       	ldi	r20, 0x01	; 1
     412:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		delay(5000);
     416:	88 e8       	ldi	r24, 0x88	; 136
     418:	93 e1       	ldi	r25, 0x13	; 19
     41a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	63 e0       	ldi	r22, 0x03	; 3
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	}
}
     428:	0f 90       	pop	r0
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	08 95       	ret

00000430 <LCD_vidWriteData>:

// function that writes  one element on the LCD
void LCD_vidWriteData(uint8_t data)
{
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	0f 92       	push	r0
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     43c:	80 91 70 00 	lds	r24, 0x0070
     440:	88 23       	and	r24, r24
     442:	29 f4       	brne	.+10     	; 0x44e <LCD_vidWriteData+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_DATA_SID);
     444:	88 e7       	ldi	r24, 0x78	; 120
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     44c:	81 c0       	rjmp	.+258    	; 0x550 <__stack+0xf1>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 4));
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	98 2f       	mov	r25, r24
     46a:	91 70       	andi	r25, 0x01	; 1
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	64 e0       	ldi	r22, 0x04	; 4
     470:	49 2f       	mov	r20, r25
     472:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 5));
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	82 95       	swap	r24
     47a:	86 95       	lsr	r24
     47c:	87 70       	andi	r24, 0x07	; 7
     47e:	98 2f       	mov	r25, r24
     480:	91 70       	andi	r25, 0x01	; 1
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	65 e0       	ldi	r22, 0x05	; 5
     486:	49 2f       	mov	r20, r25
     488:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 6));
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	82 95       	swap	r24
     490:	86 95       	lsr	r24
     492:	86 95       	lsr	r24
     494:	83 70       	andi	r24, 0x03	; 3
     496:	98 2f       	mov	r25, r24
     498:	91 70       	andi	r25, 0x01	; 1
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	66 e0       	ldi	r22, 0x06	; 6
     49e:	49 2f       	mov	r20, r25
     4a0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 7));
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	98 2f       	mov	r25, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	99 27       	eor	r25, r25
     4ac:	99 1f       	adc	r25, r25
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	67 e0       	ldi	r22, 0x07	; 7
     4b2:	49 2f       	mov	r20, r25
     4b4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	63 e0       	ldi	r22, 0x03	; 3
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		delay(5000);
     4c2:	88 e8       	ldi	r24, 0x88	; 136
     4c4:	93 e1       	ldi	r25, 0x13	; 19
     4c6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 0));
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	98 2f       	mov	r25, r24
     4ec:	91 70       	andi	r25, 0x01	; 1
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	64 e0       	ldi	r22, 0x04	; 4
     4f2:	49 2f       	mov	r20, r25
     4f4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 1));
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	86 95       	lsr	r24
     4fc:	98 2f       	mov	r25, r24
     4fe:	91 70       	andi	r25, 0x01	; 1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	65 e0       	ldi	r22, 0x05	; 5
     504:	49 2f       	mov	r20, r25
     506:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 2));
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	86 95       	lsr	r24
     50e:	86 95       	lsr	r24
     510:	98 2f       	mov	r25, r24
     512:	91 70       	andi	r25, 0x01	; 1
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	66 e0       	ldi	r22, 0x06	; 6
     518:	49 2f       	mov	r20, r25
     51a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 3));
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	86 95       	lsr	r24
     522:	86 95       	lsr	r24
     524:	86 95       	lsr	r24
     526:	98 2f       	mov	r25, r24
     528:	91 70       	andi	r25, 0x01	; 1
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	67 e0       	ldi	r22, 0x07	; 7
     52e:	49 2f       	mov	r20, r25
     530:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	63 e0       	ldi	r22, 0x03	; 3
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		delay(5000);
     53e:	88 e8       	ldi	r24, 0x88	; 136
     540:	93 e1       	ldi	r25, 0x13	; 19
     542:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	63 e0       	ldi	r22, 0x03	; 3
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	}
}
     550:	0f 90       	pop	r0
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	08 95       	ret

00000558 <LCD_vidWriteString>:
// function to write string on the LCD
void LCD_vidWriteString(uint8_t *string)
{
     558:	df 93       	push	r29
     55a:	cf 93       	push	r28
     55c:	00 d0       	rcall	.+0      	; 0x55e <LCD_vidWriteString+0x6>
     55e:	0f 92       	push	r0
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	9b 83       	std	Y+3, r25	; 0x03
     566:	8a 83       	std	Y+2, r24	; 0x02
	if (string == NULL_PTR)
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	9b 81       	ldd	r25, Y+3	; 0x03
     56c:	00 97       	sbiw	r24, 0x00	; 0
     56e:	29 f4       	brne	.+10     	; 0x57a <LCD_vidWriteString+0x22>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     570:	88 e7       	ldi	r24, 0x78	; 120
     572:	63 e0       	ldi	r22, 0x03	; 3
     574:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     578:	24 c0       	rjmp	.+72     	; 0x5c2 <LCD_vidWriteString+0x6a>
	}
	else if (LCD_Status == LCD_NOT_INITIALIZED)
     57a:	80 91 70 00 	lds	r24, 0x0070
     57e:	88 23       	and	r24, r24
     580:	29 f4       	brne	.+10     	; 0x58c <LCD_vidWriteString+0x34>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     582:	88 e7       	ldi	r24, 0x78	; 120
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     58a:	1b c0       	rjmp	.+54     	; 0x5c2 <LCD_vidWriteString+0x6a>
	}
	else
	{
		uint8_t index = 0;
     58c:	19 82       	std	Y+1, r1	; 0x01
     58e:	0e c0       	rjmp	.+28     	; 0x5ac <LCD_vidWriteString+0x54>
		while (string[index] != 0)
		{
			LCD_vidWriteData(string[index]);
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	28 2f       	mov	r18, r24
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	fc 01       	movw	r30, r24
     59c:	e2 0f       	add	r30, r18
     59e:	f3 1f       	adc	r31, r19
     5a0:	80 81       	ld	r24, Z
     5a2:	0e 94 18 02 	call	0x430	; 0x430 <LCD_vidWriteData>
			index++;
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	89 83       	std	Y+1, r24	; 0x01
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
	}
	else
	{
		uint8_t index = 0;
		while (string[index] != 0)
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	28 2f       	mov	r18, r24
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	9b 81       	ldd	r25, Y+3	; 0x03
     5b6:	fc 01       	movw	r30, r24
     5b8:	e2 0f       	add	r30, r18
     5ba:	f3 1f       	adc	r31, r19
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	39 f7       	brne	.-50     	; 0x590 <LCD_vidWriteString+0x38>
		{
			LCD_vidWriteData(string[index]);
			index++;
		}
	}
}
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	08 95       	ret

000005ce <LCD_vidWriteNumber>:

// function to write a number on the LCD
void LCD_vidWriteNumber(uint32_t num)
{
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	df 93       	push	r29
     5d8:	cf 93       	push	r28
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	28 97       	sbiw	r28, 0x08	; 8
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	6d 83       	std	Y+5, r22	; 0x05
     5ec:	7e 83       	std	Y+6, r23	; 0x06
     5ee:	8f 83       	std	Y+7, r24	; 0x07
     5f0:	98 87       	std	Y+8, r25	; 0x08
	if (LCD_Status == LCD_NOT_INITIALIZED)
     5f2:	80 91 70 00 	lds	r24, 0x0070
     5f6:	88 23       	and	r24, r24
     5f8:	29 f4       	brne	.+10     	; 0x604 <LCD_vidWriteNumber+0x36>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_NUMBER_SID);
     5fa:	88 e7       	ldi	r24, 0x78	; 120
     5fc:	64 e0       	ldi	r22, 0x04	; 4
     5fe:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     602:	7f c0       	rjmp	.+254    	; 0x702 <LCD_vidWriteNumber+0x134>
	}
	else
	{
	uint32_t reversed = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	ab 83       	std	Y+3, r26	; 0x03
     612:	bc 83       	std	Y+4, r27	; 0x04
	if (num == 0)
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	9e 81       	ldd	r25, Y+6	; 0x06
     618:	af 81       	ldd	r26, Y+7	; 0x07
     61a:	b8 85       	ldd	r27, Y+8	; 0x08
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	a1 05       	cpc	r26, r1
     620:	b1 05       	cpc	r27, r1
     622:	d1 f5       	brne	.+116    	; 0x698 <LCD_vidWriteNumber+0xca>
	{
		LCD_vidWriteData('0');
     624:	80 e3       	ldi	r24, 0x30	; 48
     626:	0e 94 18 02 	call	0x430	; 0x430 <LCD_vidWriteData>
     62a:	6b c0       	rjmp	.+214    	; 0x702 <LCD_vidWriteNumber+0x134>
	}
	else
	{
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	ab 81       	ldd	r26, Y+3	; 0x03
     632:	bc 81       	ldd	r27, Y+4	; 0x04
     634:	2a e0       	ldi	r18, 0x0A	; 10
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__mulsi3>
     644:	7b 01       	movw	r14, r22
     646:	8c 01       	movw	r16, r24
     648:	8d 81       	ldd	r24, Y+5	; 0x05
     64a:	9e 81       	ldd	r25, Y+6	; 0x06
     64c:	af 81       	ldd	r26, Y+7	; 0x07
     64e:	b8 85       	ldd	r27, Y+8	; 0x08
     650:	2a e0       	ldi	r18, 0x0A	; 10
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	bc 01       	movw	r22, r24
     65a:	cd 01       	movw	r24, r26
     65c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__udivmodsi4>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	8e 0d       	add	r24, r14
     666:	9f 1d       	adc	r25, r15
     668:	a0 1f       	adc	r26, r16
     66a:	b1 1f       	adc	r27, r17
     66c:	89 83       	std	Y+1, r24	; 0x01
     66e:	9a 83       	std	Y+2, r25	; 0x02
     670:	ab 83       	std	Y+3, r26	; 0x03
     672:	bc 83       	std	Y+4, r27	; 0x04
			num /= 10;
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	9e 81       	ldd	r25, Y+6	; 0x06
     678:	af 81       	ldd	r26, Y+7	; 0x07
     67a:	b8 85       	ldd	r27, Y+8	; 0x08
     67c:	2a e0       	ldi	r18, 0x0A	; 10
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__udivmodsi4>
     68c:	da 01       	movw	r26, r20
     68e:	c9 01       	movw	r24, r18
     690:	8d 83       	std	Y+5, r24	; 0x05
     692:	9e 83       	std	Y+6, r25	; 0x06
     694:	af 83       	std	Y+7, r26	; 0x07
     696:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_vidWriteData('0');
	}
	else
	{
		while (num != 0)
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	af 81       	ldd	r26, Y+7	; 0x07
     69e:	b8 85       	ldd	r27, Y+8	; 0x08
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	a1 05       	cpc	r26, r1
     6a4:	b1 05       	cpc	r27, r1
     6a6:	11 f6       	brne	.-124    	; 0x62c <LCD_vidWriteNumber+0x5e>
     6a8:	23 c0       	rjmp	.+70     	; 0x6f0 <LCD_vidWriteNumber+0x122>
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
		{
			LCD_vidWriteData(((reversed % 10) + '0'));
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	ab 81       	ldd	r26, Y+3	; 0x03
     6b0:	bc 81       	ldd	r27, Y+4	; 0x04
     6b2:	2a e0       	ldi	r18, 0x0A	; 10
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	bc 01       	movw	r22, r24
     6bc:	cd 01       	movw	r24, r26
     6be:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__udivmodsi4>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	80 5d       	subi	r24, 0xD0	; 208
     6c8:	0e 94 18 02 	call	0x430	; 0x430 <LCD_vidWriteData>
			reversed /= 10;
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	ab 81       	ldd	r26, Y+3	; 0x03
     6d2:	bc 81       	ldd	r27, Y+4	; 0x04
     6d4:	2a e0       	ldi	r18, 0x0A	; 10
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	bc 01       	movw	r22, r24
     6de:	cd 01       	movw	r24, r26
     6e0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__udivmodsi4>
     6e4:	da 01       	movw	r26, r20
     6e6:	c9 01       	movw	r24, r18
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	ab 83       	std	Y+3, r26	; 0x03
     6ee:	bc 83       	std	Y+4, r27	; 0x04
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	ab 81       	ldd	r26, Y+3	; 0x03
     6f6:	bc 81       	ldd	r27, Y+4	; 0x04
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	91 05       	cpc	r25, r1
     6fc:	a1 05       	cpc	r26, r1
     6fe:	b1 05       	cpc	r27, r1
     700:	a1 f6       	brne	.-88     	; 0x6aa <LCD_vidWriteNumber+0xdc>
			LCD_vidWriteData(((reversed % 10) + '0'));
			reversed /= 10;
		}
	}
	}
}
     702:	28 96       	adiw	r28, 0x08	; 8
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <LCD_vidSetPosition>:

// function that sets the postion that u want to write in
void LCD_vidSetPosition(uint8_t row, uint8_t col)
{
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	00 d0       	rcall	.+0      	; 0x722 <LCD_vidSetPosition+0x6>
     722:	00 d0       	rcall	.+0      	; 0x724 <LCD_vidSetPosition+0x8>
     724:	0f 92       	push	r0
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	8a 83       	std	Y+2, r24	; 0x02
     72c:	6b 83       	std	Y+3, r22	; 0x03
	if (LCD_Status == LCD_NOT_INITIALIZED)
     72e:	80 91 70 00 	lds	r24, 0x0070
     732:	88 23       	and	r24, r24
     734:	29 f4       	brne	.+10     	; 0x740 <LCD_vidSetPosition+0x24>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_SET_POSTION_SID);
     736:	88 e7       	ldi	r24, 0x78	; 120
     738:	65 e0       	ldi	r22, 0x05	; 5
     73a:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     73e:	1e c0       	rjmp	.+60     	; 0x77c <LCD_vidSetPosition+0x60>
	}
	else
	{
	uint8_t adrs = 128;
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	89 83       	std	Y+1, r24	; 0x01
	switch (row)
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	28 2f       	mov	r18, r24
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	3d 83       	std	Y+5, r19	; 0x05
     74c:	2c 83       	std	Y+4, r18	; 0x04
     74e:	8c 81       	ldd	r24, Y+4	; 0x04
     750:	9d 81       	ldd	r25, Y+5	; 0x05
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	31 f0       	breq	.+12     	; 0x762 <LCD_vidSetPosition+0x46>
     756:	2c 81       	ldd	r18, Y+4	; 0x04
     758:	3d 81       	ldd	r19, Y+5	; 0x05
     75a:	21 30       	cpi	r18, 0x01	; 1
     75c:	31 05       	cpc	r19, r1
     75e:	31 f0       	breq	.+12     	; 0x76c <LCD_vidSetPosition+0x50>
     760:	0a c0       	rjmp	.+20     	; 0x776 <LCD_vidSetPosition+0x5a>
	{
	case 0:
		adrs += col;
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9b 81       	ldd	r25, Y+3	; 0x03
     766:	89 0f       	add	r24, r25
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	05 c0       	rjmp	.+10     	; 0x776 <LCD_vidSetPosition+0x5a>
		break;
	case 1:
		adrs += (64 + col);
     76c:	9b 81       	ldd	r25, Y+3	; 0x03
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	89 0f       	add	r24, r25
     772:	80 5c       	subi	r24, 0xC0	; 192
     774:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_vidWriteCommand(adrs);
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vidWriteCommand>
	}
}
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	08 95       	ret

0000078c <LCD_vidClear>:

// function to clear the LCD
void LCD_vidClear(void)
{   if (LCD_Status == LCD_NOT_INITIALIZED)
     78c:	df 93       	push	r29
     78e:	cf 93       	push	r28
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	80 91 70 00 	lds	r24, 0x0070
     798:	88 23       	and	r24, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <LCD_vidClear+0x1a>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_CLEAR_SID);
     79c:	88 e7       	ldi	r24, 0x78	; 120
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	0e 94 85 0a 	call	0x150a	; 0x150a <Det_ReportError>
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <LCD_vidClear+0x28>
	}
	else
	{
	LCD_vidWriteCommand(0b00000001);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vidWriteCommand>
	delay(8000);
     7ac:	80 e4       	ldi	r24, 0x40	; 64
     7ae:	9f e1       	ldi	r25, 0x1F	; 31
     7b0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay>
}
}
     7b4:	cf 91       	pop	r28
     7b6:	df 91       	pop	r29
     7b8:	08 95       	ret

000007ba <delay>:

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <delay+0x6>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <delay+0x8>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	9c 83       	std	Y+4, r25	; 0x04
     7c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t counter = 0;
     7ca:	1a 82       	std	Y+2, r1	; 0x02
     7cc:	19 82       	std	Y+1, r1	; 0x01
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <delay+0x20>
	while (counter < max) // loop to perform a delay
	{
		counter++;
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	9a 81       	ldd	r25, Y+2	; 0x02
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
	uint16_t counter = 0;
	while (counter < max) // loop to perform a delay
     7da:	29 81       	ldd	r18, Y+1	; 0x01
     7dc:	3a 81       	ldd	r19, Y+2	; 0x02
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	28 17       	cp	r18, r24
     7e4:	39 07       	cpc	r19, r25
     7e6:	a0 f3       	brcs	.-24     	; 0x7d0 <delay+0x16>
	{
		counter++;
	}
}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	cf 91       	pop	r28
     7f2:	df 91       	pop	r29
     7f4:	08 95       	ret

000007f6 <KPD_init>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"
//#include<util/delay.h>

void KPD_init(void)
{
     7f6:	df 93       	push	r29
     7f8:	cf 93       	push	r28
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
	/*Set columns & Rows Direction*/
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN0_PIN,DIO_OUTPUT);
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	65 e0       	ldi	r22, 0x05	; 5
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN1_PIN,DIO_OUTPUT);
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	66 e0       	ldi	r22, 0x06	; 6
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN2_PIN,DIO_OUTPUT);
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	67 e0       	ldi	r22, 0x07	; 7
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_COLUMN3_PIN,DIO_OUTPUT);
	DIO_SETpinDir(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	62 e0       	ldi	r22, 0x02	; 2
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	63 e0       	ldi	r22, 0x03	; 3
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	64 e0       	ldi	r22, 0x04	; 4
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);

	/*Set Rows to work in pull up mode*/
	DIO_SETpinVal(KPD_PORT,KPD_ROW0_PIN,DIO_HIGH);
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW1_PIN,DIO_HIGH);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	63 e0       	ldi	r22, 0x03	; 3
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW2_PIN,DIO_HIGH);
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_ROW3_PIN,DIO_HIGH);

	/*Deactivate columns by setting them high*/
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN0_PIN,DIO_HIGH);
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	65 e0       	ldi	r22, 0x05	; 5
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN1_PIN,DIO_HIGH);
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	66 e0       	ldi	r22, 0x06	; 6
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN2_PIN,DIO_HIGH);
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	67 e0       	ldi	r22, 0x07	; 7
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_COLUMN3_PIN,DIO_HIGH);
}
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	08 95       	ret

0000087c <KPD_u8GetPressedKey>:

uint8_t KPD_u8GetPressedKey(void)
{
     87c:	df 93       	push	r29
     87e:	cf 93       	push	r28
     880:	00 d0       	rcall	.+0      	; 0x882 <KPD_u8GetPressedKey+0x6>
     882:	00 d0       	rcall	.+0      	; 0x884 <KPD_u8GetPressedKey+0x8>
     884:	0f 92       	push	r0
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8Pressed=KPD_NO_Pressed;
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     88e:	19 82       	std	Y+1, r1	; 0x01
     890:	6a c0       	rjmp	.+212    	; 0x966 <KPD_u8GetPressedKey+0xea>
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	e0 5a       	subi	r30, 0xA0	; 160
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	90 81       	ld	r25, Z
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	69 2f       	mov	r22, r25
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     8aa:	1a 82       	std	Y+2, r1	; 0x02
     8ac:	49 c0       	rjmp	.+146    	; 0x940 <KPD_u8GetPressedKey+0xc4>
		{
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	ed 59       	subi	r30, 0x9D	; 157
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	90 81       	ld	r25, Z
     8bc:	9e 01       	movw	r18, r28
     8be:	2c 5f       	subi	r18, 0xFC	; 252
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	69 2f       	mov	r22, r25
     8c6:	a9 01       	movw	r20, r18
     8c8:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_GETpinVal>
			if(DIO_LOW==ROW_PIN_State)
     8cc:	8c 81       	ldd	r24, Y+4	; 0x04
     8ce:	88 23       	and	r24, r24
     8d0:	a1 f5       	brne	.+104    	; 0x93a <KPD_u8GetPressedKey+0xbe>
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	48 2f       	mov	r20, r24
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	c9 01       	movw	r24, r18
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	84 0f       	add	r24, r20
     8ea:	95 1f       	adc	r25, r21
     8ec:	fc 01       	movw	r30, r24
     8ee:	ea 59       	subi	r30, 0x9A	; 154
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	80 81       	ld	r24, Z
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	0f c0       	rjmp	.+30     	; 0x916 <KPD_u8GetPressedKey+0x9a>
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	ed 59       	subi	r30, 0x9D	; 157
     902:	ff 4f       	sbci	r31, 0xFF	; 255
     904:	90 81       	ld	r25, Z
     906:	9e 01       	movw	r18, r28
     908:	2c 5f       	subi	r18, 0xFC	; 252
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	69 2f       	mov	r22, r25
     910:	a9 01       	movw	r20, r18
     912:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_GETpinVal>
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
			if(DIO_LOW==ROW_PIN_State)
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
     916:	8c 81       	ldd	r24, Y+4	; 0x04
     918:	88 23       	and	r24, r24
     91a:	71 f3       	breq	.-36     	; 0x8f8 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
				}
				//_delay_ms(25);
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	e0 5a       	subi	r30, 0xA0	; 160
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	90 81       	ld	r25, Z
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	69 2f       	mov	r22, r25
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
				return local_u8Pressed;
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	8d 83       	std	Y+5, r24	; 0x05
     938:	1c c0       	rjmp	.+56     	; 0x972 <KPD_u8GetPressedKey+0xf6>

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	8a 83       	std	Y+2, r24	; 0x02
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	08 f4       	brcc	.+2      	; 0x948 <KPD_u8GetPressedKey+0xcc>
     946:	b3 cf       	rjmp	.-154    	; 0x8ae <KPD_u8GetPressedKey+0x32>
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
				return local_u8Pressed;
			}
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	fc 01       	movw	r30, r24
     950:	e0 5a       	subi	r30, 0xA0	; 160
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	90 81       	ld	r25, Z
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	69 2f       	mov	r22, r25
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	08 f4       	brcc	.+2      	; 0x96e <KPD_u8GetPressedKey+0xf2>
     96c:	92 cf       	rjmp	.-220    	; 0x892 <KPD_u8GetPressedKey+0x16>
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
	}

	return local_u8Pressed;
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	8d 83       	std	Y+5, r24	; 0x05
     972:	8d 81       	ldd	r24, Y+5	; 0x05
}
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <TIMER_vidTimer0Init>:
void static (*CallBack_Timer0OVF)(void) = NULL_PTR;

static uint8_t gu8_intial_value = 0;

void TIMER_vidTimer0Init(void)
{
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62


    // setting waveform generation mode  ctc or normal
#if ( TIMER_0_MODE == NORMAL)
    TCCR0 = 0;
     98c:	e3 e5       	ldi	r30, 0x53	; 83
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	10 82       	st	Z, r1
    if( TIMER_0_OVF_INT == STD_ON){
        TIMSK |= 1;
     992:	a9 e5       	ldi	r26, 0x59	; 89
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e9 e5       	ldi	r30, 0x59	; 89
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	81 60       	ori	r24, 0x01	; 1
     99e:	8c 93       	st	X, r24
    {
        //do nothing
    }
#endif

}
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	08 95       	ret

000009a6 <TIMER_vidTimer0Start>:


void TIMER_vidTimer0Start(uint8_t intial_value){
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	0f 92       	push	r0
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	89 83       	std	Y+1, r24	; 0x01
    TIMER_vidTimer0SetInitValue(intial_value);           // setting intial value
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	0e 94 0c 05 	call	0xa18	; 0xa18 <TIMER_vidTimer0SetInitValue>
    TCCR0 |= TIMER_0_PRESCALER;    // setting the prescaler
     9b8:	a3 e5       	ldi	r26, 0x53	; 83
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	e3 e5       	ldi	r30, 0x53	; 83
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	83 60       	ori	r24, 0x03	; 3
     9c4:	8c 93       	st	X, r24
}
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <TIMER_vidTimer0Stop>:

void TIMER_vidTimer0Stop(void){
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= ~(0b111);  // clearing the prescaler bits 
     9d6:	a3 e5       	ldi	r26, 0x53	; 83
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e3 e5       	ldi	r30, 0x53	; 83
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	88 7f       	andi	r24, 0xF8	; 248
     9e2:	8c 93       	st	X, r24
}
     9e4:	cf 91       	pop	r28
     9e6:	df 91       	pop	r29
     9e8:	08 95       	ret

000009ea <TIMER_u8Timer0_OVFflag>:

uint8_t TIMER_u8Timer0_OVFflag(void){
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,0);
     9f2:	e8 e5       	ldi	r30, 0x58	; 88
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	81 70       	andi	r24, 0x01	; 1
}
     9fa:	cf 91       	pop	r28
     9fc:	df 91       	pop	r29
     9fe:	08 95       	ret

00000a00 <TIMER_u8Timer0_CTCflag>:

uint8_t TIMER_u8Timer0_CTCflag(void){
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,1);
     a08:	e8 e5       	ldi	r30, 0x58	; 88
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	86 95       	lsr	r24
     a10:	81 70       	andi	r24, 0x01	; 1
}
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	08 95       	ret

00000a18 <TIMER_vidTimer0SetInitValue>:

void TIMER_vidTimer0SetInitValue(uint8_t intial_value){
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	0f 92       	push	r0
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	89 83       	std	Y+1, r24	; 0x01
    gu8_intial_value = intial_value ;
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	80 93 75 00 	sts	0x0075, r24
    TCNT0  = gu8_intial_value; 
     a2a:	e2 e5       	ldi	r30, 0x52	; 82
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 91 75 00 	lds	r24, 0x0075
     a32:	80 83       	st	Z, r24
}
     a34:	0f 90       	pop	r0
     a36:	cf 91       	pop	r28
     a38:	df 91       	pop	r29
     a3a:	08 95       	ret

00000a3c <SetCallBack_Timer0CTC>:


void SetCallBack_Timer0CTC(void(*func)(void)){
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	00 d0       	rcall	.+0      	; 0xa42 <SetCallBack_Timer0CTC+0x6>
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0CTC=func;
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	90 93 72 00 	sts	0x0072, r25
     a52:	80 93 71 00 	sts	0x0071, r24
}
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <SetCallBack_Timer0OVF>:


void SetCallBack_Timer0OVF(void(*func)(void)){
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	00 d0       	rcall	.+0      	; 0xa66 <SetCallBack_Timer0OVF+0x6>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0OVF=func;
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	90 93 74 00 	sts	0x0074, r25
     a76:	80 93 73 00 	sts	0x0073, r24
}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	08 95       	ret

00000a84 <__vector_10>:


void __vector_10(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_10(void){
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
    if (CallBack_Timer0CTC != NULL_PTR)
     aae:	80 91 71 00 	lds	r24, 0x0071
     ab2:	90 91 72 00 	lds	r25, 0x0072
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	29 f0       	breq	.+10     	; 0xac4 <__vector_10+0x40>
    {
        CallBack_Timer0CTC();
     aba:	e0 91 71 00 	lds	r30, 0x0071
     abe:	f0 91 72 00 	lds	r31, 0x0072
     ac2:	09 95       	icall
    }
    

}
     ac4:	cf 91       	pop	r28
     ac6:	df 91       	pop	r29
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	bf 91       	pop	r27
     ace:	af 91       	pop	r26
     ad0:	9f 91       	pop	r25
     ad2:	8f 91       	pop	r24
     ad4:	7f 91       	pop	r23
     ad6:	6f 91       	pop	r22
     ad8:	5f 91       	pop	r21
     ada:	4f 91       	pop	r20
     adc:	3f 91       	pop	r19
     ade:	2f 91       	pop	r18
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <__vector_11>:

void __vector_11(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_11(void){
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	2f 93       	push	r18
     af6:	3f 93       	push	r19
     af8:	4f 93       	push	r20
     afa:	5f 93       	push	r21
     afc:	6f 93       	push	r22
     afe:	7f 93       	push	r23
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	af 93       	push	r26
     b06:	bf 93       	push	r27
     b08:	ef 93       	push	r30
     b0a:	ff 93       	push	r31
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
    TCNT0  = gu8_intial_value;
     b14:	e2 e5       	ldi	r30, 0x52	; 82
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 91 75 00 	lds	r24, 0x0075
     b1c:	80 83       	st	Z, r24
 if (CallBack_Timer0OVF != NULL_PTR)
     b1e:	80 91 73 00 	lds	r24, 0x0073
     b22:	90 91 74 00 	lds	r25, 0x0074
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	29 f0       	breq	.+10     	; 0xb34 <__vector_11+0x4a>
    {
        CallBack_Timer0OVF();
     b2a:	e0 91 73 00 	lds	r30, 0x0073
     b2e:	f0 91 74 00 	lds	r31, 0x0074
     b32:	09 95       	icall
    }

}
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	ff 91       	pop	r31
     b3a:	ef 91       	pop	r30
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	0f 90       	pop	r0
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	0f 90       	pop	r0
     b56:	1f 90       	pop	r1
     b58:	18 95       	reti

00000b5a <PWM_vidInit>:


static uint8_t PWM_timer_count = 0;
static uint8_t PWM_dutyCycle=0;

void PWM_vidInit(void){
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
    SetCallBack_Timer0OVF(PWM_vidstart);
     b62:	87 ec       	ldi	r24, 0xC7	; 199
     b64:	95 e0       	ldi	r25, 0x05	; 5
     b66:	0e 94 30 05 	call	0xa60	; 0xa60 <SetCallBack_Timer0OVF>
    TIMER_vidTimer0Init();
     b6a:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_vidTimer0Init>
    DIO_SETpinDir(PWM_PORT1 , PWM_PIN1 , DIO_OUTPUT );
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	64 e0       	ldi	r22, 0x04	; 4
     b72:	41 e0       	ldi	r20, 0x01	; 1
     b74:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
    DIO_SETpinDir(PWM_PORT2 , PWM_PIN2 , DIO_OUTPUT );
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	65 e0       	ldi	r22, 0x05	; 5
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_SETpinDir>
   // DIO_vidSetPinDirection(PWM_PORT3 , PWM_PIN3 , OUTPUT );
    TIMER_vidTimer0Start(PWM_INTIAL_TIMER_VALUE);
     b82:	87 ee       	ldi	r24, 0xE7	; 231
     b84:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <TIMER_vidTimer0Start>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <PWM_vidstart>:

// the callback function when the timer overflow 
void PWM_vidstart(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
    PWM_timer_count++;
     b96:	80 91 76 00 	lds	r24, 0x0076
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	80 93 76 00 	sts	0x0076, r24
    if (PWM_timer_count == PWM_dutyCycle)
     ba0:	90 91 76 00 	lds	r25, 0x0076
     ba4:	80 91 77 00 	lds	r24, 0x0077
     ba8:	98 17       	cp	r25, r24
     baa:	59 f4       	brne	.+22     	; 0xbc2 <PWM_vidstart+0x34>
    {
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_LOW);
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	64 e0       	ldi	r22, 0x04	; 4
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_LOW);
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	65 e0       	ldi	r22, 0x05	; 5
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
     bc0:	10 c0       	rjmp	.+32     	; 0xbe2 <PWM_vidstart+0x54>
       // DIO_vidSetPinValue(PWM_PORT3 , PWM_PIN3 , STD_LOW);
        
    }
    else if(PWM_timer_count >= 100)
     bc2:	80 91 76 00 	lds	r24, 0x0076
     bc6:	84 36       	cpi	r24, 0x64	; 100
     bc8:	60 f0       	brcs	.+24     	; 0xbe2 <PWM_vidstart+0x54>
    {
        PWM_timer_count = 0;
     bca:	10 92 76 00 	sts	0x0076, r1
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_HIGH);
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_HIGH);
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	65 e0       	ldi	r22, 0x05	; 5
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_SETpinVal>
    }
    else
    {
        // do nothing
    }
}
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <PWM_SetDutyCycle>:

//function to change dutycycle
void PWM_SetDutyCycle(uint8_t dutyc){
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	0f 92       	push	r0
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
    PWM_dutyCycle = dutyc;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	80 93 77 00 	sts	0x0077, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <DIO_SETpinDir>:
#include "../../01-LIB/BIT_MATH.h"
#include "../../01-LIB/STD_TYPES.h"
#include "DIO_register.h"
#include "DIO_interface.h"

uint8_t DIO_SETpinDir(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_STAT){
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	28 97       	sbiw	r28, 0x08	; 8
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	8a 83       	std	Y+2, r24	; 0x02
     c18:	6b 83       	std	Y+3, r22	; 0x03
     c1a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	88 30       	cpi	r24, 0x08	; 8
     c24:	08 f0       	brcs	.+2      	; 0xc28 <DIO_SETpinDir+0x26>
     c26:	f1 c0       	rjmp	.+482    	; 0xe0a <DIO_SETpinDir+0x208>
	{
		/*If the direction of the pin is output*/
		if(u8_STAT==DIO_OUTPUT)
     c28:	8c 81       	ldd	r24, Y+4	; 0x04
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <DIO_SETpinDir+0x2e>
     c2e:	71 c0       	rjmp	.+226    	; 0xd12 <DIO_SETpinDir+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	38 87       	std	Y+8, r19	; 0x08
     c38:	2f 83       	std	Y+7, r18	; 0x07
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	91 05       	cpc	r25, r1
     c42:	49 f1       	breq	.+82     	; 0xc96 <DIO_SETpinDir+0x94>
     c44:	2f 81       	ldd	r18, Y+7	; 0x07
     c46:	38 85       	ldd	r19, Y+8	; 0x08
     c48:	22 30       	cpi	r18, 0x02	; 2
     c4a:	31 05       	cpc	r19, r1
     c4c:	2c f4       	brge	.+10     	; 0xc58 <DIO_SETpinDir+0x56>
     c4e:	8f 81       	ldd	r24, Y+7	; 0x07
     c50:	98 85       	ldd	r25, Y+8	; 0x08
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	61 f0       	breq	.+24     	; 0xc6e <DIO_SETpinDir+0x6c>
     c56:	5b c0       	rjmp	.+182    	; 0xd0e <DIO_SETpinDir+0x10c>
     c58:	2f 81       	ldd	r18, Y+7	; 0x07
     c5a:	38 85       	ldd	r19, Y+8	; 0x08
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	31 05       	cpc	r19, r1
     c60:	71 f1       	breq	.+92     	; 0xcbe <DIO_SETpinDir+0xbc>
     c62:	8f 81       	ldd	r24, Y+7	; 0x07
     c64:	98 85       	ldd	r25, Y+8	; 0x08
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	91 05       	cpc	r25, r1
     c6a:	e9 f1       	breq	.+122    	; 0xce6 <DIO_SETpinDir+0xe4>
     c6c:	50 c0       	rjmp	.+160    	; 0xd0e <DIO_SETpinDir+0x10c>
			{
			case DIO_PORTA: SET_BIT(DDRA,u8_PIN);break;
     c6e:	aa e3       	ldi	r26, 0x3A	; 58
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ea e3       	ldi	r30, 0x3A	; 58
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_SETpinDir+0x8a>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_SETpinDir+0x86>
     c90:	84 2b       	or	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	bb c0       	rjmp	.+374    	; 0xe0c <DIO_SETpinDir+0x20a>
			case DIO_PORTB: SET_BIT(DDRB,u8_PIN);break;
     c96:	a7 e3       	ldi	r26, 0x37	; 55
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e3       	ldi	r30, 0x37	; 55
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_SETpinDir+0xb2>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_SETpinDir+0xae>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	a7 c0       	rjmp	.+334    	; 0xe0c <DIO_SETpinDir+0x20a>
			case DIO_PORTC: SET_BIT(DDRC,u8_PIN);break;
     cbe:	a4 e3       	ldi	r26, 0x34	; 52
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e4 e3       	ldi	r30, 0x34	; 52
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_SETpinDir+0xda>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_SETpinDir+0xd6>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	93 c0       	rjmp	.+294    	; 0xe0c <DIO_SETpinDir+0x20a>
			case DIO_PORTD: SET_BIT(DDRD,u8_PIN);break;
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_SETpinDir+0x102>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_SETpinDir+0xfe>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	7f c0       	rjmp	.+254    	; 0xe0c <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	7d c0       	rjmp	.+250    	; 0xe0c <DIO_SETpinDir+0x20a>
			}
		}
		/*If the direction of the pin is input*/
		else if(u8_STAT==DIO_INPUT)
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	88 23       	and	r24, r24
     d16:	09 f0       	breq	.+2      	; 0xd1a <DIO_SETpinDir+0x118>
     d18:	76 c0       	rjmp	.+236    	; 0xe06 <DIO_SETpinDir+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	3e 83       	std	Y+6, r19	; 0x06
     d22:	2d 83       	std	Y+5, r18	; 0x05
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	9e 81       	ldd	r25, Y+6	; 0x06
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	59 f1       	breq	.+86     	; 0xd84 <DIO_SETpinDir+0x182>
     d2e:	2d 81       	ldd	r18, Y+5	; 0x05
     d30:	3e 81       	ldd	r19, Y+6	; 0x06
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	2c f4       	brge	.+10     	; 0xd42 <DIO_SETpinDir+0x140>
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f0       	breq	.+26     	; 0xd5a <DIO_SETpinDir+0x158>
     d40:	60 c0       	rjmp	.+192    	; 0xe02 <DIO_SETpinDir+0x200>
     d42:	2d 81       	ldd	r18, Y+5	; 0x05
     d44:	3e 81       	ldd	r19, Y+6	; 0x06
     d46:	22 30       	cpi	r18, 0x02	; 2
     d48:	31 05       	cpc	r19, r1
     d4a:	89 f1       	breq	.+98     	; 0xdae <DIO_SETpinDir+0x1ac>
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_SETpinDir+0x156>
     d56:	40 c0       	rjmp	.+128    	; 0xdd8 <DIO_SETpinDir+0x1d6>
     d58:	54 c0       	rjmp	.+168    	; 0xe02 <DIO_SETpinDir+0x200>
			{
			case DIO_PORTA: CLR_BIT(DDRA,u8_PIN);break;
     d5a:	aa e3       	ldi	r26, 0x3A	; 58
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e3       	ldi	r30, 0x3A	; 58
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_SETpinDir+0x176>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_SETpinDir+0x172>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	44 c0       	rjmp	.+136    	; 0xe0c <DIO_SETpinDir+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB,u8_PIN);break;
     d84:	a7 e3       	ldi	r26, 0x37	; 55
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 e3       	ldi	r30, 0x37	; 55
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_SETpinDir+0x1a0>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_SETpinDir+0x19c>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	2f c0       	rjmp	.+94     	; 0xe0c <DIO_SETpinDir+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC,u8_PIN);break;
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_SETpinDir+0x1ca>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_SETpinDir+0x1c6>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	1a c0       	rjmp	.+52     	; 0xe0c <DIO_SETpinDir+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD,u8_PIN);break;
     dd8:	a1 e3       	ldi	r26, 0x31	; 49
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e1 e3       	ldi	r30, 0x31	; 49
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_SETpinDir+0x1f4>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_SETpinDir+0x1f0>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;break;
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <DIO_SETpinDir+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <DIO_SETpinDir+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
     e0a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e0e:	28 96       	adiw	r28, 0x08	; 8
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <DIO_SETportDir>:

uint8_t DIO_SETportDir(uint8_t u8_PORT,uint8_t u8_STAT)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_SETportDir+0x6>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <DIO_SETportDir+0x8>
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	3d 83       	std	Y+5, r19	; 0x05
     e3e:	2c 83       	std	Y+4, r18	; 0x04
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	91 05       	cpc	r25, r1
     e48:	d1 f0       	breq	.+52     	; 0xe7e <DIO_SETportDir+0x5e>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	2c f4       	brge	.+10     	; 0xe5e <DIO_SETportDir+0x3e>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	61 f0       	breq	.+24     	; 0xe74 <DIO_SETportDir+0x54>
     e5c:	1f c0       	rjmp	.+62     	; 0xe9c <DIO_SETportDir+0x7c>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	81 f0       	breq	.+32     	; 0xe88 <DIO_SETportDir+0x68>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	91 05       	cpc	r25, r1
     e70:	81 f0       	breq	.+32     	; 0xe92 <DIO_SETportDir+0x72>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <DIO_SETportDir+0x7c>
	{
		case DIO_PORTA: DDRA=u8_STAT;break;
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	80 83       	st	Z, r24
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <DIO_SETportDir+0x7e>
		case DIO_PORTB: DDRB=u8_STAT;break;
     e7e:	e7 e3       	ldi	r30, 0x37	; 55
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	80 83       	st	Z, r24
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <DIO_SETportDir+0x7e>
		case DIO_PORTC: DDRC=u8_STAT;break;
     e88:	e4 e3       	ldi	r30, 0x34	; 52
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	80 83       	st	Z, r24
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <DIO_SETportDir+0x7e>
		case DIO_PORTD: DDRD=u8_STAT;break;
     e92:	e1 e3       	ldi	r30, 0x31	; 49
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	80 83       	st	Z, r24
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <DIO_SETportDir+0x7e>
		default:local_u8Error=NOK;break;
     e9c:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <DIO_SETpinVal>:

uint8_t DIO_SETpinVal(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_VAL){
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	28 97       	sbiw	r28, 0x08	; 8
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	8a 83       	std	Y+2, r24	; 0x02
     ec6:	6b 83       	std	Y+3, r22	; 0x03
     ec8:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 30       	cpi	r24, 0x08	; 8
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <DIO_SETpinVal+0x26>
     ed4:	f1 c0       	rjmp	.+482    	; 0x10b8 <DIO_SETpinVal+0x208>
	{
		/*If the chosen value is high*/
		if(u8_VAL==DIO_HIGH)
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	09 f0       	breq	.+2      	; 0xede <DIO_SETpinVal+0x2e>
     edc:	71 c0       	rjmp	.+226    	; 0xfc0 <DIO_SETpinVal+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	38 87       	std	Y+8, r19	; 0x08
     ee6:	2f 83       	std	Y+7, r18	; 0x07
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	49 f1       	breq	.+82     	; 0xf44 <DIO_SETpinVal+0x94>
     ef2:	2f 81       	ldd	r18, Y+7	; 0x07
     ef4:	38 85       	ldd	r19, Y+8	; 0x08
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	2c f4       	brge	.+10     	; 0xf06 <DIO_SETpinVal+0x56>
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	61 f0       	breq	.+24     	; 0xf1c <DIO_SETpinVal+0x6c>
     f04:	5b c0       	rjmp	.+182    	; 0xfbc <DIO_SETpinVal+0x10c>
     f06:	2f 81       	ldd	r18, Y+7	; 0x07
     f08:	38 85       	ldd	r19, Y+8	; 0x08
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	71 f1       	breq	.+92     	; 0xf6c <DIO_SETpinVal+0xbc>
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	91 05       	cpc	r25, r1
     f18:	e9 f1       	breq	.+122    	; 0xf94 <DIO_SETpinVal+0xe4>
     f1a:	50 c0       	rjmp	.+160    	; 0xfbc <DIO_SETpinVal+0x10c>
			{
			case DIO_PORTA: SET_BIT(PORTA,u8_PIN);break;
     f1c:	ab e3       	ldi	r26, 0x3B	; 59
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	eb e3       	ldi	r30, 0x3B	; 59
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_SETpinVal+0x8a>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_SETpinVal+0x86>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	bb c0       	rjmp	.+374    	; 0x10ba <DIO_SETpinVal+0x20a>
			case DIO_PORTB: SET_BIT(PORTB,u8_PIN);break;
     f44:	a8 e3       	ldi	r26, 0x38	; 56
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 e3       	ldi	r30, 0x38	; 56
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_SETpinVal+0xb2>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_SETpinVal+0xae>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	a7 c0       	rjmp	.+334    	; 0x10ba <DIO_SETpinVal+0x20a>
			case DIO_PORTC: SET_BIT(PORTC,u8_PIN);break;
     f6c:	a5 e3       	ldi	r26, 0x35	; 53
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_SETpinVal+0xda>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_SETpinVal+0xd6>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	93 c0       	rjmp	.+294    	; 0x10ba <DIO_SETpinVal+0x20a>
			case DIO_PORTD: SET_BIT(PORTD,u8_PIN);break;
     f94:	a2 e3       	ldi	r26, 0x32	; 50
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e2 e3       	ldi	r30, 0x32	; 50
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_SETpinVal+0x102>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_SETpinVal+0xfe>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	7f c0       	rjmp	.+254    	; 0x10ba <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
     fbc:	19 82       	std	Y+1, r1	; 0x01
     fbe:	7d c0       	rjmp	.+250    	; 0x10ba <DIO_SETpinVal+0x20a>
			}
		}
		/*If the chosen value is low*/
		else if(u8_VAL==DIO_LOW)
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	88 23       	and	r24, r24
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <DIO_SETpinVal+0x118>
     fc6:	76 c0       	rjmp	.+236    	; 0x10b4 <DIO_SETpinVal+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	3e 83       	std	Y+6, r19	; 0x06
     fd0:	2d 83       	std	Y+5, r18	; 0x05
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	59 f1       	breq	.+86     	; 0x1032 <DIO_SETpinVal+0x182>
     fdc:	2d 81       	ldd	r18, Y+5	; 0x05
     fde:	3e 81       	ldd	r19, Y+6	; 0x06
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	2c f4       	brge	.+10     	; 0xff0 <DIO_SETpinVal+0x140>
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	69 f0       	breq	.+26     	; 0x1008 <DIO_SETpinVal+0x158>
     fee:	60 c0       	rjmp	.+192    	; 0x10b0 <DIO_SETpinVal+0x200>
     ff0:	2d 81       	ldd	r18, Y+5	; 0x05
     ff2:	3e 81       	ldd	r19, Y+6	; 0x06
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	89 f1       	breq	.+98     	; 0x105c <DIO_SETpinVal+0x1ac>
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	83 30       	cpi	r24, 0x03	; 3
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <DIO_SETpinVal+0x156>
    1004:	40 c0       	rjmp	.+128    	; 0x1086 <DIO_SETpinVal+0x1d6>
    1006:	54 c0       	rjmp	.+168    	; 0x10b0 <DIO_SETpinVal+0x200>
			{
			case DIO_PORTA: CLR_BIT(PORTA,u8_PIN);break;
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_SETpinVal+0x176>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_SETpinVal+0x172>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	44 c0       	rjmp	.+136    	; 0x10ba <DIO_SETpinVal+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB,u8_PIN);break;
    1032:	a8 e3       	ldi	r26, 0x38	; 56
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e8 e3       	ldi	r30, 0x38	; 56
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_SETpinVal+0x1a0>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_SETpinVal+0x19c>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	2f c0       	rjmp	.+94     	; 0x10ba <DIO_SETpinVal+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC,u8_PIN);break;
    105c:	a5 e3       	ldi	r26, 0x35	; 53
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e3       	ldi	r30, 0x35	; 53
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_SETpinVal+0x1ca>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_SETpinVal+0x1c6>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	1a c0       	rjmp	.+52     	; 0x10ba <DIO_SETpinVal+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD,u8_PIN);break;
    1086:	a2 e3       	ldi	r26, 0x32	; 50
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e2 e3       	ldi	r30, 0x32	; 50
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_SETpinVal+0x1f4>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_SETpinVal+0x1f0>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    10b0:	19 82       	std	Y+1, r1	; 0x01
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <DIO_SETpinVal+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
    10b4:	19 82       	std	Y+1, r1	; 0x01
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <DIO_SETpinVal+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
    10b8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    10bc:	28 96       	adiw	r28, 0x08	; 8
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <DIO_SETportVal>:

uint8_t DIO_SETportVal(uint8_t u8_PORT,uint8_t u8_VAL)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DIO_SETportVal+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_SETportVal+0x8>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3d 83       	std	Y+5, r19	; 0x05
    10ec:	2c 83       	std	Y+4, r18	; 0x04
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	9d 81       	ldd	r25, Y+5	; 0x05
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	d1 f0       	breq	.+52     	; 0x112c <DIO_SETportVal+0x5e>
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	3d 81       	ldd	r19, Y+5	; 0x05
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_SETportVal+0x3e>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_SETportVal+0x54>
    110a:	1f c0       	rjmp	.+62     	; 0x114a <DIO_SETportVal+0x7c>
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <DIO_SETportVal+0x68>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	81 f0       	breq	.+32     	; 0x1140 <DIO_SETportVal+0x72>
    1120:	14 c0       	rjmp	.+40     	; 0x114a <DIO_SETportVal+0x7c>
	{
		case DIO_PORTA: PORTA=u8_VAL;break;
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	80 83       	st	Z, r24
    112a:	10 c0       	rjmp	.+32     	; 0x114c <DIO_SETportVal+0x7e>
		case DIO_PORTB: PORTB=u8_VAL;break;
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	80 83       	st	Z, r24
    1134:	0b c0       	rjmp	.+22     	; 0x114c <DIO_SETportVal+0x7e>
		case DIO_PORTC: PORTC=u8_VAL;break;
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	80 83       	st	Z, r24
    113e:	06 c0       	rjmp	.+12     	; 0x114c <DIO_SETportVal+0x7e>
		case DIO_PORTD: PORTD=u8_VAL;break;
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	80 83       	st	Z, r24
    1148:	01 c0       	rjmp	.+2      	; 0x114c <DIO_SETportVal+0x7e>
		default:local_u8Error=NOK;break;
    114a:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <DIO_GETpinVal>:

uint8_t DIO_GETpinVal(uint8_t u8_PORT,uint8_t u8_PIN, uint8_t *u8p_RetVal){
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	27 97       	sbiw	r28, 0x07	; 7
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	8a 83       	std	Y+2, r24	; 0x02
    1174:	6b 83       	std	Y+3, r22	; 0x03
    1176:	5d 83       	std	Y+5, r21	; 0x05
    1178:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	88 30       	cpi	r24, 0x08	; 8
    1182:	08 f0       	brcs	.+2      	; 0x1186 <DIO_GETpinVal+0x28>
    1184:	73 c0       	rjmp	.+230    	; 0x126c <DIO_GETpinVal+0x10e>
	{
		switch(u8_PORT)
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3f 83       	std	Y+7, r19	; 0x07
    118e:	2e 83       	std	Y+6, r18	; 0x06
    1190:	4e 81       	ldd	r20, Y+6	; 0x06
    1192:	5f 81       	ldd	r21, Y+7	; 0x07
    1194:	41 30       	cpi	r20, 0x01	; 1
    1196:	51 05       	cpc	r21, r1
    1198:	59 f1       	breq	.+86     	; 0x11f0 <DIO_GETpinVal+0x92>
    119a:	8e 81       	ldd	r24, Y+6	; 0x06
    119c:	9f 81       	ldd	r25, Y+7	; 0x07
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	91 05       	cpc	r25, r1
    11a2:	34 f4       	brge	.+12     	; 0x11b0 <DIO_GETpinVal+0x52>
    11a4:	2e 81       	ldd	r18, Y+6	; 0x06
    11a6:	3f 81       	ldd	r19, Y+7	; 0x07
    11a8:	21 15       	cp	r18, r1
    11aa:	31 05       	cpc	r19, r1
    11ac:	69 f0       	breq	.+26     	; 0x11c8 <DIO_GETpinVal+0x6a>
    11ae:	5c c0       	rjmp	.+184    	; 0x1268 <DIO_GETpinVal+0x10a>
    11b0:	4e 81       	ldd	r20, Y+6	; 0x06
    11b2:	5f 81       	ldd	r21, Y+7	; 0x07
    11b4:	42 30       	cpi	r20, 0x02	; 2
    11b6:	51 05       	cpc	r21, r1
    11b8:	79 f1       	breq	.+94     	; 0x1218 <DIO_GETpinVal+0xba>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <DIO_GETpinVal+0x68>
    11c4:	3d c0       	rjmp	.+122    	; 0x1240 <DIO_GETpinVal+0xe2>
    11c6:	50 c0       	rjmp	.+160    	; 0x1268 <DIO_GETpinVal+0x10a>
		{
		/*Choose which port*/
		case DIO_PORTA: *u8p_RetVal=GET_BIT(PINA,u8_PIN);break;
    11c8:	e9 e3       	ldi	r30, 0x39	; 57
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_GETpinVal+0x82>
    11dc:	55 95       	asr	r21
    11de:	47 95       	ror	r20
    11e0:	8a 95       	dec	r24
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_GETpinVal+0x7e>
    11e4:	ca 01       	movw	r24, r20
    11e6:	81 70       	andi	r24, 0x01	; 1
    11e8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ea:	fd 81       	ldd	r31, Y+5	; 0x05
    11ec:	80 83       	st	Z, r24
    11ee:	3f c0       	rjmp	.+126    	; 0x126e <DIO_GETpinVal+0x110>
		case DIO_PORTB: *u8p_RetVal=GET_BIT(PINB,u8_PIN);break;
    11f0:	e6 e3       	ldi	r30, 0x36	; 54
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_GETpinVal+0xaa>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_GETpinVal+0xa6>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	ec 81       	ldd	r30, Y+4	; 0x04
    1212:	fd 81       	ldd	r31, Y+5	; 0x05
    1214:	80 83       	st	Z, r24
    1216:	2b c0       	rjmp	.+86     	; 0x126e <DIO_GETpinVal+0x110>
		case DIO_PORTC: *u8p_RetVal=GET_BIT(PINC,u8_PIN);break;
    1218:	e3 e3       	ldi	r30, 0x33	; 51
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_GETpinVal+0xd2>
    122c:	55 95       	asr	r21
    122e:	47 95       	ror	r20
    1230:	8a 95       	dec	r24
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_GETpinVal+0xce>
    1234:	ca 01       	movw	r24, r20
    1236:	81 70       	andi	r24, 0x01	; 1
    1238:	ec 81       	ldd	r30, Y+4	; 0x04
    123a:	fd 81       	ldd	r31, Y+5	; 0x05
    123c:	80 83       	st	Z, r24
    123e:	17 c0       	rjmp	.+46     	; 0x126e <DIO_GETpinVal+0x110>
		case DIO_PORTD: *u8p_RetVal=GET_BIT(PIND,u8_PIN);break;
    1240:	e0 e3       	ldi	r30, 0x30	; 48
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_GETpinVal+0xfa>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_GETpinVal+0xf6>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	ec 81       	ldd	r30, Y+4	; 0x04
    1262:	fd 81       	ldd	r31, Y+5	; 0x05
    1264:	80 83       	st	Z, r24
    1266:	03 c0       	rjmp	.+6      	; 0x126e <DIO_GETpinVal+0x110>
		default: Local_u8Error=NOK;break;
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	01 c0       	rjmp	.+2      	; 0x126e <DIO_GETpinVal+0x110>
		}
	}
	else
	{
		Local_u8Error=NOK;
    126c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	27 96       	adiw	r28, 0x07	; 7
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <ADC_init>:
uint8_t* gu8_Reading;
uint8_t gu8_State=IDLE;
void(*CallbackNotification)(void);

void ADC_init(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	/*Select Ref.*/
#if ADC_REF_SEL == ADC_AREF
	CLR_BIT(ADC_ADMUX,ADMUX_REFS0);
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
#elif ADC_REF_SEL == ADC_AVCC
	SET_BIT(ADC_ADMUX,ADMUX_REFS0);
    128a:	a7 e2       	ldi	r26, 0x27	; 39
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e7 e2       	ldi	r30, 0x27	; 39
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
    1298:	a7 e2       	ldi	r26, 0x27	; 39
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e7 e2       	ldi	r30, 0x27	; 39
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	8c 93       	st	X, r24
#endif

	/*Select ADC Left Adjust Result*/
#if ADC_ADLAR_SEL == LEFT_ADJUST
	SET_BIT(ADC_ADMUX,ADMUX_ADLAR);
    12a6:	a7 e2       	ldi	r26, 0x27	; 39
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e7 e2       	ldi	r30, 0x27	; 39
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 62       	ori	r24, 0x20	; 32
    12b2:	8c 93       	st	X, r24
#elif ADC_ADLAR_SEL == RIGHT_ADJUST
	CLR_BIT(ADC_ADMUX,ADMUX_ADLAR);
#endif

	/*Select Prescalar*/
	ADC_ADCSRA&=PRESC_BIT_MASK;
    12b4:	a6 e2       	ldi	r26, 0x26	; 38
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e6 e2       	ldi	r30, 0x26	; 38
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	8c 93       	st	X, r24
	ADC_ADCSRA|=ADC_PRESCLAR_SEL;
    12c2:	a6 e2       	ldi	r26, 0x26	; 38
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e6 e2       	ldi	r30, 0x26	; 38
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	87 60       	ori	r24, 0x07	; 7
    12ce:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADC_ADCSRA,ADCSRA_ADEN);
    12d0:	a6 e2       	ldi	r26, 0x26	; 38
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e6 e2       	ldi	r30, 0x26	; 38
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 68       	ori	r24, 0x80	; 128
    12dc:	8c 93       	st	X, r24
}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <ADC_u8StartConversionSynch>:

uint8_t ADC_u8StartConversionSynch(uint8_t ADC_Channel,uint8_t* u8_Reading)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	28 97       	sbiw	r28, 0x08	; 8
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	8e 83       	std	Y+6, r24	; 0x06
    12fa:	78 87       	std	Y+8, r23	; 0x08
    12fc:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t local_u8Error=OK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t local_u8Counter=0;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	1a 82       	std	Y+2, r1	; 0x02
    1306:	1b 82       	std	Y+3, r1	; 0x03
    1308:	1c 82       	std	Y+4, r1	; 0x04
	if(gu8_State == IDLE)
    130a:	80 91 6f 00 	lds	r24, 0x006F
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	09 f0       	breq	.+2      	; 0x1314 <ADC_u8StartConversionSynch+0x30>
    1312:	5b c0       	rjmp	.+182    	; 0x13ca <ADC_u8StartConversionSynch+0xe6>
	{
		gu8_State=BUSY;
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	80 93 6f 00 	sts	0x006F, r24
		/*Select Channel*/
		ADC_ADMUX&=MUX_BIT_MASK;
    131a:	a7 e2       	ldi	r26, 0x27	; 39
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e7 e2       	ldi	r30, 0x27	; 39
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	80 7e       	andi	r24, 0xE0	; 224
    1326:	8c 93       	st	X, r24
		ADC_ADMUX|=ADC_Channel;
    1328:	a7 e2       	ldi	r26, 0x27	; 39
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e7 e2       	ldi	r30, 0x27	; 39
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	90 81       	ld	r25, Z
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	89 2b       	or	r24, r25
    1336:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    1338:	a6 e2       	ldi	r26, 0x26	; 38
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e6 e2       	ldi	r30, 0x26	; 38
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	80 64       	ori	r24, 0x40	; 64
    1344:	8c 93       	st	X, r24
    1346:	0b c0       	rjmp	.+22     	; 0x135e <ADC_u8StartConversionSynch+0x7a>

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
		{
			local_u8Counter++;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	ab 81       	ldd	r26, Y+3	; 0x03
    134e:	bc 81       	ldd	r27, Y+4	; 0x04
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	a1 1d       	adc	r26, r1
    1354:	b1 1d       	adc	r27, r1
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	ab 83       	std	Y+3, r26	; 0x03
    135c:	bc 83       	std	Y+4, r27	; 0x04

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
    135e:	e6 e2       	ldi	r30, 0x26	; 38
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	82 95       	swap	r24
    1366:	8f 70       	andi	r24, 0x0F	; 15
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	81 70       	andi	r24, 0x01	; 1
    136e:	90 70       	andi	r25, 0x00	; 0
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	61 f4       	brne	.+24     	; 0x138c <ADC_u8StartConversionSynch+0xa8>
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	ab 81       	ldd	r26, Y+3	; 0x03
    137a:	bc 81       	ldd	r27, Y+4	; 0x04
    137c:	80 35       	cpi	r24, 0x50	; 80
    137e:	23 ec       	ldi	r18, 0xC3	; 195
    1380:	92 07       	cpc	r25, r18
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	a2 07       	cpc	r26, r18
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	b2 07       	cpc	r27, r18
    138a:	f1 f6       	brne	.-68     	; 0x1348 <ADC_u8StartConversionSynch+0x64>
		{
			local_u8Counter++;
		}

		if(local_u8Counter == ADC_TIMEOUT)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	ab 81       	ldd	r26, Y+3	; 0x03
    1392:	bc 81       	ldd	r27, Y+4	; 0x04
    1394:	80 35       	cpi	r24, 0x50	; 80
    1396:	23 ec       	ldi	r18, 0xC3	; 195
    1398:	92 07       	cpc	r25, r18
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	a2 07       	cpc	r26, r18
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	b2 07       	cpc	r27, r18
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <ADC_u8StartConversionSynch+0xc4>
		{
			local_u8Error=NOK;
    13a4:	1d 82       	std	Y+5, r1	; 0x05
    13a6:	13 c0       	rjmp	.+38     	; 0x13ce <ADC_u8StartConversionSynch+0xea>
		}
		else
		{
			/*Clear the ADC flag*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIF);
    13a8:	a6 e2       	ldi	r26, 0x26	; 38
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e6 e2       	ldi	r30, 0x26	; 38
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 61       	ori	r24, 0x10	; 16
    13b4:	8c 93       	st	X, r24

			/*Read the ADC value*/
			if(ADC_ADLAR_SEL == LEFT_ADJUST)
			{
				*u8_Reading=ADC_ADCH;
    13b6:	e5 e2       	ldi	r30, 0x25	; 37
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	ef 81       	ldd	r30, Y+7	; 0x07
    13be:	f8 85       	ldd	r31, Y+8	; 0x08
    13c0:	80 83       	st	Z, r24
				gu8_State=IDLE;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 93 6f 00 	sts	0x006F, r24
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <ADC_u8StartConversionSynch+0xea>
			}
		}
	}
	else
	{
		local_u8Error=BUSY;
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8Error;
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13d0:	28 96       	adiw	r28, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <ADC_u8StartConversionASynch>:

uint8_t ADC_u8StartConversionASynch(uint8_t ADC_Channel,uint8_t* u8_Reading,void(*NotificFunc)(void))
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <ADC_u8StartConversionASynch+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <ADC_u8StartConversionASynch+0x8>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <ADC_u8StartConversionASynch+0xa>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	7c 83       	std	Y+4, r23	; 0x04
    13f4:	6b 83       	std	Y+3, r22	; 0x03
    13f6:	5e 83       	std	Y+6, r21	; 0x06
    13f8:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t local_u8Error=OK;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_State==IDLE)
    13fe:	80 91 6f 00 	lds	r24, 0x006F
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	b9 f5       	brne	.+110    	; 0x1474 <ADC_u8StartConversionASynch+0x92>
	{
		if((u8_Reading==NULL) || (NotificFunc == NULL))
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	21 f0       	breq	.+8      	; 0x1416 <ADC_u8StartConversionASynch+0x34>
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	11 f4       	brne	.+4      	; 0x141a <ADC_u8StartConversionASynch+0x38>
		{
			local_u8Error=NOK;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	2f c0       	rjmp	.+94     	; 0x1478 <ADC_u8StartConversionASynch+0x96>
		}
		else
		{
			gu8_State=BUSY;
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	80 93 6f 00 	sts	0x006F, r24

			/*Select Channel*/
			ADC_ADMUX&=MUX_BIT_MASK;
    1420:	a7 e2       	ldi	r26, 0x27	; 39
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e7 e2       	ldi	r30, 0x27	; 39
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 7e       	andi	r24, 0xE0	; 224
    142c:	8c 93       	st	X, r24
			ADC_ADMUX|=ADC_Channel;
    142e:	a7 e2       	ldi	r26, 0x27	; 39
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e7 e2       	ldi	r30, 0x27	; 39
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	90 81       	ld	r25, Z
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	89 2b       	or	r24, r25
    143c:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    143e:	a6 e2       	ldi	r26, 0x26	; 38
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e6 e2       	ldi	r30, 0x26	; 38
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	80 64       	ori	r24, 0x40	; 64
    144a:	8c 93       	st	X, r24

			/*Enable Interrupt*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    144c:	a6 e2       	ldi	r26, 0x26	; 38
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e6 e2       	ldi	r30, 0x26	; 38
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	88 60       	ori	r24, 0x08	; 8
    1458:	8c 93       	st	X, r24

			gu8_Reading=u8_Reading;
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	90 93 de 00 	sts	0x00DE, r25
    1462:	80 93 dd 00 	sts	0x00DD, r24
			CallbackNotification=NotificFunc;
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	90 93 e0 00 	sts	0x00E0, r25
    146e:	80 93 df 00 	sts	0x00DF, r24
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <ADC_u8StartConversionASynch+0x96>
		}
	}
	else
	{
		local_u8Error=BUSY;
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Error;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	26 96       	adiw	r28, 0x06	; 6
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	/*Read ADC*/
	if(ADC_ADLAR_SEL == LEFT_ADJUST)
	{
		*gu8_Reading=ADC_ADCH;
    14b6:	a0 91 dd 00 	lds	r26, 0x00DD
    14ba:	b0 91 de 00 	lds	r27, 0x00DE
    14be:	e5 e2       	ldi	r30, 0x25	; 37
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8c 93       	st	X, r24
	{
		*gu8_Reading=ADC_ADCL;
	}

	/*ADC state IDLE*/
	gu8_State=IDLE;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	80 93 6f 00 	sts	0x006F, r24

	/*Call callback notification func*/
	CallbackNotification();
    14cc:	e0 91 df 00 	lds	r30, 0x00DF
    14d0:	f0 91 e0 00 	lds	r31, 0x00E0
    14d4:	09 95       	icall

	/*Disable the interrupt*/
	CLR_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    14d6:	a6 e2       	ldi	r26, 0x26	; 38
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e6 e2       	ldi	r30, 0x26	; 38
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	8c 93       	st	X, r24

}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <Det_ReportError>:
#include "Det.h"

static uint8_t index_row=0;

void Det_ReportError( uint8_t ModuleId , uint8_t ApiId)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <Det_ReportError+0x6>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02
gu8arr_error[index_row][0]=ModuleId;
    1518:	80 91 78 00 	lds	r24, 0x0078
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	fc 01       	movw	r30, r24
    1526:	e7 58       	subi	r30, 0x87	; 135
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	80 83       	st	Z, r24
gu8arr_error[index_row][1]=ApiId;
    152e:	80 91 78 00 	lds	r24, 0x0078
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	fc 01       	movw	r30, r24
    153c:	e6 58       	subi	r30, 0x86	; 134
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 83       	st	Z, r24
index_row++;
    1544:	80 91 78 00 	lds	r24, 0x0078
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	80 93 78 00 	sts	0x0078, r24
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <main>:

#include "04-APP/APP_Interface.h";


void main()
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62

}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <__mulsi3>:
    1566:	62 9f       	mul	r22, r18
    1568:	d0 01       	movw	r26, r0
    156a:	73 9f       	mul	r23, r19
    156c:	f0 01       	movw	r30, r0
    156e:	82 9f       	mul	r24, r18
    1570:	e0 0d       	add	r30, r0
    1572:	f1 1d       	adc	r31, r1
    1574:	64 9f       	mul	r22, r20
    1576:	e0 0d       	add	r30, r0
    1578:	f1 1d       	adc	r31, r1
    157a:	92 9f       	mul	r25, r18
    157c:	f0 0d       	add	r31, r0
    157e:	83 9f       	mul	r24, r19
    1580:	f0 0d       	add	r31, r0
    1582:	74 9f       	mul	r23, r20
    1584:	f0 0d       	add	r31, r0
    1586:	65 9f       	mul	r22, r21
    1588:	f0 0d       	add	r31, r0
    158a:	99 27       	eor	r25, r25
    158c:	72 9f       	mul	r23, r18
    158e:	b0 0d       	add	r27, r0
    1590:	e1 1d       	adc	r30, r1
    1592:	f9 1f       	adc	r31, r25
    1594:	63 9f       	mul	r22, r19
    1596:	b0 0d       	add	r27, r0
    1598:	e1 1d       	adc	r30, r1
    159a:	f9 1f       	adc	r31, r25
    159c:	bd 01       	movw	r22, r26
    159e:	cf 01       	movw	r24, r30
    15a0:	11 24       	eor	r1, r1
    15a2:	08 95       	ret

000015a4 <__udivmodhi4>:
    15a4:	aa 1b       	sub	r26, r26
    15a6:	bb 1b       	sub	r27, r27
    15a8:	51 e1       	ldi	r21, 0x11	; 17
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <__udivmodhi4_ep>

000015ac <__udivmodhi4_loop>:
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	a6 17       	cp	r26, r22
    15b2:	b7 07       	cpc	r27, r23
    15b4:	10 f0       	brcs	.+4      	; 0x15ba <__udivmodhi4_ep>
    15b6:	a6 1b       	sub	r26, r22
    15b8:	b7 0b       	sbc	r27, r23

000015ba <__udivmodhi4_ep>:
    15ba:	88 1f       	adc	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	5a 95       	dec	r21
    15c0:	a9 f7       	brne	.-22     	; 0x15ac <__udivmodhi4_loop>
    15c2:	80 95       	com	r24
    15c4:	90 95       	com	r25
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	08 95       	ret

000015cc <__udivmodsi4>:
    15cc:	a1 e2       	ldi	r26, 0x21	; 33
    15ce:	1a 2e       	mov	r1, r26
    15d0:	aa 1b       	sub	r26, r26
    15d2:	bb 1b       	sub	r27, r27
    15d4:	fd 01       	movw	r30, r26
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <__udivmodsi4_ep>

000015d8 <__udivmodsi4_loop>:
    15d8:	aa 1f       	adc	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	ee 1f       	adc	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	a2 17       	cp	r26, r18
    15e2:	b3 07       	cpc	r27, r19
    15e4:	e4 07       	cpc	r30, r20
    15e6:	f5 07       	cpc	r31, r21
    15e8:	20 f0       	brcs	.+8      	; 0x15f2 <__udivmodsi4_ep>
    15ea:	a2 1b       	sub	r26, r18
    15ec:	b3 0b       	sbc	r27, r19
    15ee:	e4 0b       	sbc	r30, r20
    15f0:	f5 0b       	sbc	r31, r21

000015f2 <__udivmodsi4_ep>:
    15f2:	66 1f       	adc	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	1a 94       	dec	r1
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <__udivmodsi4_loop>
    15fe:	60 95       	com	r22
    1600:	70 95       	com	r23
    1602:	80 95       	com	r24
    1604:	90 95       	com	r25
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	bd 01       	movw	r22, r26
    160c:	cf 01       	movw	r24, r30
    160e:	08 95       	ret

00001610 <_exit>:
    1610:	f8 94       	cli

00001612 <__stop_program>:
    1612:	ff cf       	rjmp	.-2      	; 0x1612 <__stop_program>
