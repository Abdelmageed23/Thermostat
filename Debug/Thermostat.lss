
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000017c6  0000185a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800094  00800094  0000188e  2**0
                  ALLOC
  3 .stab         00002b8c  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e98  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_10>
      2c:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <main>
      8a:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
#include "APP_Private.h"
#include "APP_Config.h"


void APP_init()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	GlobalInerruptEnable();
      9a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <GlobalInerruptEnable>
	KPD_init();
      9e:	0e 94 c0 04 	call	0x980	; 0x980 <KPD_init>
	LCD_vidInit();
      a2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_vidInit>
	MOTOR_init(MOTOR_1);
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_init>
	MOTOR_init(MOTOR_2);
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_init>

}
      b2:	cf 91       	pop	r28
      b4:	df 91       	pop	r29
      b6:	08 95       	ret

000000b8 <APP_Prog>:


void APP_Prog()
{
      b8:	df 93       	push	r29
      ba:	cf 93       	push	r28
      bc:	00 d0       	rcall	.+0      	; 0xbe <APP_Prog+0x6>
      be:	00 d0       	rcall	.+0      	; 0xc0 <APP_Prog+0x8>
      c0:	0f 92       	push	r0
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = Home;
      c6:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t key =255;
      c8:	8f ef       	ldi	r24, 0xFF	; 255
      ca:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t value=0;
      cc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
	switch (state)
      ce:	8a 81       	ldd	r24, Y+2	; 0x02
      d0:	28 2f       	mov	r18, r24
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	3d 83       	std	Y+5, r19	; 0x05
      d6:	2c 83       	std	Y+4, r18	; 0x04
      d8:	8c 81       	ldd	r24, Y+4	; 0x04
      da:	9d 81       	ldd	r25, Y+5	; 0x05
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	91 05       	cpc	r25, r1
      e0:	a9 f1       	breq	.+106    	; 0x14c <APP_Prog+0x94>
      e2:	2c 81       	ldd	r18, Y+4	; 0x04
      e4:	3d 81       	ldd	r19, Y+5	; 0x05
      e6:	22 30       	cpi	r18, 0x02	; 2
      e8:	31 05       	cpc	r19, r1
      ea:	09 f4       	brne	.+2      	; 0xee <APP_Prog+0x36>
      ec:	a5 c0       	rjmp	.+330    	; 0x238 <APP_Prog+0x180>
      ee:	8c 81       	ldd	r24, Y+4	; 0x04
      f0:	9d 81       	ldd	r25, Y+5	; 0x05
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	61 f7       	brne	.-40     	; 0xce <APP_Prog+0x16>
		{
		case Home:
			LCD_vidClear();
      f6:	0e 94 8b 04 	call	0x916	; 0x916 <LCD_vidClear>
			LCD_vidSetPosition(0,0);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	0e 94 53 04 	call	0x8a6	; 0x8a6 <LCD_vidSetPosition>
			LCD_vidWriteString("1-SET Temp");
     102:	80 e6       	ldi	r24, 0x60	; 96
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_vidWriteString>
			LCD_vidSetPosition(1,0);
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <LCD_vidSetPosition>
			LCD_vidWriteString("2-GET Temp");
     112:	8b e6       	ldi	r24, 0x6B	; 107
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_vidWriteString>
			key =KPD_u8GetPressedKey();
     11a:	0e 94 03 05 	call	0xa06	; 0xa06 <KPD_u8GetPressedKey>
     11e:	8b 83       	std	Y+3, r24	; 0x03
     120:	03 c0       	rjmp	.+6      	; 0x128 <APP_Prog+0x70>
			while(key!=1 && key!=2)
			{
				key =KPD_u8GetPressedKey();
     122:	0e 94 03 05 	call	0xa06	; 0xa06 <KPD_u8GetPressedKey>
     126:	8b 83       	std	Y+3, r24	; 0x03
			LCD_vidSetPosition(0,0);
			LCD_vidWriteString("1-SET Temp");
			LCD_vidSetPosition(1,0);
			LCD_vidWriteString("2-GET Temp");
			key =KPD_u8GetPressedKey();
			while(key!=1 && key!=2)
     128:	8b 81       	ldd	r24, Y+3	; 0x03
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	19 f0       	breq	.+6      	; 0x134 <APP_Prog+0x7c>
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	82 30       	cpi	r24, 0x02	; 2
     132:	b9 f7       	brne	.-18     	; 0x122 <APP_Prog+0x6a>
			{
				key =KPD_u8GetPressedKey();
			}

			if(key ==1 )
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	19 f4       	brne	.+6      	; 0x140 <APP_Prog+0x88>
			{
				state = SET;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	c7 cf       	rjmp	.-114    	; 0xce <APP_Prog+0x16>

			}
			else if (key ==2)
     140:	8b 81       	ldd	r24, Y+3	; 0x03
     142:	82 30       	cpi	r24, 0x02	; 2
     144:	21 f6       	brne	.-120    	; 0xce <APP_Prog+0x16>
			{
				state = GET;
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	8a 83       	std	Y+2, r24	; 0x02
     14a:	c1 cf       	rjmp	.-126    	; 0xce <APP_Prog+0x16>
			}

			break;
		case SET:

			MOTOR_direction(MOTOR_1,FWD);
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MOTOR_direction>
			MOTOR_speed(60);
     154:	8c e3       	ldi	r24, 0x3C	; 60
     156:	0e 94 4d 01 	call	0x29a	; 0x29a <MOTOR_speed>

			value=0;
     15a:	19 82       	std	Y+1, r1	; 0x01
			key =255;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	8b 83       	std	Y+3, r24	; 0x03
			LCD_vidClear();
     160:	0e 94 8b 04 	call	0x916	; 0x916 <LCD_vidClear>
			LCD_vidSetPosition(0,0);
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	0e 94 53 04 	call	0x8a6	; 0x8a6 <LCD_vidSetPosition>
			LCD_vidWriteString("Desired Temp:");
     16c:	86 e7       	ldi	r24, 0x76	; 118
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_vidWriteString>
			key =KPD_u8GetPressedKey();
     174:	0e 94 03 05 	call	0xa06	; 0xa06 <KPD_u8GetPressedKey>
     178:	8b 83       	std	Y+3, r24	; 0x03
     17a:	03 c0       	rjmp	.+6      	; 0x182 <APP_Prog+0xca>
			while(key==255)
			{
				key =KPD_u8GetPressedKey();
     17c:	0e 94 03 05 	call	0xa06	; 0xa06 <KPD_u8GetPressedKey>
     180:	8b 83       	std	Y+3, r24	; 0x03
			key =255;
			LCD_vidClear();
			LCD_vidSetPosition(0,0);
			LCD_vidWriteString("Desired Temp:");
			key =KPD_u8GetPressedKey();
			while(key==255)
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	8f 3f       	cpi	r24, 0xFF	; 255
     186:	d1 f3       	breq	.-12     	; 0x17c <APP_Prog+0xc4>
			{
				key =KPD_u8GetPressedKey();
			}
			LCD_vidSetPosition(1,5);
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	65 e0       	ldi	r22, 0x05	; 5
     18c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <LCD_vidSetPosition>
     190:	17 c0       	rjmp	.+46     	; 0x1c0 <APP_Prog+0x108>
			while(key!=8 )// Enter Button //////////////////////////// NOTED
		{

			key =KPD_u8GetPressedKey();
     192:	0e 94 03 05 	call	0xa06	; 0xa06 <KPD_u8GetPressedKey>
     196:	8b 83       	std	Y+3, r24	; 0x03
			if(key != 255)
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	8f 3f       	cpi	r24, 0xFF	; 255
     19c:	89 f0       	breq	.+34     	; 0x1c0 <APP_Prog+0x108>
			{

				value = value *10+key;
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9c 01       	movw	r18, r24
     1a6:	22 0f       	add	r18, r18
     1a8:	33 1f       	adc	r19, r19
     1aa:	c9 01       	movw	r24, r18
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	82 0f       	add	r24, r18
     1b6:	93 1f       	adc	r25, r19
     1b8:	98 2f       	mov	r25, r24
     1ba:	8b 81       	ldd	r24, Y+3	; 0x03
     1bc:	89 0f       	add	r24, r25
     1be:	89 83       	std	Y+1, r24	; 0x01
			while(key==255)
			{
				key =KPD_u8GetPressedKey();
			}
			LCD_vidSetPosition(1,5);
			while(key!=8 )// Enter Button //////////////////////////// NOTED
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	88 30       	cpi	r24, 0x08	; 8
     1c4:	31 f7       	brne	.-52     	; 0x192 <APP_Prog+0xda>
				value = value *10+key;
			}


		}
			LCD_vidWriteNumber(value);
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	bc 01       	movw	r22, r24
     1d2:	cd 01       	movw	r24, r26
     1d4:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vidWriteNumber>
			if(value<17)
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	81 31       	cpi	r24, 0x11	; 17
     1dc:	20 f4       	brcc	.+8      	; 0x1e6 <APP_Prog+0x12e>
			{
				MOTOR_off(MOTOR_1);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0e 94 a3 01 	call	0x346	; 0x346 <MOTOR_off>
     1e4:	26 c0       	rjmp	.+76     	; 0x232 <APP_Prog+0x17a>
			}
			else if (value> 17 && value <21)
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	82 31       	cpi	r24, 0x12	; 18
     1ea:	58 f0       	brcs	.+22     	; 0x202 <APP_Prog+0x14a>
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	85 31       	cpi	r24, 0x15	; 21
     1f0:	40 f4       	brcc	.+16     	; 0x202 <APP_Prog+0x14a>
			{
				MOTOR_speed(30);
     1f2:	8e e1       	ldi	r24, 0x1E	; 30
     1f4:	0e 94 4d 01 	call	0x29a	; 0x29a <MOTOR_speed>
				MOTOR_direction(MOTOR_1,FWD);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MOTOR_direction>
     200:	18 c0       	rjmp	.+48     	; 0x232 <APP_Prog+0x17a>


			}
			else if ( value >21 && value<23)
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	86 31       	cpi	r24, 0x16	; 22
     206:	58 f0       	brcs	.+22     	; 0x21e <APP_Prog+0x166>
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	87 31       	cpi	r24, 0x17	; 23
     20c:	40 f4       	brcc	.+16     	; 0x21e <APP_Prog+0x166>
			{
				MOTOR_direction(MOTOR_1,FWD);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MOTOR_direction>
				MOTOR_speed(60);
     216:	8c e3       	ldi	r24, 0x3C	; 60
     218:	0e 94 4d 01 	call	0x29a	; 0x29a <MOTOR_speed>
     21c:	0a c0       	rjmp	.+20     	; 0x232 <APP_Prog+0x17a>


			}
			else if ( value >25)
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	8a 31       	cpi	r24, 0x1A	; 26
     222:	38 f0       	brcs	.+14     	; 0x232 <APP_Prog+0x17a>
			{
				MOTOR_speed(90);
     224:	8a e5       	ldi	r24, 0x5A	; 90
     226:	0e 94 4d 01 	call	0x29a	; 0x29a <MOTOR_speed>
				MOTOR_direction(MOTOR_1,FWD);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MOTOR_direction>

			}

			state =GET;
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	8a 83       	std	Y+2, r24	; 0x02
     236:	4b cf       	rjmp	.-362    	; 0xce <APP_Prog+0x16>
			break;
		case GET:
			LCD_vidWriteNumber(value);
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	88 2f       	mov	r24, r24
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_vidWriteNumber>
     24a:	41 cf       	rjmp	.-382    	; 0xce <APP_Prog+0x16>

0000024c <MOTOR_init>:
#include "Motor.h"



void MOTOR_init(uint8_t numMotor)// numMotor (initialize Direction pins only (PWM initializes enable pins inside them))
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	0f 92       	push	r0
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	89 83       	std	Y+1, r24	; 0x01
	PWM_vidInit();
     258:	0e 94 72 06 	call	0xce4	; 0xce4 <PWM_vidInit>
	if(MOTOR_1==numMotor)
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	88 23       	and	r24, r24
     260:	59 f4       	brne	.+22     	; 0x278 <MOTOR_init+0x2c>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1A,DIO_OUTPUT);
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	62 e0       	ldi	r22, 0x02	; 2
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_1B,DIO_OUTPUT);
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	63 e0       	ldi	r22, 0x03	; 3
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
     276:	0d c0       	rjmp	.+26     	; 0x292 <MOTOR_init+0x46>
	}
	else if(MOTOR_2==numMotor)
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	51 f4       	brne	.+20     	; 0x292 <MOTOR_init+0x46>
	{
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2A,DIO_OUTPUT);
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	66 e0       	ldi	r22, 0x06	; 6
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(MOTOR_PORT,MOTOR_DIR_2B,DIO_OUTPUT);
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	67 e0       	ldi	r22, 0x07	; 7
     28c:	41 e0       	ldi	r20, 0x01	; 1
     28e:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	}
}
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <MOTOR_speed>:

void MOTOR_speed(uint8_t dutyCycle)//  30/60/90 (Start PWM and initialize duty cycle)
{
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	0f 92       	push	r0
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	89 83       	std	Y+1, r24	; 0x01
	PWM_SetDutyCycle(dutyCycle);
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	0e 94 b9 06 	call	0xd72	; 0xd72 <PWM_SetDutyCycle>
}
     2ac:	0f 90       	pop	r0
     2ae:	cf 91       	pop	r28
     2b0:	df 91       	pop	r29
     2b2:	08 95       	ret

000002b4 <MOTOR_direction>:
void MOTOR_direction(uint8_t numMotor, uint8_t DIR)//  numMotor/(FWD,REV) (Set direction of specified motor) i.e (MOTOR_1, FWD) meaning motor 1, move forward
{
     2b4:	df 93       	push	r29
     2b6:	cf 93       	push	r28
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <MOTOR_direction+0x6>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	89 83       	std	Y+1, r24	; 0x01
     2c0:	6a 83       	std	Y+2, r22	; 0x02
	if(MOTOR_1==numMotor)
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 23       	and	r24, r24
     2c6:	e1 f4       	brne	.+56     	; 0x300 <MOTOR_direction+0x4c>
	{
		if(FWD==DIR)
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	59 f4       	brne	.+22     	; 0x2e4 <MOTOR_direction+0x30>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_HIGH);
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	41 e0       	ldi	r20, 0x01	; 1
     2d4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	63 e0       	ldi	r22, 0x03	; 3
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
     2e2:	2c c0       	rjmp	.+88     	; 0x33c <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	88 23       	and	r24, r24
     2e8:	49 f5       	brne	.+82     	; 0x33c <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_HIGH);
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	63 e0       	ldi	r22, 0x03	; 3
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
     2fe:	1e c0       	rjmp	.+60     	; 0x33c <MOTOR_direction+0x88>
		}
	}
	else if(MOTOR_2==numMotor)
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	d9 f4       	brne	.+54     	; 0x33c <MOTOR_direction+0x88>
	{
		if(FWD==DIR)
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	59 f4       	brne	.+22     	; 0x322 <MOTOR_direction+0x6e>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_HIGH);
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	66 e0       	ldi	r22, 0x06	; 6
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	67 e0       	ldi	r22, 0x07	; 7
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
     320:	0d c0       	rjmp	.+26     	; 0x33c <MOTOR_direction+0x88>
		}
		else if(REV==DIR)
     322:	8a 81       	ldd	r24, Y+2	; 0x02
     324:	88 23       	and	r24, r24
     326:	51 f4       	brne	.+20     	; 0x33c <MOTOR_direction+0x88>
		{
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	66 e0       	ldi	r22, 0x06	; 6
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
			DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_HIGH);
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	67 e0       	ldi	r22, 0x07	; 7
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		}
	}
	
	
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <MOTOR_off>:
void MOTOR_off(uint8_t numMotor)// stop specified motor (writes LOW on DIR data pins)
{
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
	if(MOTOR_1==numMotor)
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	88 23       	and	r24, r24
     356:	59 f4       	brne	.+22     	; 0x36e <MOTOR_off+0x28>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1A,DIO_LOW);
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	62 e0       	ldi	r22, 0x02	; 2
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_1B,DIO_LOW);
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	63 e0       	ldi	r22, 0x03	; 3
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
     36c:	0d c0       	rjmp	.+26     	; 0x388 <MOTOR_off+0x42>
	}
	else if(MOTOR_2==numMotor)
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	51 f4       	brne	.+20     	; 0x388 <MOTOR_off+0x42>
	{
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2A,DIO_LOW);
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	66 e0       	ldi	r22, 0x06	; 6
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(MOTOR_PORT,MOTOR_DIR_2B,DIO_LOW);
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	67 e0       	ldi	r22, 0x07	; 7
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	}
     388:	0f 90       	pop	r0
     38a:	cf 91       	pop	r28
     38c:	df 91       	pop	r29
     38e:	08 95       	ret

00000390 <TEMP_u8GetReading>:
#include "TEMP_private.h"
#include "TEMP_config.h"
#include "TEMP_interface.h"

uint8_t TEMP_u8GetReading(uint8_t ADC_Channel)
{
     390:	df 93       	push	r29
     392:	cf 93       	push	r28
     394:	00 d0       	rcall	.+0      	; 0x396 <TEMP_u8GetReading+0x6>
     396:	00 d0       	rcall	.+0      	; 0x398 <TEMP_u8GetReading+0x8>
     398:	0f 92       	push	r0
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t local_u8TEMP;
	uint16_t local_u16MiliVolt;
	uint8_t local_u8ADC_Read;
	ADC_u8StartConversionSynch(ADC_Channel,&local_u8ADC_Read);
     3a0:	9e 01       	movw	r18, r28
     3a2:	2c 5f       	subi	r18, 0xFC	; 252
     3a4:	3f 4f       	sbci	r19, 0xFF	; 255
     3a6:	8d 81       	ldd	r24, Y+5	; 0x05
     3a8:	b9 01       	movw	r22, r18
     3aa:	0e 94 45 0a 	call	0x148a	; 0x148a <ADC_u8StartConversionSynch>
	local_u16MiliVolt=(uint16_t)(((uint32_t)local_u8ADC_Read*Vref)/TWO_P_RESOLUTION);
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	28 e8       	ldi	r18, 0x88	; 136
     3ba:	33 e1       	ldi	r19, 0x13	; 19
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	bc 01       	movw	r22, r24
     3c2:	cd 01       	movw	r24, r26
     3c4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsi3>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	89 2f       	mov	r24, r25
     3ce:	9a 2f       	mov	r25, r26
     3d0:	ab 2f       	mov	r26, r27
     3d2:	bb 27       	eor	r27, r27
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
	local_u8TEMP=local_u16MiliVolt/10;
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	2a e0       	ldi	r18, 0x0A	; 10
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	b9 01       	movw	r22, r18
     3e2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodhi4>
     3e6:	cb 01       	movw	r24, r22
     3e8:	8b 83       	std	Y+3, r24	; 0x03
	return local_u8TEMP;
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03

}
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <LCD_vidInit>:

// ********* FUNCTIONS IMPLMENTATION **********

// function to intialize the LCD with the configured pins
void LCD_vidInit(void)
{
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	if (LCD_Status == LCD_NOT_INITIALIZED)
     404:	80 91 94 00 	lds	r24, 0x0094
     408:	88 23       	and	r24, r24
     40a:	09 f0       	breq	.+2      	; 0x40e <LCD_vidInit+0x12>
     40c:	3f c0       	rjmp	.+126    	; 0x48c <LCD_vidInit+0x90>
	{
		// setting the pins direction
		DIO_SETpinDir(LCD_Port, LCD_RS, DIO_OUTPUT);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_RW, DIO_OUTPUT);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_E, DIO_OUTPUT);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	63 e0       	ldi	r22, 0x03	; 3
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D4, DIO_OUTPUT);
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	64 e0       	ldi	r22, 0x04	; 4
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D5, DIO_OUTPUT);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D6, DIO_OUTPUT);
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	66 e0       	ldi	r22, 0x06	; 6
     444:	41 e0       	ldi	r20, 0x01	; 1
     446:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		DIO_SETpinDir(LCD_Port, LCD_D7, DIO_OUTPUT);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	67 e0       	ldi	r22, 0x07	; 7
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
		delay(65000);
     454:	88 ee       	ldi	r24, 0xE8	; 232
     456:	9d ef       	ldi	r25, 0xFD	; 253
     458:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		LCD_Status = LCD_INITIALIZED;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 94 00 	sts	0x0094, r24

		LCD_vidWriteCommand(0b00101000);
     462:	88 e2       	ldi	r24, 0x28	; 40
     464:	0e 94 49 02 	call	0x492	; 0x492 <LCD_vidWriteCommand>
		delay(5000);
     468:	88 e8       	ldi	r24, 0x88	; 136
     46a:	93 e1       	ldi	r25, 0x13	; 19
     46c:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		LCD_vidWriteCommand(0b00001100);
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	0e 94 49 02 	call	0x492	; 0x492 <LCD_vidWriteCommand>
		delay(5000);
     476:	88 e8       	ldi	r24, 0x88	; 136
     478:	93 e1       	ldi	r25, 0x13	; 19
     47a:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		LCD_vidWriteCommand(0b00000001);
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 49 02 	call	0x492	; 0x492 <LCD_vidWriteCommand>
		delay(5000);
     484:	88 e8       	ldi	r24, 0x88	; 136
     486:	93 e1       	ldi	r25, 0x13	; 19
     488:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
	}
	else
	{
		// do nothing
	}
}
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <LCD_vidWriteCommand>:

// function to send a command to LCD
void LCD_vidWriteCommand(uint8_t command)
{
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	0f 92       	push	r0
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     49e:	80 91 94 00 	lds	r24, 0x0094
     4a2:	88 23       	and	r24, r24
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <LCD_vidWriteCommand+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_COMMAND_SID);
     4a6:	88 e7       	ldi	r24, 0x78	; 120
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     4ae:	81 c0       	rjmp	.+258    	; 0x5b2 <LCD_vidWriteCommand+0x120>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	62 e0       	ldi	r22, 0x02	; 2
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 4));
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	82 95       	swap	r24
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	98 2f       	mov	r25, r24
     4cc:	91 70       	andi	r25, 0x01	; 1
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	49 2f       	mov	r20, r25
     4d4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 5));
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	82 95       	swap	r24
     4dc:	86 95       	lsr	r24
     4de:	87 70       	andi	r24, 0x07	; 7
     4e0:	98 2f       	mov	r25, r24
     4e2:	91 70       	andi	r25, 0x01	; 1
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	65 e0       	ldi	r22, 0x05	; 5
     4e8:	49 2f       	mov	r20, r25
     4ea:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 6));
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	82 95       	swap	r24
     4f2:	86 95       	lsr	r24
     4f4:	86 95       	lsr	r24
     4f6:	83 70       	andi	r24, 0x03	; 3
     4f8:	98 2f       	mov	r25, r24
     4fa:	91 70       	andi	r25, 0x01	; 1
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	66 e0       	ldi	r22, 0x06	; 6
     500:	49 2f       	mov	r20, r25
     502:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 7));
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	98 2f       	mov	r25, r24
     50a:	99 1f       	adc	r25, r25
     50c:	99 27       	eor	r25, r25
     50e:	99 1f       	adc	r25, r25
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	67 e0       	ldi	r22, 0x07	; 7
     514:	49 2f       	mov	r20, r25
     516:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	63 e0       	ldi	r22, 0x03	; 3
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		delay(5000);
     524:	88 e8       	ldi	r24, 0x88	; 136
     526:	93 e1       	ldi	r25, 0x13	; 19
     528:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	63 e0       	ldi	r22, 0x03	; 3
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 0);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(command, 0));
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	98 2f       	mov	r25, r24
     54e:	91 70       	andi	r25, 0x01	; 1
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	64 e0       	ldi	r22, 0x04	; 4
     554:	49 2f       	mov	r20, r25
     556:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(command, 1));
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	86 95       	lsr	r24
     55e:	98 2f       	mov	r25, r24
     560:	91 70       	andi	r25, 0x01	; 1
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	65 e0       	ldi	r22, 0x05	; 5
     566:	49 2f       	mov	r20, r25
     568:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(command, 2));
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	98 2f       	mov	r25, r24
     574:	91 70       	andi	r25, 0x01	; 1
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	66 e0       	ldi	r22, 0x06	; 6
     57a:	49 2f       	mov	r20, r25
     57c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(command, 3));
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	86 95       	lsr	r24
     584:	86 95       	lsr	r24
     586:	86 95       	lsr	r24
     588:	98 2f       	mov	r25, r24
     58a:	91 70       	andi	r25, 0x01	; 1
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	67 e0       	ldi	r22, 0x07	; 7
     590:	49 2f       	mov	r20, r25
     592:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	63 e0       	ldi	r22, 0x03	; 3
     59a:	41 e0       	ldi	r20, 0x01	; 1
     59c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		delay(5000);
     5a0:	88 e8       	ldi	r24, 0x88	; 136
     5a2:	93 e1       	ldi	r25, 0x13	; 19
     5a4:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	63 e0       	ldi	r22, 0x03	; 3
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	}
}
     5b2:	0f 90       	pop	r0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <LCD_vidWriteData>:

// function that writes  one element on the LCD
void LCD_vidWriteData(uint8_t data)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	0f 92       	push	r0
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	89 83       	std	Y+1, r24	; 0x01
	if (LCD_Status == LCD_NOT_INITIALIZED)
     5c6:	80 91 94 00 	lds	r24, 0x0094
     5ca:	88 23       	and	r24, r24
     5cc:	29 f4       	brne	.+10     	; 0x5d8 <LCD_vidWriteData+0x1e>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_DATA_SID);
     5ce:	88 e7       	ldi	r24, 0x78	; 120
     5d0:	62 e0       	ldi	r22, 0x02	; 2
     5d2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     5d6:	81 c0       	rjmp	.+258    	; 0x6da <LCD_vidWriteData+0x120>
	}
	else
	{
		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	62 e0       	ldi	r22, 0x02	; 2
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 4));
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	82 95       	swap	r24
     5f0:	8f 70       	andi	r24, 0x0F	; 15
     5f2:	98 2f       	mov	r25, r24
     5f4:	91 70       	andi	r25, 0x01	; 1
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	64 e0       	ldi	r22, 0x04	; 4
     5fa:	49 2f       	mov	r20, r25
     5fc:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 5));
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	82 95       	swap	r24
     604:	86 95       	lsr	r24
     606:	87 70       	andi	r24, 0x07	; 7
     608:	98 2f       	mov	r25, r24
     60a:	91 70       	andi	r25, 0x01	; 1
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	65 e0       	ldi	r22, 0x05	; 5
     610:	49 2f       	mov	r20, r25
     612:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 6));
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	82 95       	swap	r24
     61a:	86 95       	lsr	r24
     61c:	86 95       	lsr	r24
     61e:	83 70       	andi	r24, 0x03	; 3
     620:	98 2f       	mov	r25, r24
     622:	91 70       	andi	r25, 0x01	; 1
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	66 e0       	ldi	r22, 0x06	; 6
     628:	49 2f       	mov	r20, r25
     62a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 7));
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	98 2f       	mov	r25, r24
     632:	99 1f       	adc	r25, r25
     634:	99 27       	eor	r25, r25
     636:	99 1f       	adc	r25, r25
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	67 e0       	ldi	r22, 0x07	; 7
     63c:	49 2f       	mov	r20, r25
     63e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		delay(5000);
     64c:	88 e8       	ldi	r24, 0x88	; 136
     64e:	93 e1       	ldi	r25, 0x13	; 19
     650:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	63 e0       	ldi	r22, 0x03	; 3
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_RS, 1);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_RW, 0);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D4, GET_BIT(data, 0));
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	98 2f       	mov	r25, r24
     676:	91 70       	andi	r25, 0x01	; 1
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	64 e0       	ldi	r22, 0x04	; 4
     67c:	49 2f       	mov	r20, r25
     67e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D5, GET_BIT(data, 1));
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	86 95       	lsr	r24
     686:	98 2f       	mov	r25, r24
     688:	91 70       	andi	r25, 0x01	; 1
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	65 e0       	ldi	r22, 0x05	; 5
     68e:	49 2f       	mov	r20, r25
     690:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D6, GET_BIT(data, 2));
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	86 95       	lsr	r24
     698:	86 95       	lsr	r24
     69a:	98 2f       	mov	r25, r24
     69c:	91 70       	andi	r25, 0x01	; 1
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	66 e0       	ldi	r22, 0x06	; 6
     6a2:	49 2f       	mov	r20, r25
     6a4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		DIO_SETpinVal(LCD_Port, LCD_D7, GET_BIT(data, 3));
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	86 95       	lsr	r24
     6ac:	86 95       	lsr	r24
     6ae:	86 95       	lsr	r24
     6b0:	98 2f       	mov	r25, r24
     6b2:	91 70       	andi	r25, 0x01	; 1
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	67 e0       	ldi	r22, 0x07	; 7
     6b8:	49 2f       	mov	r20, r25
     6ba:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>

		DIO_SETpinVal(LCD_Port, LCD_E, STD_HIGH);
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	63 e0       	ldi	r22, 0x03	; 3
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		delay(5000);
     6c8:	88 e8       	ldi	r24, 0x88	; 136
     6ca:	93 e1       	ldi	r25, 0x13	; 19
     6cc:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
		DIO_SETpinVal(LCD_Port, LCD_E, STD_LOW);
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	63 e0       	ldi	r22, 0x03	; 3
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	}
}
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <LCD_vidWriteString>:
// function to write string on the LCD
void LCD_vidWriteString(uint8_t *string)
{
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <LCD_vidWriteString+0x6>
     6e8:	0f 92       	push	r0
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	9b 83       	std	Y+3, r25	; 0x03
     6f0:	8a 83       	std	Y+2, r24	; 0x02
	if (string == NULL_PTR)
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	9b 81       	ldd	r25, Y+3	; 0x03
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	29 f4       	brne	.+10     	; 0x704 <LCD_vidWriteString+0x22>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     6fa:	88 e7       	ldi	r24, 0x78	; 120
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     702:	24 c0       	rjmp	.+72     	; 0x74c <LCD_vidWriteString+0x6a>
	}
	else if (LCD_Status == LCD_NOT_INITIALIZED)
     704:	80 91 94 00 	lds	r24, 0x0094
     708:	88 23       	and	r24, r24
     70a:	29 f4       	brne	.+10     	; 0x716 <LCD_vidWriteString+0x34>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
     70c:	88 e7       	ldi	r24, 0x78	; 120
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     714:	1b c0       	rjmp	.+54     	; 0x74c <LCD_vidWriteString+0x6a>
	}
	else
	{
		uint8_t index = 0;
     716:	19 82       	std	Y+1, r1	; 0x01
     718:	0e c0       	rjmp	.+28     	; 0x736 <LCD_vidWriteString+0x54>
		while (string[index] != 0)
		{
			LCD_vidWriteData(string[index]);
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	28 2f       	mov	r18, r24
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	9b 81       	ldd	r25, Y+3	; 0x03
     724:	fc 01       	movw	r30, r24
     726:	e2 0f       	add	r30, r18
     728:	f3 1f       	adc	r31, r19
     72a:	80 81       	ld	r24, Z
     72c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <LCD_vidWriteData>
			index++;
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	89 83       	std	Y+1, r24	; 0x01
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_STRING_SID);
	}
	else
	{
		uint8_t index = 0;
		while (string[index] != 0)
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	9b 81       	ldd	r25, Y+3	; 0x03
     740:	fc 01       	movw	r30, r24
     742:	e2 0f       	add	r30, r18
     744:	f3 1f       	adc	r31, r19
     746:	80 81       	ld	r24, Z
     748:	88 23       	and	r24, r24
     74a:	39 f7       	brne	.-50     	; 0x71a <LCD_vidWriteString+0x38>
		{
			LCD_vidWriteData(string[index]);
			index++;
		}
	}
}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	cf 91       	pop	r28
     754:	df 91       	pop	r29
     756:	08 95       	ret

00000758 <LCD_vidWriteNumber>:

// function to write a number on the LCD
void LCD_vidWriteNumber(uint32_t num)
{
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	28 97       	sbiw	r28, 0x08	; 8
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	6d 83       	std	Y+5, r22	; 0x05
     776:	7e 83       	std	Y+6, r23	; 0x06
     778:	8f 83       	std	Y+7, r24	; 0x07
     77a:	98 87       	std	Y+8, r25	; 0x08
	if (LCD_Status == LCD_NOT_INITIALIZED)
     77c:	80 91 94 00 	lds	r24, 0x0094
     780:	88 23       	and	r24, r24
     782:	29 f4       	brne	.+10     	; 0x78e <LCD_vidWriteNumber+0x36>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_WRITE_NUMBER_SID);
     784:	88 e7       	ldi	r24, 0x78	; 120
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     78c:	7f c0       	rjmp	.+254    	; 0x88c <__stack+0x2d>
	}
	else
	{
	uint32_t reversed = 1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	a0 e0       	ldi	r26, 0x00	; 0
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	ab 83       	std	Y+3, r26	; 0x03
     79c:	bc 83       	std	Y+4, r27	; 0x04
	if (num == 0)
     79e:	8d 81       	ldd	r24, Y+5	; 0x05
     7a0:	9e 81       	ldd	r25, Y+6	; 0x06
     7a2:	af 81       	ldd	r26, Y+7	; 0x07
     7a4:	b8 85       	ldd	r27, Y+8	; 0x08
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	a1 05       	cpc	r26, r1
     7aa:	b1 05       	cpc	r27, r1
     7ac:	d1 f5       	brne	.+116    	; 0x822 <LCD_vidWriteNumber+0xca>
	{
		LCD_vidWriteData('0');
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <LCD_vidWriteData>
     7b4:	6b c0       	rjmp	.+214    	; 0x88c <__stack+0x2d>
	}
	else
	{
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	ab 81       	ldd	r26, Y+3	; 0x03
     7bc:	bc 81       	ldd	r27, Y+4	; 0x04
     7be:	2a e0       	ldi	r18, 0x0A	; 10
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	bc 01       	movw	r22, r24
     7c8:	cd 01       	movw	r24, r26
     7ca:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsi3>
     7ce:	7b 01       	movw	r14, r22
     7d0:	8c 01       	movw	r16, r24
     7d2:	8d 81       	ldd	r24, Y+5	; 0x05
     7d4:	9e 81       	ldd	r25, Y+6	; 0x06
     7d6:	af 81       	ldd	r26, Y+7	; 0x07
     7d8:	b8 85       	ldd	r27, Y+8	; 0x08
     7da:	2a e0       	ldi	r18, 0x0A	; 10
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	0e 94 bf 0b 	call	0x177e	; 0x177e <__udivmodsi4>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	8e 0d       	add	r24, r14
     7f0:	9f 1d       	adc	r25, r15
     7f2:	a0 1f       	adc	r26, r16
     7f4:	b1 1f       	adc	r27, r17
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	ab 83       	std	Y+3, r26	; 0x03
     7fc:	bc 83       	std	Y+4, r27	; 0x04
			num /= 10;
     7fe:	8d 81       	ldd	r24, Y+5	; 0x05
     800:	9e 81       	ldd	r25, Y+6	; 0x06
     802:	af 81       	ldd	r26, Y+7	; 0x07
     804:	b8 85       	ldd	r27, Y+8	; 0x08
     806:	2a e0       	ldi	r18, 0x0A	; 10
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0e 94 bf 0b 	call	0x177e	; 0x177e <__udivmodsi4>
     816:	da 01       	movw	r26, r20
     818:	c9 01       	movw	r24, r18
     81a:	8d 83       	std	Y+5, r24	; 0x05
     81c:	9e 83       	std	Y+6, r25	; 0x06
     81e:	af 83       	std	Y+7, r26	; 0x07
     820:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_vidWriteData('0');
	}
	else
	{
		while (num != 0)
     822:	8d 81       	ldd	r24, Y+5	; 0x05
     824:	9e 81       	ldd	r25, Y+6	; 0x06
     826:	af 81       	ldd	r26, Y+7	; 0x07
     828:	b8 85       	ldd	r27, Y+8	; 0x08
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	a1 05       	cpc	r26, r1
     82e:	b1 05       	cpc	r27, r1
     830:	11 f6       	brne	.-124    	; 0x7b6 <LCD_vidWriteNumber+0x5e>
     832:	23 c0       	rjmp	.+70     	; 0x87a <__stack+0x1b>
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
		{
			LCD_vidWriteData(((reversed % 10) + '0'));
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	ab 81       	ldd	r26, Y+3	; 0x03
     83a:	bc 81       	ldd	r27, Y+4	; 0x04
     83c:	2a e0       	ldi	r18, 0x0A	; 10
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	0e 94 bf 0b 	call	0x177e	; 0x177e <__udivmodsi4>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	80 5d       	subi	r24, 0xD0	; 208
     852:	0e 94 dd 02 	call	0x5ba	; 0x5ba <LCD_vidWriteData>
			reversed /= 10;
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	ab 81       	ldd	r26, Y+3	; 0x03
     85c:	bc 81       	ldd	r27, Y+4	; 0x04
     85e:	2a e0       	ldi	r18, 0x0A	; 10
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	0e 94 bf 0b 	call	0x177e	; 0x177e <__udivmodsi4>
     86e:	da 01       	movw	r26, r20
     870:	c9 01       	movw	r24, r18
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	ab 83       	std	Y+3, r26	; 0x03
     878:	bc 83       	std	Y+4, r27	; 0x04
		while (num != 0)
		{
			reversed = (reversed * 10) + (num % 10);
			num /= 10;
		}
		while (reversed != 1)
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	ab 81       	ldd	r26, Y+3	; 0x03
     880:	bc 81       	ldd	r27, Y+4	; 0x04
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	91 05       	cpc	r25, r1
     886:	a1 05       	cpc	r26, r1
     888:	b1 05       	cpc	r27, r1
     88a:	a1 f6       	brne	.-88     	; 0x834 <LCD_vidWriteNumber+0xdc>
			LCD_vidWriteData(((reversed % 10) + '0'));
			reversed /= 10;
		}
	}
	}
}
     88c:	28 96       	adiw	r28, 0x08	; 8
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <LCD_vidSetPosition>:

// function that sets the postion that u want to write in
void LCD_vidSetPosition(uint8_t row, uint8_t col)
{
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <LCD_vidSetPosition+0x6>
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <LCD_vidSetPosition+0x8>
     8ae:	0f 92       	push	r0
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	8a 83       	std	Y+2, r24	; 0x02
     8b6:	6b 83       	std	Y+3, r22	; 0x03
	if (LCD_Status == LCD_NOT_INITIALIZED)
     8b8:	80 91 94 00 	lds	r24, 0x0094
     8bc:	88 23       	and	r24, r24
     8be:	29 f4       	brne	.+10     	; 0x8ca <LCD_vidSetPosition+0x24>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_SET_POSTION_SID);
     8c0:	88 e7       	ldi	r24, 0x78	; 120
     8c2:	65 e0       	ldi	r22, 0x05	; 5
     8c4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     8c8:	1e c0       	rjmp	.+60     	; 0x906 <LCD_vidSetPosition+0x60>
	}
	else
	{
	uint8_t adrs = 128;
     8ca:	80 e8       	ldi	r24, 0x80	; 128
     8cc:	89 83       	std	Y+1, r24	; 0x01
	switch (row)
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	3d 83       	std	Y+5, r19	; 0x05
     8d6:	2c 83       	std	Y+4, r18	; 0x04
     8d8:	8c 81       	ldd	r24, Y+4	; 0x04
     8da:	9d 81       	ldd	r25, Y+5	; 0x05
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	31 f0       	breq	.+12     	; 0x8ec <LCD_vidSetPosition+0x46>
     8e0:	2c 81       	ldd	r18, Y+4	; 0x04
     8e2:	3d 81       	ldd	r19, Y+5	; 0x05
     8e4:	21 30       	cpi	r18, 0x01	; 1
     8e6:	31 05       	cpc	r19, r1
     8e8:	31 f0       	breq	.+12     	; 0x8f6 <LCD_vidSetPosition+0x50>
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <LCD_vidSetPosition+0x5a>
	{
	case 0:
		adrs += col;
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9b 81       	ldd	r25, Y+3	; 0x03
     8f0:	89 0f       	add	r24, r25
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <LCD_vidSetPosition+0x5a>
		break;
	case 1:
		adrs += (64 + col);
     8f6:	9b 81       	ldd	r25, Y+3	; 0x03
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	89 0f       	add	r24, r25
     8fc:	80 5c       	subi	r24, 0xC0	; 192
     8fe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_vidWriteCommand(adrs);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	0e 94 49 02 	call	0x492	; 0x492 <LCD_vidWriteCommand>
	}
}
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	08 95       	ret

00000916 <LCD_vidClear>:

// function to clear the LCD
void LCD_vidClear(void)
{   if (LCD_Status == LCD_NOT_INITIALIZED)
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	80 91 94 00 	lds	r24, 0x0094
     922:	88 23       	and	r24, r24
     924:	29 f4       	brne	.+10     	; 0x930 <LCD_vidClear+0x1a>
	{
		Det_ReportError(LCD_MODULE_ID, LCD_CLEAR_SID);
     926:	88 e7       	ldi	r24, 0x78	; 120
     928:	66 e0       	ldi	r22, 0x06	; 6
     92a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Det_ReportError>
     92e:	07 c0       	rjmp	.+14     	; 0x93e <LCD_vidClear+0x28>
	}
	else
	{
	LCD_vidWriteCommand(0b00000001);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 49 02 	call	0x492	; 0x492 <LCD_vidWriteCommand>
	delay(8000);
     936:	80 e4       	ldi	r24, 0x40	; 64
     938:	9f e1       	ldi	r25, 0x1F	; 31
     93a:	0e 94 a2 04 	call	0x944	; 0x944 <delay>
}
}
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <delay>:

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	00 d0       	rcall	.+0      	; 0x94a <delay+0x6>
     94a:	00 d0       	rcall	.+0      	; 0x94c <delay+0x8>
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	9c 83       	std	Y+4, r25	; 0x04
     952:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t counter = 0;
     954:	1a 82       	std	Y+2, r1	; 0x02
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	05 c0       	rjmp	.+10     	; 0x964 <delay+0x20>
	while (counter < max) // loop to perform a delay
	{
		counter++;
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01

//*******  PRIVATE FUNCTIONS IMPLMENTATION ********
static void delay(uint16_t max)
{
	uint16_t counter = 0;
	while (counter < max) // loop to perform a delay
     964:	29 81       	ldd	r18, Y+1	; 0x01
     966:	3a 81       	ldd	r19, Y+2	; 0x02
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	28 17       	cp	r18, r24
     96e:	39 07       	cpc	r19, r25
     970:	a0 f3       	brcs	.-24     	; 0x95a <delay+0x16>
	{
		counter++;
	}
}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	cf 91       	pop	r28
     97c:	df 91       	pop	r29
     97e:	08 95       	ret

00000980 <KPD_init>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"
//#include<util/delay.h>

void KPD_init(void)
{
     980:	df 93       	push	r29
     982:	cf 93       	push	r28
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
	/*Set columns & Rows Direction*/
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN0_PIN,DIO_OUTPUT);
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	65 e0       	ldi	r22, 0x05	; 5
     98c:	41 e0       	ldi	r20, 0x01	; 1
     98e:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN1_PIN,DIO_OUTPUT);
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	66 e0       	ldi	r22, 0x06	; 6
     996:	41 e0       	ldi	r20, 0x01	; 1
     998:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_COLUMN2_PIN,DIO_OUTPUT);
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	67 e0       	ldi	r22, 0x07	; 7
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_COLUMN3_PIN,DIO_OUTPUT);
	DIO_SETpinDir(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	62 e0       	ldi	r22, 0x02	; 2
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	63 e0       	ldi	r22, 0x03	; 3
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	DIO_SETpinDir(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	64 e0       	ldi	r22, 0x04	; 4
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
	//DIO_SETpinDir(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);

	/*Set Rows to work in pull up mode*/
	DIO_SETpinVal(KPD_PORT,KPD_ROW0_PIN,DIO_HIGH);
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	62 e0       	ldi	r22, 0x02	; 2
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW1_PIN,DIO_HIGH);
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_ROW2_PIN,DIO_HIGH);
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	64 e0       	ldi	r22, 0x04	; 4
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_ROW3_PIN,DIO_HIGH);

	/*Deactivate columns by setting them high*/
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN0_PIN,DIO_HIGH);
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	65 e0       	ldi	r22, 0x05	; 5
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN1_PIN,DIO_HIGH);
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	66 e0       	ldi	r22, 0x06	; 6
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	DIO_SETpinVal(KPD_PORT,KPD_COLUMN2_PIN,DIO_HIGH);
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	67 e0       	ldi	r22, 0x07	; 7
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	//DIO_SETpinVal(KPD_PORT,KPD_COLUMN3_PIN,DIO_HIGH);
}
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <KPD_u8GetPressedKey>:

uint8_t KPD_u8GetPressedKey(void)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <KPD_u8GetPressedKey+0x6>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <KPD_u8GetPressedKey+0x8>
     a0e:	0f 92       	push	r0
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8Pressed=KPD_NO_Pressed;
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     a18:	19 82       	std	Y+1, r1	; 0x01
     a1a:	6a c0       	rjmp	.+212    	; 0xaf0 <KPD_u8GetPressedKey+0xea>
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	fc 01       	movw	r30, r24
     a24:	ec 57       	subi	r30, 0x7C	; 124
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	90 81       	ld	r25, Z
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	69 2f       	mov	r22, r25
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     a34:	1a 82       	std	Y+2, r1	; 0x02
     a36:	49 c0       	rjmp	.+146    	; 0xaca <KPD_u8GetPressedKey+0xc4>
		{
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	fc 01       	movw	r30, r24
     a40:	e9 57       	subi	r30, 0x79	; 121
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	90 81       	ld	r25, Z
     a46:	9e 01       	movw	r18, r28
     a48:	2c 5f       	subi	r18, 0xFC	; 252
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	69 2f       	mov	r22, r25
     a50:	a9 01       	movw	r20, r18
     a52:	0e 94 82 09 	call	0x1304	; 0x1304 <DIO_GETpinVal>
			if(DIO_LOW==ROW_PIN_State)
     a56:	8c 81       	ldd	r24, Y+4	; 0x04
     a58:	88 23       	and	r24, r24
     a5a:	a1 f5       	brne	.+104    	; 0xac4 <KPD_u8GetPressedKey+0xbe>
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	28 2f       	mov	r18, r24
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	48 2f       	mov	r20, r24
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	c9 01       	movw	r24, r18
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21
     a76:	fc 01       	movw	r30, r24
     a78:	e6 57       	subi	r30, 0x76	; 118
     a7a:	ff 4f       	sbci	r31, 0xFF	; 255
     a7c:	80 81       	ld	r24, Z
     a7e:	8b 83       	std	Y+3, r24	; 0x03
     a80:	0f c0       	rjmp	.+30     	; 0xaa0 <KPD_u8GetPressedKey+0x9a>
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
     a82:	8a 81       	ldd	r24, Y+2	; 0x02
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	fc 01       	movw	r30, r24
     a8a:	e9 57       	subi	r30, 0x79	; 121
     a8c:	ff 4f       	sbci	r31, 0xFF	; 255
     a8e:	90 81       	ld	r25, Z
     a90:	9e 01       	movw	r18, r28
     a92:	2c 5f       	subi	r18, 0xFC	; 252
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	69 2f       	mov	r22, r25
     a9a:	a9 01       	movw	r20, r18
     a9c:	0e 94 82 09 	call	0x1304	; 0x1304 <DIO_GETpinVal>
			DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
			if(DIO_LOW==ROW_PIN_State)
			{
				local_u8Pressed=KPD_Arr[KPD_ROWS_Index][KPD_COLUMNS_Index];
				/*Polling until key released*/
				while(DIO_LOW==ROW_PIN_State)
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	88 23       	and	r24, r24
     aa4:	71 f3       	breq	.-36     	; 0xa82 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GETpinVal(KPD_PORT,KPD_ROWS[KPD_ROWS_Index],&ROW_PIN_State);
				}
				//_delay_ms(25);
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	ec 57       	subi	r30, 0x7C	; 124
     ab0:	ff 4f       	sbci	r31, 0xFF	; 255
     ab2:	90 81       	ld	r25, Z
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	69 2f       	mov	r22, r25
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
				return local_u8Pressed;
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	8d 83       	std	Y+5, r24	; 0x05
     ac2:	1c c0       	rjmp	.+56     	; 0xafc <KPD_u8GetPressedKey+0xf6>

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
	{
		/*Activate Columns*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_LOW);
		for(KPD_ROWS_Index=0;KPD_ROWS_Index<Row_num;KPD_ROWS_Index++)
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	8a 83       	std	Y+2, r24	; 0x02
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	08 f4       	brcc	.+2      	; 0xad2 <KPD_u8GetPressedKey+0xcc>
     ad0:	b3 cf       	rjmp	.-154    	; 0xa38 <KPD_u8GetPressedKey+0x32>
				DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
				return local_u8Pressed;
			}
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	fc 01       	movw	r30, r24
     ada:	ec 57       	subi	r30, 0x7C	; 124
     adc:	ff 4f       	sbci	r31, 0xFF	; 255
     ade:	90 81       	ld	r25, Z
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	69 2f       	mov	r22, r25
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
	static uint8_t KPD_Arr[Row_num][Column_num]=KPD_Arr_Val;
	static uint8_t KPD_ROWS[Row_num]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN};
	static uint8_t KPD_COLUMNS[Column_num]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
	uint8_t KPD_ROWS_Index,KPD_COLUMNS_Index,ROW_PIN_State;

	for(KPD_COLUMNS_Index=0;KPD_COLUMNS_Index<Column_num;KPD_COLUMNS_Index++)
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <KPD_u8GetPressedKey+0xf2>
     af6:	92 cf       	rjmp	.-220    	; 0xa1c <KPD_u8GetPressedKey+0x16>
		}
		/*Deactivate current column*/
		DIO_SETpinVal(KPD_PORT,KPD_COLUMNS[KPD_COLUMNS_Index],DIO_HIGH);
	}

	return local_u8Pressed;
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	8d 83       	std	Y+5, r24	; 0x05
     afc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	cf 91       	pop	r28
     b0a:	df 91       	pop	r29
     b0c:	08 95       	ret

00000b0e <TIMER_vidTimer0Init>:
void static (*CallBack_Timer0OVF)(void) = NULL_PTR;

static uint8_t gu8_intial_value = 0;

void TIMER_vidTimer0Init(void)
{
     b0e:	df 93       	push	r29
     b10:	cf 93       	push	r28
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62


    // setting waveform generation mode  ctc or normal
#if ( TIMER_0_MODE == NORMAL)
    TCCR0 = 0;
     b16:	e3 e5       	ldi	r30, 0x53	; 83
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	10 82       	st	Z, r1
    if( TIMER_0_OVF_INT == STD_ON){
        TIMSK |= 1;
     b1c:	a9 e5       	ldi	r26, 0x59	; 89
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e9 e5       	ldi	r30, 0x59	; 89
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	8c 93       	st	X, r24
    {
        //do nothing
    }
#endif

}
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <TIMER_vidTimer0Start>:


void TIMER_vidTimer0Start(uint8_t intial_value){
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	0f 92       	push	r0
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	89 83       	std	Y+1, r24	; 0x01
    TIMER_vidTimer0SetInitValue(intial_value);           // setting intial value
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	0e 94 d1 05 	call	0xba2	; 0xba2 <TIMER_vidTimer0SetInitValue>
    TCCR0 |= TIMER_0_PRESCALER;    // setting the prescaler
     b42:	a3 e5       	ldi	r26, 0x53	; 83
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e3 e5       	ldi	r30, 0x53	; 83
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	83 60       	ori	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
}
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <TIMER_vidTimer0Stop>:

void TIMER_vidTimer0Stop(void){
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= ~(0b111);  // clearing the prescaler bits 
     b60:	a3 e5       	ldi	r26, 0x53	; 83
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 7f       	andi	r24, 0xF8	; 248
     b6c:	8c 93       	st	X, r24
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <TIMER_u8Timer0_OVFflag>:

uint8_t TIMER_u8Timer0_OVFflag(void){
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,0);
     b7c:	e8 e5       	ldi	r30, 0x58	; 88
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 70       	andi	r24, 0x01	; 1
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <TIMER_u8Timer0_CTCflag>:

uint8_t TIMER_u8Timer0_CTCflag(void){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
return GET_BIT(TIFR,1);
     b92:	e8 e5       	ldi	r30, 0x58	; 88
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	86 95       	lsr	r24
     b9a:	81 70       	andi	r24, 0x01	; 1
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <TIMER_vidTimer0SetInitValue>:

void TIMER_vidTimer0SetInitValue(uint8_t intial_value){
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
    gu8_intial_value = intial_value ;
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 93 99 00 	sts	0x0099, r24
    TCNT0  = gu8_intial_value; 
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 91 99 00 	lds	r24, 0x0099
     bbc:	80 83       	st	Z, r24
}
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <SetCallBack_Timer0CTC>:


void SetCallBack_Timer0CTC(void(*func)(void)){
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <SetCallBack_Timer0CTC+0x6>
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	9a 83       	std	Y+2, r25	; 0x02
     bd2:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0CTC=func;
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	90 93 96 00 	sts	0x0096, r25
     bdc:	80 93 95 00 	sts	0x0095, r24
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <SetCallBack_Timer0OVF>:


void SetCallBack_Timer0OVF(void(*func)(void)){
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <SetCallBack_Timer0OVF+0x6>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	CallBack_Timer0OVF=func;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	90 93 98 00 	sts	0x0098, r25
     c00:	80 93 97 00 	sts	0x0097, r24
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <__vector_10>:


void __vector_10(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_10(void){
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
    if (CallBack_Timer0CTC != NULL_PTR)
     c38:	80 91 95 00 	lds	r24, 0x0095
     c3c:	90 91 96 00 	lds	r25, 0x0096
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	29 f0       	breq	.+10     	; 0xc4e <__vector_10+0x40>
    {
        CallBack_Timer0CTC();
     c44:	e0 91 95 00 	lds	r30, 0x0095
     c48:	f0 91 96 00 	lds	r31, 0x0096
     c4c:	09 95       	icall
    }
    

}
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_11>:

void __vector_11(void)__attribute__((signal,__INTR_ATTRS));
void  __vector_11(void){
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
    TCNT0  = gu8_intial_value;
     c9e:	e2 e5       	ldi	r30, 0x52	; 82
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 91 99 00 	lds	r24, 0x0099
     ca6:	80 83       	st	Z, r24
 if (CallBack_Timer0OVF != NULL_PTR)
     ca8:	80 91 97 00 	lds	r24, 0x0097
     cac:	90 91 98 00 	lds	r25, 0x0098
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	29 f0       	breq	.+10     	; 0xcbe <__vector_11+0x4a>
    {
        CallBack_Timer0OVF();
     cb4:	e0 91 97 00 	lds	r30, 0x0097
     cb8:	f0 91 98 00 	lds	r31, 0x0098
     cbc:	09 95       	icall
    }

}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <PWM_vidInit>:


static uint8_t PWM_timer_count = 0;
static uint8_t PWM_dutyCycle=0;

void PWM_vidInit(void){
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
    SetCallBack_Timer0OVF(PWM_vidstart);
     cec:	8c e8       	ldi	r24, 0x8C	; 140
     cee:	96 e0       	ldi	r25, 0x06	; 6
     cf0:	0e 94 f5 05 	call	0xbea	; 0xbea <SetCallBack_Timer0OVF>
    TIMER_vidTimer0Init();
     cf4:	0e 94 87 05 	call	0xb0e	; 0xb0e <TIMER_vidTimer0Init>
    DIO_SETpinDir(PWM_PORT1 , PWM_PIN1 , DIO_OUTPUT );
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	64 e0       	ldi	r22, 0x04	; 4
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
    DIO_SETpinDir(PWM_PORT2 , PWM_PIN2 , DIO_OUTPUT );
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	65 e0       	ldi	r22, 0x05	; 5
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_SETpinDir>
   // DIO_vidSetPinDirection(PWM_PORT3 , PWM_PIN3 , OUTPUT );
    TIMER_vidTimer0Start(PWM_INTIAL_TIMER_VALUE);
     d0c:	87 ee       	ldi	r24, 0xE7	; 231
     d0e:	0e 94 98 05 	call	0xb30	; 0xb30 <TIMER_vidTimer0Start>
}
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <PWM_vidstart>:

// the callback function when the timer overflow 
void PWM_vidstart(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
    PWM_timer_count++;
     d20:	80 91 9a 00 	lds	r24, 0x009A
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	80 93 9a 00 	sts	0x009A, r24
    if (PWM_timer_count == PWM_dutyCycle)
     d2a:	90 91 9a 00 	lds	r25, 0x009A
     d2e:	80 91 9b 00 	lds	r24, 0x009B
     d32:	98 17       	cp	r25, r24
     d34:	59 f4       	brne	.+22     	; 0xd4c <PWM_vidstart+0x34>
    {
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_LOW);
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	64 e0       	ldi	r22, 0x04	; 4
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_LOW);
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	65 e0       	ldi	r22, 0x05	; 5
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
     d4a:	10 c0       	rjmp	.+32     	; 0xd6c <PWM_vidstart+0x54>
       // DIO_vidSetPinValue(PWM_PORT3 , PWM_PIN3 , STD_LOW);
        
    }
    else if(PWM_timer_count >= 100)
     d4c:	80 91 9a 00 	lds	r24, 0x009A
     d50:	84 36       	cpi	r24, 0x64	; 100
     d52:	60 f0       	brcs	.+24     	; 0xd6c <PWM_vidstart+0x54>
    {
        PWM_timer_count = 0;
     d54:	10 92 9a 00 	sts	0x009A, r1
        DIO_SETpinVal(PWM_PORT1 , PWM_PIN1 , STD_HIGH);
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	64 e0       	ldi	r22, 0x04	; 4
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
        DIO_SETpinVal(PWM_PORT2 , PWM_PIN2 , STD_HIGH);
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	65 e0       	ldi	r22, 0x05	; 5
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SETpinVal>
    }
    else
    {
        // do nothing
    }
}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <PWM_SetDutyCycle>:

//function to change dutycycle
void PWM_SetDutyCycle(uint8_t dutyc){
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	89 83       	std	Y+1, r24	; 0x01
    PWM_dutyCycle = dutyc;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	80 93 9b 00 	sts	0x009B, r24
}
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <GlobalInerruptEnable>:
#include "Interrupt_interface.h"
#include "Interrupt_private.h"
#include "Interrupt_config.h"

void GlobalInerruptEnable(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     d94:	af e5       	ldi	r26, 0x5F	; 95
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ef e5       	ldi	r30, 0x5F	; 95
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	8c 93       	st	X, r24
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <DIO_SETpinDir>:
#include "../../01-LIB/BIT_MATH.h"
#include "../../01-LIB/STD_TYPES.h"
#include "DIO_register.h"
#include "DIO_interface.h"

uint8_t DIO_SETpinDir(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_STAT){
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	28 97       	sbiw	r28, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	8a 83       	std	Y+2, r24	; 0x02
     dbe:	6b 83       	std	Y+3, r22	; 0x03
     dc0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	08 f0       	brcs	.+2      	; 0xdce <DIO_SETpinDir+0x26>
     dcc:	f1 c0       	rjmp	.+482    	; 0xfb0 <DIO_SETpinDir+0x208>
	{
		/*If the direction of the pin is output*/
		if(u8_STAT==DIO_OUTPUT)
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <DIO_SETpinDir+0x2e>
     dd4:	71 c0       	rjmp	.+226    	; 0xeb8 <DIO_SETpinDir+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	38 87       	std	Y+8, r19	; 0x08
     dde:	2f 83       	std	Y+7, r18	; 0x07
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	98 85       	ldd	r25, Y+8	; 0x08
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	91 05       	cpc	r25, r1
     de8:	49 f1       	breq	.+82     	; 0xe3c <DIO_SETpinDir+0x94>
     dea:	2f 81       	ldd	r18, Y+7	; 0x07
     dec:	38 85       	ldd	r19, Y+8	; 0x08
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	2c f4       	brge	.+10     	; 0xdfe <DIO_SETpinDir+0x56>
     df4:	8f 81       	ldd	r24, Y+7	; 0x07
     df6:	98 85       	ldd	r25, Y+8	; 0x08
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	61 f0       	breq	.+24     	; 0xe14 <DIO_SETpinDir+0x6c>
     dfc:	5b c0       	rjmp	.+182    	; 0xeb4 <DIO_SETpinDir+0x10c>
     dfe:	2f 81       	ldd	r18, Y+7	; 0x07
     e00:	38 85       	ldd	r19, Y+8	; 0x08
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	31 05       	cpc	r19, r1
     e06:	71 f1       	breq	.+92     	; 0xe64 <DIO_SETpinDir+0xbc>
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	91 05       	cpc	r25, r1
     e10:	e9 f1       	breq	.+122    	; 0xe8c <DIO_SETpinDir+0xe4>
     e12:	50 c0       	rjmp	.+160    	; 0xeb4 <DIO_SETpinDir+0x10c>
			{
			case DIO_PORTA: SET_BIT(DDRA,u8_PIN);break;
     e14:	aa e3       	ldi	r26, 0x3A	; 58
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ea e3       	ldi	r30, 0x3A	; 58
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_SETpinDir+0x8a>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_SETpinDir+0x86>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	bb c0       	rjmp	.+374    	; 0xfb2 <DIO_SETpinDir+0x20a>
			case DIO_PORTB: SET_BIT(DDRB,u8_PIN);break;
     e3c:	a7 e3       	ldi	r26, 0x37	; 55
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e3       	ldi	r30, 0x37	; 55
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_SETpinDir+0xb2>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_SETpinDir+0xae>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	a7 c0       	rjmp	.+334    	; 0xfb2 <DIO_SETpinDir+0x20a>
			case DIO_PORTC: SET_BIT(DDRC,u8_PIN);break;
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_SETpinDir+0xda>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_SETpinDir+0xd6>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	93 c0       	rjmp	.+294    	; 0xfb2 <DIO_SETpinDir+0x20a>
			case DIO_PORTD: SET_BIT(DDRD,u8_PIN);break;
     e8c:	a1 e3       	ldi	r26, 0x31	; 49
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e3       	ldi	r30, 0x31	; 49
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_SETpinDir+0x102>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_SETpinDir+0xfe>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	7f c0       	rjmp	.+254    	; 0xfb2 <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;
     eb4:	19 82       	std	Y+1, r1	; 0x01
     eb6:	7d c0       	rjmp	.+250    	; 0xfb2 <DIO_SETpinDir+0x20a>
			}
		}
		/*If the direction of the pin is input*/
		else if(u8_STAT==DIO_INPUT)
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	88 23       	and	r24, r24
     ebc:	09 f0       	breq	.+2      	; 0xec0 <DIO_SETpinDir+0x118>
     ebe:	76 c0       	rjmp	.+236    	; 0xfac <DIO_SETpinDir+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3e 83       	std	Y+6, r19	; 0x06
     ec8:	2d 83       	std	Y+5, r18	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	91 05       	cpc	r25, r1
     ed2:	59 f1       	breq	.+86     	; 0xf2a <DIO_SETpinDir+0x182>
     ed4:	2d 81       	ldd	r18, Y+5	; 0x05
     ed6:	3e 81       	ldd	r19, Y+6	; 0x06
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	2c f4       	brge	.+10     	; 0xee8 <DIO_SETpinDir+0x140>
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	69 f0       	breq	.+26     	; 0xf00 <DIO_SETpinDir+0x158>
     ee6:	60 c0       	rjmp	.+192    	; 0xfa8 <DIO_SETpinDir+0x200>
     ee8:	2d 81       	ldd	r18, Y+5	; 0x05
     eea:	3e 81       	ldd	r19, Y+6	; 0x06
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	89 f1       	breq	.+98     	; 0xf54 <DIO_SETpinDir+0x1ac>
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	91 05       	cpc	r25, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <DIO_SETpinDir+0x156>
     efc:	40 c0       	rjmp	.+128    	; 0xf7e <DIO_SETpinDir+0x1d6>
     efe:	54 c0       	rjmp	.+168    	; 0xfa8 <DIO_SETpinDir+0x200>
			{
			case DIO_PORTA: CLR_BIT(DDRA,u8_PIN);break;
     f00:	aa e3       	ldi	r26, 0x3A	; 58
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e3       	ldi	r30, 0x3A	; 58
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_SETpinDir+0x176>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_SETpinDir+0x172>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	44 c0       	rjmp	.+136    	; 0xfb2 <DIO_SETpinDir+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB,u8_PIN);break;
     f2a:	a7 e3       	ldi	r26, 0x37	; 55
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e3       	ldi	r30, 0x37	; 55
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_SETpinDir+0x1a0>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_SETpinDir+0x19c>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	2f c0       	rjmp	.+94     	; 0xfb2 <DIO_SETpinDir+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC,u8_PIN);break;
     f54:	a4 e3       	ldi	r26, 0x34	; 52
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e4 e3       	ldi	r30, 0x34	; 52
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_SETpinDir+0x1ca>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_SETpinDir+0x1c6>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	1a c0       	rjmp	.+52     	; 0xfb2 <DIO_SETpinDir+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD,u8_PIN);break;
     f7e:	a1 e3       	ldi	r26, 0x31	; 49
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e1 e3       	ldi	r30, 0x31	; 49
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_SETpinDir+0x1f4>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_SETpinDir+0x1f0>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <DIO_SETpinDir+0x20a>
			default:Local_u8Error=NOK;break;
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <DIO_SETpinDir+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
     fac:	19 82       	std	Y+1, r1	; 0x01
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <DIO_SETpinDir+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
     fb0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	28 96       	adiw	r28, 0x08	; 8
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <DIO_SETportDir>:

uint8_t DIO_SETportDir(uint8_t u8_PORT,uint8_t u8_STAT)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <DIO_SETportDir+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_SETportDir+0x8>
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3d 83       	std	Y+5, r19	; 0x05
     fe4:	2c 83       	std	Y+4, r18	; 0x04
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	d1 f0       	breq	.+52     	; 0x1024 <DIO_SETportDir+0x5e>
     ff0:	2c 81       	ldd	r18, Y+4	; 0x04
     ff2:	3d 81       	ldd	r19, Y+5	; 0x05
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	2c f4       	brge	.+10     	; 0x1004 <DIO_SETportDir+0x3e>
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	61 f0       	breq	.+24     	; 0x101a <DIO_SETportDir+0x54>
    1002:	1f c0       	rjmp	.+62     	; 0x1042 <DIO_SETportDir+0x7c>
    1004:	2c 81       	ldd	r18, Y+4	; 0x04
    1006:	3d 81       	ldd	r19, Y+5	; 0x05
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	81 f0       	breq	.+32     	; 0x102e <DIO_SETportDir+0x68>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	81 f0       	breq	.+32     	; 0x1038 <DIO_SETportDir+0x72>
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <DIO_SETportDir+0x7c>
	{
		case DIO_PORTA: DDRA=u8_STAT;break;
    101a:	ea e3       	ldi	r30, 0x3A	; 58
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	80 83       	st	Z, r24
    1022:	10 c0       	rjmp	.+32     	; 0x1044 <DIO_SETportDir+0x7e>
		case DIO_PORTB: DDRB=u8_STAT;break;
    1024:	e7 e3       	ldi	r30, 0x37	; 55
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	80 83       	st	Z, r24
    102c:	0b c0       	rjmp	.+22     	; 0x1044 <DIO_SETportDir+0x7e>
		case DIO_PORTC: DDRC=u8_STAT;break;
    102e:	e4 e3       	ldi	r30, 0x34	; 52
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	80 83       	st	Z, r24
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <DIO_SETportDir+0x7e>
		case DIO_PORTD: DDRD=u8_STAT;break;
    1038:	e1 e3       	ldi	r30, 0x31	; 49
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	80 83       	st	Z, r24
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <DIO_SETportDir+0x7e>
		default:local_u8Error=NOK;break;
    1042:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_SETpinVal>:

uint8_t DIO_SETpinVal(uint8_t u8_PORT,uint8_t u8_PIN,uint8_t u8_VAL){
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	28 97       	sbiw	r28, 0x08	; 8
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)//check if the chosen is correct or not
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	88 30       	cpi	r24, 0x08	; 8
    1078:	08 f0       	brcs	.+2      	; 0x107c <DIO_SETpinVal+0x26>
    107a:	f1 c0       	rjmp	.+482    	; 0x125e <DIO_SETpinVal+0x208>
	{
		/*If the chosen value is high*/
		if(u8_VAL==DIO_HIGH)
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	09 f0       	breq	.+2      	; 0x1084 <DIO_SETpinVal+0x2e>
    1082:	71 c0       	rjmp	.+226    	; 0x1166 <DIO_SETpinVal+0x110>
		{
			/*Choose which port*/
			switch(u8_PORT)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	38 87       	std	Y+8, r19	; 0x08
    108c:	2f 83       	std	Y+7, r18	; 0x07
    108e:	8f 81       	ldd	r24, Y+7	; 0x07
    1090:	98 85       	ldd	r25, Y+8	; 0x08
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	49 f1       	breq	.+82     	; 0x10ea <DIO_SETpinVal+0x94>
    1098:	2f 81       	ldd	r18, Y+7	; 0x07
    109a:	38 85       	ldd	r19, Y+8	; 0x08
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <DIO_SETpinVal+0x56>
    10a2:	8f 81       	ldd	r24, Y+7	; 0x07
    10a4:	98 85       	ldd	r25, Y+8	; 0x08
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <DIO_SETpinVal+0x6c>
    10aa:	5b c0       	rjmp	.+182    	; 0x1162 <DIO_SETpinVal+0x10c>
    10ac:	2f 81       	ldd	r18, Y+7	; 0x07
    10ae:	38 85       	ldd	r19, Y+8	; 0x08
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	71 f1       	breq	.+92     	; 0x1112 <DIO_SETpinVal+0xbc>
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	e9 f1       	breq	.+122    	; 0x113a <DIO_SETpinVal+0xe4>
    10c0:	50 c0       	rjmp	.+160    	; 0x1162 <DIO_SETpinVal+0x10c>
			{
			case DIO_PORTA: SET_BIT(PORTA,u8_PIN);break;
    10c2:	ab e3       	ldi	r26, 0x3B	; 59
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_SETpinVal+0x8a>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_SETpinVal+0x86>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	bb c0       	rjmp	.+374    	; 0x1260 <DIO_SETpinVal+0x20a>
			case DIO_PORTB: SET_BIT(PORTB,u8_PIN);break;
    10ea:	a8 e3       	ldi	r26, 0x38	; 56
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e8 e3       	ldi	r30, 0x38	; 56
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_SETpinVal+0xb2>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_SETpinVal+0xae>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	a7 c0       	rjmp	.+334    	; 0x1260 <DIO_SETpinVal+0x20a>
			case DIO_PORTC: SET_BIT(PORTC,u8_PIN);break;
    1112:	a5 e3       	ldi	r26, 0x35	; 53
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e3       	ldi	r30, 0x35	; 53
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SETpinVal+0xda>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_SETpinVal+0xd6>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	93 c0       	rjmp	.+294    	; 0x1260 <DIO_SETpinVal+0x20a>
			case DIO_PORTD: SET_BIT(PORTD,u8_PIN);break;
    113a:	a2 e3       	ldi	r26, 0x32	; 50
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e2 e3       	ldi	r30, 0x32	; 50
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_SETpinVal+0x102>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_SETpinVal+0xfe>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	7f c0       	rjmp	.+254    	; 0x1260 <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	7d c0       	rjmp	.+250    	; 0x1260 <DIO_SETpinVal+0x20a>
			}
		}
		/*If the chosen value is low*/
		else if(u8_VAL==DIO_LOW)
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	88 23       	and	r24, r24
    116a:	09 f0       	breq	.+2      	; 0x116e <DIO_SETpinVal+0x118>
    116c:	76 c0       	rjmp	.+236    	; 0x125a <DIO_SETpinVal+0x204>
		{
			/*Choose which port*/
			switch(u8_PORT)
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3e 83       	std	Y+6, r19	; 0x06
    1176:	2d 83       	std	Y+5, r18	; 0x05
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	59 f1       	breq	.+86     	; 0x11d8 <DIO_SETpinVal+0x182>
    1182:	2d 81       	ldd	r18, Y+5	; 0x05
    1184:	3e 81       	ldd	r19, Y+6	; 0x06
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	2c f4       	brge	.+10     	; 0x1196 <DIO_SETpinVal+0x140>
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f0       	breq	.+26     	; 0x11ae <DIO_SETpinVal+0x158>
    1194:	60 c0       	rjmp	.+192    	; 0x1256 <DIO_SETpinVal+0x200>
    1196:	2d 81       	ldd	r18, Y+5	; 0x05
    1198:	3e 81       	ldd	r19, Y+6	; 0x06
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	89 f1       	breq	.+98     	; 0x1202 <DIO_SETpinVal+0x1ac>
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <DIO_SETpinVal+0x156>
    11aa:	40 c0       	rjmp	.+128    	; 0x122c <DIO_SETpinVal+0x1d6>
    11ac:	54 c0       	rjmp	.+168    	; 0x1256 <DIO_SETpinVal+0x200>
			{
			case DIO_PORTA: CLR_BIT(PORTA,u8_PIN);break;
    11ae:	ab e3       	ldi	r26, 0x3B	; 59
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_SETpinVal+0x176>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_SETpinVal+0x172>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	44 c0       	rjmp	.+136    	; 0x1260 <DIO_SETpinVal+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB,u8_PIN);break;
    11d8:	a8 e3       	ldi	r26, 0x38	; 56
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_SETpinVal+0x1a0>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_SETpinVal+0x19c>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	2f c0       	rjmp	.+94     	; 0x1260 <DIO_SETpinVal+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC,u8_PIN);break;
    1202:	a5 e3       	ldi	r26, 0x35	; 53
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_SETpinVal+0x1ca>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_SETpinVal+0x1c6>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	1a c0       	rjmp	.+52     	; 0x1260 <DIO_SETpinVal+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD,u8_PIN);break;
    122c:	a2 e3       	ldi	r26, 0x32	; 50
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_SETpinVal+0x1f4>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_SETpinVal+0x1f0>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <DIO_SETpinVal+0x20a>
			default:Local_u8Error=NOK;break;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <DIO_SETpinVal+0x20a>
			}
		}
		else
		{
			Local_u8Error=NOK;
    125a:	19 82       	std	Y+1, r1	; 0x01
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <DIO_SETpinVal+0x20a>
		}
	}
	else
	{
		Local_u8Error=NOK;
    125e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
}
    1262:	28 96       	adiw	r28, 0x08	; 8
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <DIO_SETportVal>:

uint8_t DIO_SETportVal(uint8_t u8_PORT,uint8_t u8_VAL)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_SETportVal+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_SETportVal+0x8>
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t local_u8Error=OK;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PORT)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3d 83       	std	Y+5, r19	; 0x05
    1292:	2c 83       	std	Y+4, r18	; 0x04
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	d1 f0       	breq	.+52     	; 0x12d2 <DIO_SETportVal+0x5e>
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <DIO_SETportVal+0x3e>
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <DIO_SETportVal+0x54>
    12b0:	1f c0       	rjmp	.+62     	; 0x12f0 <DIO_SETportVal+0x7c>
    12b2:	2c 81       	ldd	r18, Y+4	; 0x04
    12b4:	3d 81       	ldd	r19, Y+5	; 0x05
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <DIO_SETportVal+0x68>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_SETportVal+0x72>
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <DIO_SETportVal+0x7c>
	{
		case DIO_PORTA: PORTA=u8_VAL;break;
    12c8:	eb e3       	ldi	r30, 0x3B	; 59
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	80 83       	st	Z, r24
    12d0:	10 c0       	rjmp	.+32     	; 0x12f2 <DIO_SETportVal+0x7e>
		case DIO_PORTB: PORTB=u8_VAL;break;
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	80 83       	st	Z, r24
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <DIO_SETportVal+0x7e>
		case DIO_PORTC: PORTC=u8_VAL;break;
    12dc:	e5 e3       	ldi	r30, 0x35	; 53
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	80 83       	st	Z, r24
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <DIO_SETportVal+0x7e>
		case DIO_PORTD: PORTD=u8_VAL;break;
    12e6:	e2 e3       	ldi	r30, 0x32	; 50
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	80 83       	st	Z, r24
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <DIO_SETportVal+0x7e>
		default:local_u8Error=NOK;break;
    12f0:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <DIO_GETpinVal>:

uint8_t DIO_GETpinVal(uint8_t u8_PORT,uint8_t u8_PIN, uint8_t *u8p_RetVal){
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	27 97       	sbiw	r28, 0x07	; 7
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6b 83       	std	Y+3, r22	; 0x03
    131c:	5d 83       	std	Y+5, r21	; 0x05
    131e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t Local_u8Error=OK;//variable using in Error check
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PIN<=DIO_PIN7)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 30       	cpi	r24, 0x08	; 8
    1328:	08 f0       	brcs	.+2      	; 0x132c <DIO_GETpinVal+0x28>
    132a:	73 c0       	rjmp	.+230    	; 0x1412 <DIO_GETpinVal+0x10e>
	{
		switch(u8_PORT)
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3f 83       	std	Y+7, r19	; 0x07
    1334:	2e 83       	std	Y+6, r18	; 0x06
    1336:	4e 81       	ldd	r20, Y+6	; 0x06
    1338:	5f 81       	ldd	r21, Y+7	; 0x07
    133a:	41 30       	cpi	r20, 0x01	; 1
    133c:	51 05       	cpc	r21, r1
    133e:	59 f1       	breq	.+86     	; 0x1396 <DIO_GETpinVal+0x92>
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	91 05       	cpc	r25, r1
    1348:	34 f4       	brge	.+12     	; 0x1356 <DIO_GETpinVal+0x52>
    134a:	2e 81       	ldd	r18, Y+6	; 0x06
    134c:	3f 81       	ldd	r19, Y+7	; 0x07
    134e:	21 15       	cp	r18, r1
    1350:	31 05       	cpc	r19, r1
    1352:	69 f0       	breq	.+26     	; 0x136e <DIO_GETpinVal+0x6a>
    1354:	5c c0       	rjmp	.+184    	; 0x140e <DIO_GETpinVal+0x10a>
    1356:	4e 81       	ldd	r20, Y+6	; 0x06
    1358:	5f 81       	ldd	r21, Y+7	; 0x07
    135a:	42 30       	cpi	r20, 0x02	; 2
    135c:	51 05       	cpc	r21, r1
    135e:	79 f1       	breq	.+94     	; 0x13be <DIO_GETpinVal+0xba>
    1360:	8e 81       	ldd	r24, Y+6	; 0x06
    1362:	9f 81       	ldd	r25, Y+7	; 0x07
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <DIO_GETpinVal+0x68>
    136a:	3d c0       	rjmp	.+122    	; 0x13e6 <DIO_GETpinVal+0xe2>
    136c:	50 c0       	rjmp	.+160    	; 0x140e <DIO_GETpinVal+0x10a>
		{
		/*Choose which port*/
		case DIO_PORTA: *u8p_RetVal=GET_BIT(PINA,u8_PIN);break;
    136e:	e9 e3       	ldi	r30, 0x39	; 57
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a9 01       	movw	r20, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_GETpinVal+0x82>
    1382:	55 95       	asr	r21
    1384:	47 95       	ror	r20
    1386:	8a 95       	dec	r24
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_GETpinVal+0x7e>
    138a:	ca 01       	movw	r24, r20
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	ec 81       	ldd	r30, Y+4	; 0x04
    1390:	fd 81       	ldd	r31, Y+5	; 0x05
    1392:	80 83       	st	Z, r24
    1394:	3f c0       	rjmp	.+126    	; 0x1414 <DIO_GETpinVal+0x110>
		case DIO_PORTB: *u8p_RetVal=GET_BIT(PINB,u8_PIN);break;
    1396:	e6 e3       	ldi	r30, 0x36	; 54
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a9 01       	movw	r20, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_GETpinVal+0xaa>
    13aa:	55 95       	asr	r21
    13ac:	47 95       	ror	r20
    13ae:	8a 95       	dec	r24
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_GETpinVal+0xa6>
    13b2:	ca 01       	movw	r24, r20
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	ec 81       	ldd	r30, Y+4	; 0x04
    13b8:	fd 81       	ldd	r31, Y+5	; 0x05
    13ba:	80 83       	st	Z, r24
    13bc:	2b c0       	rjmp	.+86     	; 0x1414 <DIO_GETpinVal+0x110>
		case DIO_PORTC: *u8p_RetVal=GET_BIT(PINC,u8_PIN);break;
    13be:	e3 e3       	ldi	r30, 0x33	; 51
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_GETpinVal+0xd2>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_GETpinVal+0xce>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	ec 81       	ldd	r30, Y+4	; 0x04
    13e0:	fd 81       	ldd	r31, Y+5	; 0x05
    13e2:	80 83       	st	Z, r24
    13e4:	17 c0       	rjmp	.+46     	; 0x1414 <DIO_GETpinVal+0x110>
		case DIO_PORTD: *u8p_RetVal=GET_BIT(PIND,u8_PIN);break;
    13e6:	e0 e3       	ldi	r30, 0x30	; 48
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_GETpinVal+0xfa>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_GETpinVal+0xf6>
    1402:	ca 01       	movw	r24, r20
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	ec 81       	ldd	r30, Y+4	; 0x04
    1408:	fd 81       	ldd	r31, Y+5	; 0x05
    140a:	80 83       	st	Z, r24
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <DIO_GETpinVal+0x110>
		default: Local_u8Error=NOK;break;
    140e:	19 82       	std	Y+1, r1	; 0x01
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <DIO_GETpinVal+0x110>
		}
	}
	else
	{
		Local_u8Error=NOK;
    1412:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
}
    1416:	27 96       	adiw	r28, 0x07	; 7
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <ADC_init>:
uint8_t* gu8_Reading;
uint8_t gu8_State=IDLE;
void(*CallbackNotification)(void);

void ADC_init(void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	/*Select Ref.*/
#if ADC_REF_SEL == ADC_AREF
	CLR_BIT(ADC_ADMUX,ADMUX_REFS0);
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
#elif ADC_REF_SEL == ADC_AVCC
	SET_BIT(ADC_ADMUX,ADMUX_REFS0);
    1430:	a7 e2       	ldi	r26, 0x27	; 39
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e7 e2       	ldi	r30, 0x27	; 39
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 64       	ori	r24, 0x40	; 64
    143c:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX,ADMUX_REFS1);
    143e:	a7 e2       	ldi	r26, 0x27	; 39
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e7 e2       	ldi	r30, 0x27	; 39
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8f 77       	andi	r24, 0x7F	; 127
    144a:	8c 93       	st	X, r24
#endif

	/*Select ADC Left Adjust Result*/
#if ADC_ADLAR_SEL == LEFT_ADJUST
	SET_BIT(ADC_ADMUX,ADMUX_ADLAR);
    144c:	a7 e2       	ldi	r26, 0x27	; 39
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e7 e2       	ldi	r30, 0x27	; 39
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 62       	ori	r24, 0x20	; 32
    1458:	8c 93       	st	X, r24
#elif ADC_ADLAR_SEL == RIGHT_ADJUST
	CLR_BIT(ADC_ADMUX,ADMUX_ADLAR);
#endif

	/*Select Prescalar*/
	ADC_ADCSRA&=PRESC_BIT_MASK;
    145a:	a6 e2       	ldi	r26, 0x26	; 38
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e6 e2       	ldi	r30, 0x26	; 38
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 7f       	andi	r24, 0xF8	; 248
    1466:	8c 93       	st	X, r24
	ADC_ADCSRA|=ADC_PRESCLAR_SEL;
    1468:	a6 e2       	ldi	r26, 0x26	; 38
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e6 e2       	ldi	r30, 0x26	; 38
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	87 60       	ori	r24, 0x07	; 7
    1474:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADC_ADCSRA,ADCSRA_ADEN);
    1476:	a6 e2       	ldi	r26, 0x26	; 38
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e6 e2       	ldi	r30, 0x26	; 38
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	8c 93       	st	X, r24
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <ADC_u8StartConversionSynch>:

uint8_t ADC_u8StartConversionSynch(uint8_t ADC_Channel,uint8_t* u8_Reading)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	28 97       	sbiw	r28, 0x08	; 8
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	8e 83       	std	Y+6, r24	; 0x06
    14a0:	78 87       	std	Y+8, r23	; 0x08
    14a2:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t local_u8Error=OK;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t local_u8Counter=0;
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	1a 82       	std	Y+2, r1	; 0x02
    14ac:	1b 82       	std	Y+3, r1	; 0x03
    14ae:	1c 82       	std	Y+4, r1	; 0x04
	if(gu8_State == IDLE)
    14b0:	80 91 93 00 	lds	r24, 0x0093
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	09 f0       	breq	.+2      	; 0x14ba <ADC_u8StartConversionSynch+0x30>
    14b8:	5b c0       	rjmp	.+182    	; 0x1570 <ADC_u8StartConversionSynch+0xe6>
	{
		gu8_State=BUSY;
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	80 93 93 00 	sts	0x0093, r24
		/*Select Channel*/
		ADC_ADMUX&=MUX_BIT_MASK;
    14c0:	a7 e2       	ldi	r26, 0x27	; 39
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e7 e2       	ldi	r30, 0x27	; 39
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 7e       	andi	r24, 0xE0	; 224
    14cc:	8c 93       	st	X, r24
		ADC_ADMUX|=ADC_Channel;
    14ce:	a7 e2       	ldi	r26, 0x27	; 39
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e7 e2       	ldi	r30, 0x27	; 39
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	90 81       	ld	r25, Z
    14d8:	8e 81       	ldd	r24, Y+6	; 0x06
    14da:	89 2b       	or	r24, r25
    14dc:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    14de:	a6 e2       	ldi	r26, 0x26	; 38
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e6 e2       	ldi	r30, 0x26	; 38
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 64       	ori	r24, 0x40	; 64
    14ea:	8c 93       	st	X, r24
    14ec:	0b c0       	rjmp	.+22     	; 0x1504 <ADC_u8StartConversionSynch+0x7a>

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
		{
			local_u8Counter++;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	ab 81       	ldd	r26, Y+3	; 0x03
    14f4:	bc 81       	ldd	r27, Y+4	; 0x04
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	a1 1d       	adc	r26, r1
    14fa:	b1 1d       	adc	r27, r1
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	ab 83       	std	Y+3, r26	; 0x03
    1502:	bc 83       	std	Y+4, r27	; 0x04

		/*Start Conversion*/
		SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);

		/*Make sure that the conversion time has finished*/
		while((GET_BIT(ADC_ADCSRA,ADCSRA_ADIF)==0) && (local_u8Counter != ADC_TIMEOUT))
    1504:	e6 e2       	ldi	r30, 0x26	; 38
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 95       	swap	r24
    150c:	8f 70       	andi	r24, 0x0F	; 15
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	81 70       	andi	r24, 0x01	; 1
    1514:	90 70       	andi	r25, 0x00	; 0
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	61 f4       	brne	.+24     	; 0x1532 <ADC_u8StartConversionSynch+0xa8>
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	ab 81       	ldd	r26, Y+3	; 0x03
    1520:	bc 81       	ldd	r27, Y+4	; 0x04
    1522:	80 35       	cpi	r24, 0x50	; 80
    1524:	23 ec       	ldi	r18, 0xC3	; 195
    1526:	92 07       	cpc	r25, r18
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	a2 07       	cpc	r26, r18
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	b2 07       	cpc	r27, r18
    1530:	f1 f6       	brne	.-68     	; 0x14ee <ADC_u8StartConversionSynch+0x64>
		{
			local_u8Counter++;
		}

		if(local_u8Counter == ADC_TIMEOUT)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	ab 81       	ldd	r26, Y+3	; 0x03
    1538:	bc 81       	ldd	r27, Y+4	; 0x04
    153a:	80 35       	cpi	r24, 0x50	; 80
    153c:	23 ec       	ldi	r18, 0xC3	; 195
    153e:	92 07       	cpc	r25, r18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	a2 07       	cpc	r26, r18
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	b2 07       	cpc	r27, r18
    1548:	11 f4       	brne	.+4      	; 0x154e <ADC_u8StartConversionSynch+0xc4>
		{
			local_u8Error=NOK;
    154a:	1d 82       	std	Y+5, r1	; 0x05
    154c:	13 c0       	rjmp	.+38     	; 0x1574 <ADC_u8StartConversionSynch+0xea>
		}
		else
		{
			/*Clear the ADC flag*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIF);
    154e:	a6 e2       	ldi	r26, 0x26	; 38
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e6 e2       	ldi	r30, 0x26	; 38
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 61       	ori	r24, 0x10	; 16
    155a:	8c 93       	st	X, r24

			/*Read the ADC value*/
			if(ADC_ADLAR_SEL == LEFT_ADJUST)
			{
				*u8_Reading=ADC_ADCH;
    155c:	e5 e2       	ldi	r30, 0x25	; 37
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	ef 81       	ldd	r30, Y+7	; 0x07
    1564:	f8 85       	ldd	r31, Y+8	; 0x08
    1566:	80 83       	st	Z, r24
				gu8_State=IDLE;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 93 93 00 	sts	0x0093, r24
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <ADC_u8StartConversionSynch+0xea>
			}
		}
	}
	else
	{
		local_u8Error=BUSY;
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8Error;
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1576:	28 96       	adiw	r28, 0x08	; 8
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <ADC_u8StartConversionASynch>:

uint8_t ADC_u8StartConversionASynch(uint8_t ADC_Channel,uint8_t* u8_Reading,void(*NotificFunc)(void))
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <ADC_u8StartConversionASynch+0x6>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <ADC_u8StartConversionASynch+0x8>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <ADC_u8StartConversionASynch+0xa>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	8a 83       	std	Y+2, r24	; 0x02
    1598:	7c 83       	std	Y+4, r23	; 0x04
    159a:	6b 83       	std	Y+3, r22	; 0x03
    159c:	5e 83       	std	Y+6, r21	; 0x06
    159e:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t local_u8Error=OK;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_State==IDLE)
    15a4:	80 91 93 00 	lds	r24, 0x0093
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	b9 f5       	brne	.+110    	; 0x161a <ADC_u8StartConversionASynch+0x92>
	{
		if((u8_Reading==NULL) || (NotificFunc == NULL))
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	21 f0       	breq	.+8      	; 0x15bc <ADC_u8StartConversionASynch+0x34>
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	11 f4       	brne	.+4      	; 0x15c0 <ADC_u8StartConversionASynch+0x38>
		{
			local_u8Error=NOK;
    15bc:	19 82       	std	Y+1, r1	; 0x01
    15be:	2f c0       	rjmp	.+94     	; 0x161e <ADC_u8StartConversionASynch+0x96>
		}
		else
		{
			gu8_State=BUSY;
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	80 93 93 00 	sts	0x0093, r24

			/*Select Channel*/
			ADC_ADMUX&=MUX_BIT_MASK;
    15c6:	a7 e2       	ldi	r26, 0x27	; 39
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e2       	ldi	r30, 0x27	; 39
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 7e       	andi	r24, 0xE0	; 224
    15d2:	8c 93       	st	X, r24
			ADC_ADMUX|=ADC_Channel;
    15d4:	a7 e2       	ldi	r26, 0x27	; 39
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e7 e2       	ldi	r30, 0x27	; 39
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	90 81       	ld	r25, Z
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	89 2b       	or	r24, r25
    15e2:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADSC);
    15e4:	a6 e2       	ldi	r26, 0x26	; 38
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e6 e2       	ldi	r30, 0x26	; 38
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 64       	ori	r24, 0x40	; 64
    15f0:	8c 93       	st	X, r24

			/*Enable Interrupt*/
			SET_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    15f2:	a6 e2       	ldi	r26, 0x26	; 38
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e6 e2       	ldi	r30, 0x26	; 38
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 60       	ori	r24, 0x08	; 8
    15fe:	8c 93       	st	X, r24

			gu8_Reading=u8_Reading;
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	90 93 02 01 	sts	0x0102, r25
    1608:	80 93 01 01 	sts	0x0101, r24
			CallbackNotification=NotificFunc;
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	90 93 04 01 	sts	0x0104, r25
    1614:	80 93 03 01 	sts	0x0103, r24
    1618:	02 c0       	rjmp	.+4      	; 0x161e <ADC_u8StartConversionASynch+0x96>
		}
	}
	else
	{
		local_u8Error=BUSY;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Error;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1620:	26 96       	adiw	r28, 0x06	; 6
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	0f 92       	push	r0
    163a:	11 24       	eor	r1, r1
    163c:	2f 93       	push	r18
    163e:	3f 93       	push	r19
    1640:	4f 93       	push	r20
    1642:	5f 93       	push	r21
    1644:	6f 93       	push	r22
    1646:	7f 93       	push	r23
    1648:	8f 93       	push	r24
    164a:	9f 93       	push	r25
    164c:	af 93       	push	r26
    164e:	bf 93       	push	r27
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
	/*Read ADC*/
	if(ADC_ADLAR_SEL == LEFT_ADJUST)
	{
		*gu8_Reading=ADC_ADCH;
    165c:	a0 91 01 01 	lds	r26, 0x0101
    1660:	b0 91 02 01 	lds	r27, 0x0102
    1664:	e5 e2       	ldi	r30, 0x25	; 37
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8c 93       	st	X, r24
	{
		*gu8_Reading=ADC_ADCL;
	}

	/*ADC state IDLE*/
	gu8_State=IDLE;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 93 00 	sts	0x0093, r24

	/*Call callback notification func*/
	CallbackNotification();
    1672:	e0 91 03 01 	lds	r30, 0x0103
    1676:	f0 91 04 01 	lds	r31, 0x0104
    167a:	09 95       	icall

	/*Disable the interrupt*/
	CLR_BIT(ADC_ADCSRA,ADCSRA_ADIE);
    167c:	a6 e2       	ldi	r26, 0x26	; 38
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e6 e2       	ldi	r30, 0x26	; 38
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	87 7f       	andi	r24, 0xF7	; 247
    1688:	8c 93       	st	X, r24

}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <Det_ReportError>:
#include "Det.h"

static uint8_t index_row=0;

void Det_ReportError( uint8_t ModuleId , uint8_t ApiId)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <Det_ReportError+0x6>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	6a 83       	std	Y+2, r22	; 0x02
gu8arr_error[index_row][0]=ModuleId;
    16be:	80 91 9c 00 	lds	r24, 0x009C
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	fc 01       	movw	r30, r24
    16cc:	e3 56       	subi	r30, 0x63	; 99
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	80 83       	st	Z, r24
gu8arr_error[index_row][1]=ApiId;
    16d4:	80 91 9c 00 	lds	r24, 0x009C
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	fc 01       	movw	r30, r24
    16e2:	e2 56       	subi	r30, 0x62	; 98
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	80 83       	st	Z, r24
index_row++;
    16ea:	80 91 9c 00 	lds	r24, 0x009C
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	80 93 9c 00 	sts	0x009C, r24
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <main>:

#include "04-APP/APP_Interface.h";


int  main()
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	 APP_init();
    1706:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	 APP_Prog();
    170a:	0e 94 5c 00 	call	0xb8	; 0xb8 <APP_Prog>

	 return 0;
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <__mulsi3>:
    1718:	62 9f       	mul	r22, r18
    171a:	d0 01       	movw	r26, r0
    171c:	73 9f       	mul	r23, r19
    171e:	f0 01       	movw	r30, r0
    1720:	82 9f       	mul	r24, r18
    1722:	e0 0d       	add	r30, r0
    1724:	f1 1d       	adc	r31, r1
    1726:	64 9f       	mul	r22, r20
    1728:	e0 0d       	add	r30, r0
    172a:	f1 1d       	adc	r31, r1
    172c:	92 9f       	mul	r25, r18
    172e:	f0 0d       	add	r31, r0
    1730:	83 9f       	mul	r24, r19
    1732:	f0 0d       	add	r31, r0
    1734:	74 9f       	mul	r23, r20
    1736:	f0 0d       	add	r31, r0
    1738:	65 9f       	mul	r22, r21
    173a:	f0 0d       	add	r31, r0
    173c:	99 27       	eor	r25, r25
    173e:	72 9f       	mul	r23, r18
    1740:	b0 0d       	add	r27, r0
    1742:	e1 1d       	adc	r30, r1
    1744:	f9 1f       	adc	r31, r25
    1746:	63 9f       	mul	r22, r19
    1748:	b0 0d       	add	r27, r0
    174a:	e1 1d       	adc	r30, r1
    174c:	f9 1f       	adc	r31, r25
    174e:	bd 01       	movw	r22, r26
    1750:	cf 01       	movw	r24, r30
    1752:	11 24       	eor	r1, r1
    1754:	08 95       	ret

00001756 <__udivmodhi4>:
    1756:	aa 1b       	sub	r26, r26
    1758:	bb 1b       	sub	r27, r27
    175a:	51 e1       	ldi	r21, 0x11	; 17
    175c:	07 c0       	rjmp	.+14     	; 0x176c <__udivmodhi4_ep>

0000175e <__udivmodhi4_loop>:
    175e:	aa 1f       	adc	r26, r26
    1760:	bb 1f       	adc	r27, r27
    1762:	a6 17       	cp	r26, r22
    1764:	b7 07       	cpc	r27, r23
    1766:	10 f0       	brcs	.+4      	; 0x176c <__udivmodhi4_ep>
    1768:	a6 1b       	sub	r26, r22
    176a:	b7 0b       	sbc	r27, r23

0000176c <__udivmodhi4_ep>:
    176c:	88 1f       	adc	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	5a 95       	dec	r21
    1772:	a9 f7       	brne	.-22     	; 0x175e <__udivmodhi4_loop>
    1774:	80 95       	com	r24
    1776:	90 95       	com	r25
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	08 95       	ret

0000177e <__udivmodsi4>:
    177e:	a1 e2       	ldi	r26, 0x21	; 33
    1780:	1a 2e       	mov	r1, r26
    1782:	aa 1b       	sub	r26, r26
    1784:	bb 1b       	sub	r27, r27
    1786:	fd 01       	movw	r30, r26
    1788:	0d c0       	rjmp	.+26     	; 0x17a4 <__udivmodsi4_ep>

0000178a <__udivmodsi4_loop>:
    178a:	aa 1f       	adc	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	ee 1f       	adc	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	a2 17       	cp	r26, r18
    1794:	b3 07       	cpc	r27, r19
    1796:	e4 07       	cpc	r30, r20
    1798:	f5 07       	cpc	r31, r21
    179a:	20 f0       	brcs	.+8      	; 0x17a4 <__udivmodsi4_ep>
    179c:	a2 1b       	sub	r26, r18
    179e:	b3 0b       	sbc	r27, r19
    17a0:	e4 0b       	sbc	r30, r20
    17a2:	f5 0b       	sbc	r31, r21

000017a4 <__udivmodsi4_ep>:
    17a4:	66 1f       	adc	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	1a 94       	dec	r1
    17ae:	69 f7       	brne	.-38     	; 0x178a <__udivmodsi4_loop>
    17b0:	60 95       	com	r22
    17b2:	70 95       	com	r23
    17b4:	80 95       	com	r24
    17b6:	90 95       	com	r25
    17b8:	9b 01       	movw	r18, r22
    17ba:	ac 01       	movw	r20, r24
    17bc:	bd 01       	movw	r22, r26
    17be:	cf 01       	movw	r24, r30
    17c0:	08 95       	ret

000017c2 <_exit>:
    17c2:	f8 94       	cli

000017c4 <__stop_program>:
    17c4:	ff cf       	rjmp	.-2      	; 0x17c4 <__stop_program>
